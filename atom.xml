<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Rotten Code</title>
  
  <subtitle>写的一手好代码！👍</subtitle>
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="http://lyj08.gitee.io/"/>
  <updated>2020-12-30T09:28:04.329Z</updated>
  <id>http://lyj08.gitee.io/</id>
  
  <author>
    <name>Rotten Code</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>项目生成工具,根据数据库生成，助你效率翻倍</title>
    <link href="http://lyj08.gitee.io/posts/434af8d5/"/>
    <id>http://lyj08.gitee.io/posts/434af8d5/</id>
    <published>2020-05-26T13:41:00.000Z</published>
    <updated>2020-12-30T09:28:04.329Z</updated>
    
    <content type="html"><![CDATA[<p>最近，个人也接了点不足挂齿的小小私活。为了快速开发，开箱即用，每个项目不需要重新搭建。提升效率，就写了基本的项目架子，然后根据已建好的数据库，生成对应的增删改查的接口。生成即可使用。</p><a id="more"></a><h2 id="一、生成的项目结构说明"><a href="#一、生成的项目结构说明" class="headerlink" title="一、生成的项目结构说明"></a>一、生成的项目结构说明</h2><h3 id="一、项目技术"><a href="#一、项目技术" class="headerlink" title="一、项目技术"></a>一、项目技术</h3><p><strong>SpringBoot + shiro + mysql + mybatis-plus;</strong></p><p>项目统一 restful 风格，统一异常 Json 处理化，respones 数据结构统一。</p><p>跨域问题处理。</p><p>也会过滤掉给前端的 一些 为 null 的属性，将值填充为 空字符串 “”；</p><p>也包含了日志文件输出。</p><p><strong>下面就是工具生成的项目结构</strong></p><h3 id="二、项目结构"><a href="#二、项目结构" class="headerlink" title="二、项目结构"></a>二、项目结构</h3><p><img src="http://thisforyou.cn:180/file/articleContentImg/2020-05-26/1590498197752.png" alt="项目结构.png"><br>项目的基本结构如上图所示。这是一块公共的代码块。</p><p><strong>core 包：</strong> 是数据库生成的业务代码增删改；</p><p>mapper 文件 在resoure 目录下。</p><p><img src="http://thisforyou.cn:180/file/articleContentImg/2020-05-26/1590498218984.png" alt="项目结构2.png"></p><p>每一个类，都有一个注释说明，在这就不一一做解释了。</p><h3 id="二、业务代码模块"><a href="#二、业务代码模块" class="headerlink" title="二、业务代码模块"></a>二、业务代码模块</h3><p>每一张表，都有对应的 增 删 改 查 的接口。使用的不同请求方式。<br><img src="http://thisforyou.cn:180/file/articleContentImg/2020-05-26/1590498234628.png" alt="core.png"></p><p><strong>增 删 改 查 接口 这样。</strong></p><p><img src="http://thisforyou.cn:180/file/articleContentImg/2020-05-26/1590498321532.png" alt="image.png"></p><p><strong>数据结构长这样：</strong></p><p>这是查的接口数据结果，包含了分处理。</p><p><img src="http://thisforyou.cn:180/file/articleContentImg/2020-05-26/1590498338181.png" alt="接口结果.png"></p><p><strong>Service 接口：</strong><br><img src="http://thisforyou.cn:180/file/articleContentImg/2020-05-26/1590498377412.png" alt="service.png"></p><p><strong>ServiceImpl</strong></p><p><strong>Mapper接口：</strong></p><p><img src="http://thisforyou.cn:180/file/articleContentImg/2020-05-26/1590498421701.png" alt="mapper.png"></p><p><strong>xml:</strong></p><p><img src="http://thisforyou.cn:180/file/articleContentImg/2020-05-26/1590498474866.png" alt="xml.png"></p><p>这是项目的基本结构了。</p><h3 id="三、相关文件"><a href="#三、相关文件" class="headerlink" title="三、相关文件"></a>三、相关文件</h3><p><strong>1、R.java 封装统一响应前端数据结构</strong></p><p><img src="http://thisforyou.cn:180/file/articleContentImg/2020-05-26/1590498497162.png" alt="R.png"></p><p><strong>2、统一异常枚举</strong><br><img src="http://thisforyou.cn:180/file/articleContentImg/2020-05-26/1590498525124.png" alt="Error.png"></p><p><strong>3、定义自定义异常，限制错误枚举</strong></p><p><img src="http://thisforyou.cn:180/file/articleContentImg/2020-05-26/1590498550002.png" alt="serviceException.png"><br><strong>4、全局异常捕获拦截</strong></p><p><img src="http://thisforyou.cn:180/file/articleContentImg/2020-05-26/1590498578199.png" alt="异常捕获.png"></p><p>基本的结构代码，介绍到此。</p><h2 id="二、项目生成工具源码结构"><a href="#二、项目生成工具源码结构" class="headerlink" title="二、项目生成工具源码结构"></a>二、项目生成工具源码结构</h2><p>工具源码结构</p><p><img src="http://thisforyou.cn:180/file/articleContentImg/2020-05-26/1590498623636.png" alt="gen.png"></p><p>源码结构不做说明了，太多东西。</p><h3 id="2、1-项目工具的使用"><a href="#2、1-项目工具的使用" class="headerlink" title="2、1 项目工具的使用"></a>2、1 项目工具的使用</h3><p><img src="http://thisforyou.cn:180/file/articleContentImg/2020-05-26/1590498649387.png" alt="使用.png"></p><p>项目所需属性在类 <code>ConfigProperties.java</code> 中</p><p>可通过 main 方法进行项目的快速生成 也可以部署出去，通过 http 的形式，打包下载。</p><p><strong>页面</strong></p><p><img src="http://thisforyou.cn:180/file/articleContentImg/2020-05-26/1590498685103.png" alt="页面.png"></p><p><img src="http://thisforyou.cn:180/file/articleContentImg/2020-05-26/1590498724832.png" alt="打包下载.png"></p><p><a href="https://github.com/memoryoverflow/gen-code.git">源码地址</a></p><p><img src="http://thisforyou.cn:180/file/img/publick-qrcode.jpg" alt="img"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近，个人也接了点不足挂齿的小小私活。为了快速开发，开箱即用，每个项目不需要重新搭建。提升效率，就写了基本的项目架子，然后根据已建好的数据库，生成对应的增删改查的接口。生成即可使用。&lt;/p&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://lyj08.gitee.io/categories/java/"/>
    
    
      <category term="java" scheme="http://lyj08.gitee.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>github 克隆速度慢？怎么解决，三步，速度达到 Mib/s</title>
    <link href="http://lyj08.gitee.io/posts/e4924e28/"/>
    <id>http://lyj08.gitee.io/posts/e4924e28/</id>
    <published>2020-04-12T02:23:00.000Z</published>
    <updated>2020-12-30T09:26:02.378Z</updated>
    
    <content type="html"><![CDATA[<p>github 克隆dubbo源码的速度：</p><p><img src="http://thisforyou.cn:180/file/articleContentImg/2020-04-12/1586657818053.png" alt="1.png"></p><p>三步之后我们再看看速度</p><a id="more"></a><h2 id="第一步："><a href="#第一步：" class="headerlink" title="第一步："></a>第一步：</h2><p>​    github上找到想要克隆的项目，然后先fuck 一下，对不起说错了，是fork一下。如下图所示：</p><p><img src="http://thisforyou.cn:180/file/articleContentImg/2020-04-12/1586657924853.png" alt="d.png"></p><p>fork 之后，进入自己的仓库看看，像这样：</p><p><img src="http://thisforyou.cn:180/file/articleContentImg/2020-04-12/1586657979199.png" alt="3.png"></p><h2 id="第二步："><a href="#第二步：" class="headerlink" title="第二步："></a>第二步：</h2><p>​    到马云上，新建一个仓库，不，是码云–gitee。新建一个仓库，像这样：<br><img src="http://thisforyou.cn:180/file/articleContentImg/2020-04-12/1586658001350.png" alt="gite.png"></p><p>一个dubbo的源码，倒入到gitee仓库10秒钟就搞定。</p><p>导入后在自己的仓库中看看，像这样：</p><p><img src="http://thisforyou.cn:180/file/articleContentImg/2020-04-12/1586658019773.png" alt="4.png"></p><h2 id="第三步："><a href="#第三步：" class="headerlink" title="第三步："></a>第三步：</h2><p>​    复制我们的 gitee 上的克隆地址：  </p><p>执行命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;gitee.com&#x2F;lyj08&#x2F;dubbo.git</span><br></pre></td></tr></table></figure><p>现在再看看克隆到多少了：</p><p>其实 10分钟过去了，才下载那么一点点，有时候还失败：</p><p><img src="https://pic4.zhimg.com/80/v2-96e310f0a889071149cf9b8fdc10beef_1440w.jpg" alt="img"></p><p>看看这个gitee 的速度：</p><p><img src="http://thisforyou.cn:180/file/articleContentImg/2020-04-12/1586658123085.png" alt="7.png"></p><p>这个速度，根据你的网速决定：</p><p><img src="http://thisforyou.cn:180/file/articleContentImg/2020-04-12/1586658133776.png" alt="8.png"></p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>三步搞定：</p><ol><li>github fork项目。</li><li>gitee 新建仓库，从github fork的地址，导入到gitee中。</li><li>git clone gitee新建的地址。</li></ol><p><img src="http://thisforyou.cn:180/file/img/publick-qrcode.jpg" alt=""></p><hr><ul><li><a href="http://mp.weixin.qq.com/s?__biz=Mzg3NjEwNzQ0NQ==&mid=2247483786&idx=1&sn=8a08186a948c62398f3e6d2551529207&chksm=cf360250f8418b4602aa9b5c77b7c82418afdcd54228db386f7a0ff56655a3c4ef764cb1fc2a#rd">安卓中，没有Spring?不存在的。 带你在安卓中写一个IOC、DI框架，实现Spring 的依赖注入。</a></li><li><a href="http://mp.weixin.qq.com/s?__biz=Mzg3NjEwNzQ0NQ==&mid=2247483762&idx=1&sn=d4530ccbe3c8f93845a7e178dddd0bac&chksm=cf3602a8f8418bbe2dd24b56070196e4a9bebf1c0f85ccfcc95b30f823b3f456cb05eacce437#rd">并发工具CountDownLatch是如何实现阻塞的？</a></li><li><a href="http://mp.weixin.qq.com/s?__biz=Mzg3NjEwNzQ0NQ==&mid=2247483747&idx=1&sn=313a454acc561b2f8d16aefd164fef5f&chksm=cf3602b9f8418baf40d6eb63d5fdaba3df27004484c5d3109578955eae2a8115743b321ca516#rd">接口不能被实例化，Mybatis的Mapper/Dao为什么却可以@Autowired注入？</a></li><li><a href="http://mp.weixin.qq.com/s?__biz=Mzg3NjEwNzQ0NQ==&mid=2247483775&idx=1&sn=845f221556b6ee93b83e835ab36e384b&chksm=cf3602a5f8418bb3967420e867f33397c22daad2eb3c473311c195110a90e1ceb9396620cbb5#rd">MyBatis – Invalid bound statement (not found) 的所以然来，知其然知其所以然！</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;github 克隆dubbo源码的速度：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://thisforyou.cn:180/file/articleContentImg/2020-04-12/1586657818053.png&quot; alt=&quot;1.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;三步之后我们再看看速度&lt;/p&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://lyj08.gitee.io/categories/java/"/>
    
    
      <category term="java" scheme="http://lyj08.gitee.io/tags/java/"/>
    
      <category term="github" scheme="http://lyj08.gitee.io/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>在安卓里没有Spring?不存在的，咱们自己手写实现 IOC 与 DI，在安卓里也不再自己new像</title>
    <link href="http://lyj08.gitee.io/posts/f10cb61a/"/>
    <id>http://lyj08.gitee.io/posts/f10cb61a/</id>
    <published>2020-03-29T08:06:00.000Z</published>
    <updated>2020-12-30T09:27:46.746Z</updated>
    
    <content type="html"><![CDATA[<p>最近接触的项目，与原生的安卓开发相关。</p><p>对于安卓的开发并不熟悉，第一次接触到了安卓开发。因为自己用习惯了Spring 框架的开发。用起安卓来，很是不习惯了。</p><p>这样子不符合我的个性习惯了，我就是在安卓中使用Spring的类似功能，我就要实现Spring 的 Bean的注入开发，实现 IOC 实现DI。</p><p>如何实现请看操作：？</p><a id="more"></a><p><strong>1、建立一个Android demo</strong></p><p>项目结构如下：<br><img src="http://thisforyou.cn:180/file/articleContentImg/2020-04-12/1586660035491.jpg" alt="670.jpg"></p><ul><li><p>annotation 包：</p></li><li><ul><li>Autowired 注解与Spring的Autowired功能类似，实现属性注入。</li><li>BeanScan 注解 包扫描注解</li><li>Componet 注解 与Spring Componet 注解一样。</li><li>Table 注解是做 数据的实体与数据库做映射的 一个注解，类似MyBtias-plus的一样</li></ul></li><li><p>db:是数据库相关的封装 与此文没有多大关系</p></li><li><p>spring包：就是此文的重点包。</p></li><li><ul><li>ApplicationContextAware：与Spring 的ApplicationContextAware一样，拿到上下文的对象，拿到对象就可以对获取Bean…</li><li>BeanFactoryPostProcessor：为spring在容器初始化时对外对外暴露的扩展接口，在Bean实例化前可以对 BeanDeinition的一些属性进行操作修改。</li></ul></li><li><p>factory包：Bean工厂包，定义了Bean注册的接口，和获取Bean 的接口。</p></li><li><p>scan包：对项目的跟路径进行扫描，凡事加了注解@Componet注解的，都一将Bean放到IOC容器中。</p></li><li><p>ApplicationContext：入口类。</p></li></ul><p>项目结构简单完成。</p><p>注解：</p><p>Autowired：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 永健</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2020-03-29 0w:22</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(ElementType.FIELD)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Autowired &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Component</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 永健</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2020-03-28 01:12</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Component &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * BeanName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">name</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>BeanScan</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> BeanScan &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 包路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">packages</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2、入口类 ApplicationContext</p><p>模仿Spring的refresh()方法。<br><img src="http://thisforyou.cn:180/file/articleContentImg/2020-04-12/1586660008662.jpg" alt="640.jpg"></p><p>构造函数：</p><p>需要一个 Activity对象，安卓中最重要的就是Activity了，Android四大组件之一。每一个页面都又一个Activity,安卓中有一个主MainActivity，它就是入口，项目启动的时候，就会首先加载主MainActivity。Spring 的包扫描，也就定在这。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ApplicationContext</span><span class="params">(MainActivity activity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.context = activity.getApplicationContext();</span><br><span class="line">    handlerBeanScaner(activity);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>MainActivity：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@BeanScan(packages = &quot;com.example.testdemo&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Context context;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ApplicationContext applicationContext;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        context = getApplicationContext();</span><br><span class="line"></span><br><span class="line">        applicationContext = <span class="keyword">new</span> ApplicationContext(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">        Tiger tiger = applicationContext.getBean(<span class="string">&quot;tiger&quot;</span>);</span><br><span class="line">        tiger.eat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每一个Activity都要继承于一个基类Actity。</p><p>项目启动的时候会加载一个 onCreate 方法。然后我们就可以开启我们的 安卓Spring之路。</p><p>我们构造一个 new ApplicationContext(this)；传入当前对象，目的是拿到当前对象的注解，@BeanScan(packages = “com.example.testdemo”)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ApplicationContext</span><span class="params">(MainActivity activity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.context = activity.getApplicationContext();</span><br><span class="line">    handlerBeanScaner(activity);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">handlerBeanScaner</span><span class="params">(MainActivity activity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.activity = activity;</span><br><span class="line">    Class&lt;? extends MainActivity&gt; aClass = activity.getClass();</span><br><span class="line">    BeanScan annotation = aClass.getAnnotation(BeanScan.class);</span><br><span class="line">    <span class="keyword">if</span> (StringUtils.isNotNull(annotation)) &#123;</span><br><span class="line">        <span class="keyword">this</span>.packages = annotation.packages();</span><br><span class="line">        <span class="keyword">this</span>.refresh();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>拿到了注解的上的要扫描的包路径，然后进行筛选扫描：</p><p>refresh方法 是不是雨Spirng的有点相似啊。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">refresh</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.beanFactory = createBeanFactory();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.scanner = <span class="keyword">new</span> ClassBeanScanner(beanFactory);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.scanner.scan(<span class="keyword">this</span>.context, <span class="keyword">this</span>.packages);</span><br><span class="line"></span><br><span class="line">    invokeBeanFactoryPostProcessors(beanFactory);</span><br><span class="line"></span><br><span class="line">    finishBeanInit();</span><br><span class="line"></span><br><span class="line">    setApplicationContext();</span><br><span class="line"></span><br><span class="line">    invokeInitializingBean(beanFactory);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>DefaultBeanFactory 实现了 SingletonBeanFactory</p><p><img src="http://thisforyou.cn:180/file/articleContentImg/2020-04-12/1586659973942.jpg" alt="640.jpg"><br>DefaultBeanFactory 就存放了实例化后的Bean 与 实例话前的 BeanDeinition对象，可以理解为IOC容器。</p><p>初始化好后，接下来就是进行扫描。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.testdemo.spring.scan;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.testdemo.annotation.Component;</span><br><span class="line"><span class="keyword">import</span> com.example.testdemo.spring.bean.BeanDefinition;</span><br><span class="line"><span class="keyword">import</span> com.example.testdemo.spring.bean.GenericBeanDefinition;</span><br><span class="line"><span class="keyword">import</span> com.example.testdemo.spring.factory.DefaultBeanFactory;</span><br><span class="line"><span class="keyword">import</span> com.example.testdemo.utils.StringUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Enumeration;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> dalvik.system.DexFile;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 永健</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2020-03-29 01:01</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassPathBeanDefinitionScanner</span> <span class="keyword">implements</span> <span class="title">BeanScanner</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> DefaultBeanFactory beanFactory;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ClassPathBeanDefinitionScanner</span><span class="params">(DefaultBeanFactory beanFactory)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.beanFactory = beanFactory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 实现了我们的扫描接口的方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> packages</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;BeanDefinition&gt; <span class="title">scan</span><span class="params">(Context context, String packages)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; className = getClassName(context, packages);</span><br><span class="line">        List&lt;BeanDefinition&gt; beanDefinitions = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String clazz : className) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Class&lt;?&gt; aClass = Class.forName(clazz);</span><br><span class="line">                Component component = aClass.getAnnotation(Component.class);</span><br><span class="line">                <span class="keyword">if</span> (StringUtils.isNull(component)) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                GenericBeanDefinition beanDefinition = <span class="keyword">new</span> GenericBeanDefinition();</span><br><span class="line"></span><br><span class="line">                String name = component.name();</span><br><span class="line">                <span class="keyword">if</span> (StringUtils.isBlank(name)) &#123;</span><br><span class="line">                    name = toLowerCaseFirstOne(aClass.getSimpleName());</span><br><span class="line">                &#125;</span><br><span class="line">                beanDefinition.setBeanName(name);</span><br><span class="line">                beanDefinition.setAliasName(name);</span><br><span class="line">                beanDefinition.setBeanClass(aClass);</span><br><span class="line">                beanDefinitions.add(beanDefinition);</span><br><span class="line"></span><br><span class="line">                beanFactory.registerSingleton(name, beanDefinition);</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> beanDefinitions;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 筛选处指定包下的类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> packageName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;String&gt; <span class="title">getClassName</span><span class="params">(Context context, String packageName)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; classNameList = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//通过DexFile查找当前的APK中可执行文件</span></span><br><span class="line">            DexFile df = <span class="keyword">new</span> DexFile(context.getPackageCodePath());</span><br><span class="line"></span><br><span class="line">            <span class="comment">//获取df中的元素  这里包含了所有可执行的类名 该类名包含了包名+类名的方式</span></span><br><span class="line">            Enumeration&lt;String&gt; enumeration = df.entries();</span><br><span class="line">            <span class="keyword">while</span> (enumeration.hasMoreElements()) &#123;</span><br><span class="line">                String className = enumeration.nextElement();</span><br><span class="line"></span><br><span class="line">                <span class="comment">//在当前所有可执行的类里面查找包含有该包名的所有类</span></span><br><span class="line">                <span class="keyword">if</span> (className.contains(packageName)) &#123;</span><br><span class="line">                    classNameList.add(className);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> classNameList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 首字母小写</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> s</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">toLowerCaseFirstOne</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (Character.isLowerCase(s.charAt(<span class="number">0</span>))) &#123;</span><br><span class="line">            <span class="keyword">return</span> s;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (<span class="keyword">new</span> StringBuilder()).append(Character.toLowerCase(s.charAt(<span class="number">0</span>))).append(s.substring(<span class="number">1</span>)).toString();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>invokeBeanFactoryPostProcessors(<strong>beanFactory</strong>);</p><p>在完成Bean的扫描 将Bean的元数据解析后，进行调用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">invokeBeanFactoryPostProcessors</span><span class="params">(DefaultBeanFactory beanFactory)</span> </span>&#123;</span><br><span class="line">    List&lt;BeanFactoryPostProcessor&gt; beanFactoryPostProcessor = beanFactory.getBeanFactoryPostProcessor();</span><br><span class="line">    <span class="keyword">for</span> (BeanFactoryPostProcessor processor : beanFactoryPostProcessor) &#123;</span><br><span class="line">        processor.postProcessBeanFactory(<span class="keyword">this</span>.singletonBeanFactory);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>finishBeanInit(); Bean的实例化，和依赖注入：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">finishBeanInit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Map&lt;String, BeanDefinition&gt; beanDefinitionMap = beanFactory.getBeanDefinitionMap();</span><br><span class="line">    <span class="keyword">for</span> (Map.Entry&lt;String, BeanDefinition&gt; entry : beanDefinitionMap.entrySet()) &#123;</span><br><span class="line">        String beanName = entry.getKey();</span><br><span class="line">        GenericBeanDefinition beanDefinition = (GenericBeanDefinition) entry.getValue();</span><br><span class="line">        Class&lt;?&gt; beanClass = beanDefinition.getBeanClass();</span><br><span class="line">        Object newInstance = createBean(beanClass);</span><br><span class="line">        registerBean(beanName, newInstance);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 处理依赖注入</span></span><br><span class="line">    isInjection(beanDefinitionMap);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>依赖注入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">isInjection</span><span class="params">(Map&lt;String, BeanDefinition&gt; beanDefinitionMap)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 再次遍历所有的实例化的 BeanDefinition,处理依赖关系</span></span><br><span class="line">    <span class="keyword">for</span> (Map.Entry&lt;String, BeanDefinition&gt; entry : beanDefinitionMap.entrySet()) &#123;</span><br><span class="line">        String beanName = entry.getKey();</span><br><span class="line">        GenericBeanDefinition beanDefinition = (GenericBeanDefinition) entry.getValue();</span><br><span class="line">        Class&lt;?&gt; beanClass = beanDefinition.getBeanClass();</span><br><span class="line">        Field[] declaredFields = beanClass.getDeclaredFields();</span><br><span class="line">        <span class="keyword">for</span> (Field field : declaredFields) &#123;</span><br><span class="line">            Autowired annotation = field.getAnnotation(Autowired.class);</span><br><span class="line">            <span class="keyword">if</span> (StringUtils.isNull(annotation)) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 当前的实例</span></span><br><span class="line">            Object bean = getBean(beanName);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (StringUtils.isNull(bean)) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> BeansException(<span class="string">&quot;Autowired 注入必须不为空 &quot;</span> + field.getName());</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 允许操作修改</span></span><br><span class="line">            field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            Class&lt;?&gt; fieldType = field.getType();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 检查加加了  Autowired 注解的属性，是否加了 Component注解</span></span><br><span class="line">            <span class="comment">// 否则抛出异常，找不到实例注入</span></span><br><span class="line">            Component component = fieldType.getAnnotation(Component.class);</span><br><span class="line">            <span class="keyword">if</span> (StringUtils.isNotNull(component)) &#123;</span><br><span class="line">                String fieldBeanName = component.name();</span><br><span class="line">                <span class="keyword">if</span> (StringUtils.isBlank(fieldBeanName)) &#123;</span><br><span class="line">                    <span class="comment">// 如果加了，从IOC容器中获取当前属性的实例</span></span><br><span class="line">                    fieldBeanName = toLowerCaseFirstOne(fieldType.getSimpleName());</span><br><span class="line">                    Object fieldObject = getBean(fieldBeanName);</span><br><span class="line">                    <span class="keyword">if</span> (StringUtils.isNotNull(fieldObject)) &#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            <span class="comment">// 做属性赋值</span></span><br><span class="line">                            field.set(bean, fieldObject);</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">                            e.printStackTrace();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>spring 在处理注入的时候使用了递归注入，在实例化Bean 的时候，就会检查当前类的有没有属性 加了，Autowired 注解的，如果加了，判断当前属性是否已经实例化了，如果没有，就会实例化下去。实例化的时候，又会检查它的属性是否又依赖注入，有过有又判断当前的属性是否实例化下去，这样子会循环判断下去，所以Spring使用了递归。 </p><p>相互依赖冲突的化就会出现 这会就有可能会抛出 circle 异常。</p><p>在这里我就没有使用递归，分开了两部操作，第一步就是先实例化所有的Bean再处理依赖注入的问题；</p><p>这个时候已经完成了DI的操作了。</p><p>测试结果：</p><p><img src="https://pic1.zhimg.com/80/v2-20c1bf4bc9f01bf67793199312981c48_1440w.jpg" alt=""></p><p>Tiger 类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Tiger</span> <span class="keyword">implements</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Women women;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        women.eat();</span><br><span class="line">        System.out.println(<span class="string">&quot;Tiger eat...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Women 类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Women</span> <span class="keyword">implements</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;women eat...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> MyBeanFactoryPostProcessor Bean实例化前的扩展接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 永健</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2020-03-29 03:12</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBeanFactoryPostProcessor</span> <span class="keyword">implements</span> <span class="title">BeanFactoryPostProcessor</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postProcessBeanFactory</span><span class="params">(SingletonBeanFactory beanFactory)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        Set&lt;String&gt; names = beanFactory.getBeanDefinitionNames();</span><br><span class="line">        System.out.println(<span class="string">&quot;共有Bean:&quot;</span>+beanFactory.getBeanDefinitionCount());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MyApplicationContextAware 上下文对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 拿到上下文对象 可以做一个Bean工厂</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 永健</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2020-03-29 03:39</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyApplicationContextAware</span> <span class="keyword">implements</span> <span class="title">ApplicationContextAware</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ApplicationContext context;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setApplicationContext</span><span class="params">(ApplicationContext applicationContext)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        context=applicationContext;</span><br><span class="line">        System.out.println(<span class="string">&quot;拿到Spring上上下文对象&quot;</span>);</span><br><span class="line">        System.out.println(context);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ApplicationContext <span class="title">getApplicationContext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> context;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>MainActivty 的 onCreate 方法，入口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    context = getApplicationContext();</span><br><span class="line"></span><br><span class="line">    applicationContext = <span class="keyword">new</span> ApplicationContext(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    Tiger tiger = applicationContext.getBean(<span class="string">&quot;tiger&quot;</span>);</span><br><span class="line">    tiger.eat();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行查看打印结果：</p><p><img src="http://thisforyou.cn:180/file/articleContentImg/2020-04-12/1586659784930.png" alt="640.png"></p><p>打完手工</p><p>​                      </p><hr><p>::: hljs-center</p><p><img src="http://thisforyou.cn:180/file/img/publick-qrcode.jpg" alt="img"></p><hr><ul><li><a href="http://mp.weixin.qq.com/s?__biz=Mzg3NjEwNzQ0NQ==&mid=2247483775&idx=1&sn=845f221556b6ee93b83e835ab36e384b&chksm=cf3602a5f8418bb3967420e867f33397c22daad2eb3c473311c195110a90e1ceb9396620cbb5#rd">MyBatis – Invalid bound statement (not found) 的所以然来，知其然知其所以然！</a></li><li><a href="http://mp.weixin.qq.com/s?__biz=Mzg3NjEwNzQ0NQ==&mid=2247483762&idx=1&sn=d4530ccbe3c8f93845a7e178dddd0bac&chksm=cf3602a8f8418bbe2dd24b56070196e4a9bebf1c0f85ccfcc95b30f823b3f456cb05eacce437#rd">并发工具CountDownLatch是如何实现阻塞的？</a></li><li><a href="http://mp.weixin.qq.com/s?__biz=Mzg3NjEwNzQ0NQ==&mid=2247483747&idx=1&sn=313a454acc561b2f8d16aefd164fef5f&chksm=cf3602b9f8418baf40d6eb63d5fdaba3df27004484c5d3109578955eae2a8115743b321ca516#rd">接口不能被实例化，Mybatis的Mapper/Dao为什么却可以@Autowired注入？</a></li></ul><p>:::</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近接触的项目，与原生的安卓开发相关。&lt;/p&gt;
&lt;p&gt;对于安卓的开发并不熟悉，第一次接触到了安卓开发。因为自己用习惯了Spring 框架的开发。用起安卓来，很是不习惯了。&lt;/p&gt;
&lt;p&gt;这样子不符合我的个性习惯了，我就是在安卓中使用Spring的类似功能，我就要实现Spring 的 Bean的注入开发，实现 IOC 实现DI。&lt;/p&gt;
&lt;p&gt;如何实现请看操作：？&lt;/p&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://lyj08.gitee.io/categories/java/"/>
    
    
      <category term="IOC Spring" scheme="http://lyj08.gitee.io/tags/IOC-Spring/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis -- Invalid bound statement (not found) 的所以然来，知其然知其所以然！</title>
    <link href="http://lyj08.gitee.io/posts/7c99dfb8/"/>
    <id>http://lyj08.gitee.io/posts/7c99dfb8/</id>
    <published>2020-03-08T10:21:00.000Z</published>
    <updated>2020-12-30T09:27:01.177Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MyBatis-–-Invalid-bound-statement-not-found-的所以然来，知其然知其所以然！"><a href="#MyBatis-–-Invalid-bound-statement-not-found-的所以然来，知其然知其所以然！" class="headerlink" title="MyBatis – Invalid bound statement (not found) 的所以然来，知其然知其所以然！"></a>MyBatis – Invalid bound statement (not found) 的所以然来，知其然知其所以然！</h1><p>很多人刚刚开始学mybatis的时候，常常在做select、update、delete、insert的时候，会遇到类似这种，</p><p>Invalid bound statement (not found)：…. 的错误。例如：</p><p><img src="http://thisforyou.cn:180/file/articleContentImg/2020-03-08/1583662605040.png" alt="1.png"></p><p>当然，我们都知到这肯定是，命名空间配置错了，或者是，dao 接口的的 方法，和 mapper文件的方法没有对应上。 这改正过来即可解决这个问题；</p><a id="more"></a><p>但是 mybatis 是怎么通过Dao/mapper接口的方法，找到对应的 xml 节点 sql 吗？</p><p>来分析一下这其中的因为所以，抽丝剥茧。</p><p>过程看不明白直接看总结即可😂：</p><p><img src="http://thisforyou.cn:180/file/articleContentImg/2019-10-16/1571221216702.gif" alt=""></p><h3 id="首先-先介绍几个类："><a href="#首先-先介绍几个类：" class="headerlink" title="首先 先介绍几个类："></a>首先 先介绍几个类：</h3><ol><li><p>Configuration.java</p><p>mybatis 全局都围绕着它转，因为它几乎涵盖mybatis的所有初始化后要存储的信息。</p><ul><li><p>Map&lt;String, MappedStatement&gt; mappedStatements：</p><p>这个 map 就是在启动项目时候，扫描xml文件对xml 节点（select、update、delete、insert）解析封装成MappedStatement对象中的。</p><p>Key:就是 命名空间+方法名，value:就是解析后一个xml 节点信息。</p></li></ul></li><li><p>MappedStatement：</p><p>一个MappedStatement对应一条 xml 中的 一个节点 比如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;BaseResultMap&quot;</span> <span class="attr">useCache</span>=<span class="string">&quot;true&quot;</span> <span class="attr">timeout</span>=<span class="string">&quot;&quot;</span> <span class="attr">resultSets</span>=<span class="string">&quot;&quot;</span> <span class="attr">flushCache</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    select <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;Base_Column_List&quot;</span>/&gt;</span> from tb_city</span><br><span class="line">    where id =#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在初始化过程就会解析 xml 将每一个节点信息封装成 MappedStatement 对象：</p><p>例如： id –对应的就是xml 中的 节点id 如：上面的 select 语句的 id=”findById”,其它的属性也会一一对应节点中配置的。会将入参 结果集都解析封装到其中 resultMaps… 还有sql类型…..</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 属性</span></span><br><span class="line"> <span class="keyword">private</span> String resource;</span><br><span class="line"> <span class="keyword">private</span> Configuration configuration;</span><br><span class="line"> <span class="keyword">private</span> String id;</span><br><span class="line"> <span class="keyword">private</span> Integer fetchSize;</span><br><span class="line"> <span class="keyword">private</span> Integer timeout;</span><br><span class="line"> <span class="keyword">private</span> StatementType statementType;</span><br><span class="line"> <span class="keyword">private</span> ResultSetType resultSetType;</span><br><span class="line"> <span class="keyword">private</span> SqlSource sqlSource;</span><br><span class="line"> <span class="keyword">private</span> Cache cache;</span><br><span class="line"> <span class="keyword">private</span> ParameterMap parameterMap;</span><br><span class="line"> <span class="keyword">private</span> List&lt;ResultMap&gt; resultMaps;</span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">boolean</span> flushCacheRequired;</span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">boolean</span> useCache;</span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">boolean</span> resultOrdered;</span><br><span class="line"> <span class="keyword">private</span> SqlCommandType sqlCommandType;</span><br><span class="line"> <span class="keyword">private</span> KeyGenerator keyGenerator;</span><br><span class="line"> <span class="keyword">private</span> String[] keyProperties;</span><br><span class="line"> <span class="keyword">private</span> String[] keyColumns;</span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">boolean</span> hasNestedResultMaps;</span><br><span class="line"> <span class="keyword">private</span> String databaseId;</span><br><span class="line"> <span class="keyword">private</span> Log statementLog;</span><br><span class="line"> <span class="keyword">private</span> LanguageDriver lang;</span><br><span class="line"> <span class="keyword">private</span> String[] resultSets;</span><br></pre></td></tr></table></figure></li></ol><ol start="3"><li><p>MybatisMapperProxy.java</p><p> Mybatis Dao/Mapper接口的动态代理类，所有调用mapper 接口的方法，入口即在这，断点从这开始。</p></li><li><p>MapperMethod.java</p><p>在代理类MybatisMapperProxy.java 中的一个核心方法，invoke 方法最后调用的是，MapperMethod。excute()方法；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 属性</span></span><br><span class="line"><span class="comment">// 内部类，在获取MapperMethod之前，会先 new SqlCommand 初始好，sql类型 例如：是insert还是selec</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> SqlCommand command;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 封装了方法的参数信息 返回类型信息,</span></span><br><span class="line"><span class="comment">// 在获取MapperMethod之前，会先 new MethodSignature,对mapper接口的方法信息进行封装 </span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> MethodSignature method;</span><br></pre></td></tr></table></figure></li></ol><h3 id="知其所以然"><a href="#知其所以然" class="headerlink" title="知其所以然"></a>知其所以然</h3><p><strong>CityMapper.XML</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;generator.test.demo.core.mapper.CityMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;BaseResultMap&quot;</span>&gt;</span></span><br><span class="line">        select <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;Base_Column_List&quot;</span>/&gt;</span> from tb_city</span><br><span class="line">        where id =#&#123;id&#125;</span><br><span class="line">   <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">&lt;!-- 通用查询映射结果 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;BaseResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;generator.test.demo.core.entity.City&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;city_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;cityName&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;city_code&quot;</span> <span class="attr">property</span>=<span class="string">&quot;cityCode&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 通用查询结果列   --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;Base_Column_List&quot;</span>&gt;</span></span><br><span class="line">        id,</span><br><span class="line">        city_name,</span><br><span class="line">        city_code</span><br><span class="line">    <span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>CityMapper.java</strong></p><p><img src="http://thisforyou.cn:180/file/articleContentImg/2020-03-08/1583662628622.png" alt="9.png"></p><h3 id="XML-解析将-sql-节点封装成-MappedStatment"><a href="#XML-解析将-sql-节点封装成-MappedStatment" class="headerlink" title="XML 解析将 sql 节点封装成 MappedStatment"></a>XML 解析将 sql 节点封装成 MappedStatment</h3><p>XML 解析将 sql 节点封装成 MappedStatment 中，并将其 存到 Configuration 对象的的 mappedStatements s Map属性中；并且以key为 <strong>命名空间+方法Id</strong>  也就是 mapper接口的 所在<strong>全限定名+方法名</strong>；</p><p>下图是 XML 的解析流程：此处我们只看，MappedStatment 命名空间的生成</p><p><img src="http://thisforyou.cn:180/file/articleContentImg/2020-03-08/1583662648625.png" alt="未命名文件.png"></p><p><img src="http://thisforyou.cn:180/file/articleContentImg/2020-03-08/1583662657366.png" alt="8.png"></p><p>看看这个 MappedStatement 的 getId() 是什么值：</p><p>debbug  看到的是 上面的 CityMapper.xml 文件的 namespace+findById (select 节点的Id组成）;</p><p>也就是等于 上面的 <strong>CityMapper.java</strong> 图片的 1+2+3+4 组成；</p><p><img src="http://thisforyou.cn:180/file/articleContentImg/2020-03-08/1583662680555.png" alt="7.png"></p><h3 id="增删改调用过程"><a href="#增删改调用过程" class="headerlink" title="增删改调用过程"></a><strong>增删改调用过程</strong></h3><p>  前面已经分析了，MappedStatement 对像的生成了，就是在初始化的过程解析 xml文件，将每个 xml的的增删改节点，封装成 MappedStatement 存到 Configuration 中的map 对象中。</p><p>并且以：<strong>key:命名空间+ sql标签Id组成。</strong></p><p><strong>因为是这样，所以那样,这样是那样？</strong></p><p><strong>在mybatis中，在每个xml 中，每个sql的id是唯一的，mapper接口的方法也是唯一的。同一个命名空间下不用改出现两个 sql id 相同的方法。</strong></p><p>既然存的是一个 Map对象，那拿的时候，肯定也是通过 key 来拿就是 MappedStatement Id的值；</p><p>前面讲到了代理对像 MybatisMapperProxy.java，所有mybatis 的mapper接口经过他的 invoke方法；所以断点进入这里看；</p><p><strong>findById 进来了</strong>：</p><p><img src="http://thisforyou.cn:180/file/articleContentImg/2020-03-08/1583662696633.png" alt="11.png"></p><p><strong>cachedMapperMethod(mentod)</strong>这个方法是优化了，先重缓存方法拿 MybatisMapperMethod 对象，如果拿不到就 new 一个 添加到缓存中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> MybatisMapperMethod <span class="title">cachedMapperMethod</span><span class="params">(Method method)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> methodCache.computeIfAbsent(method, k -&gt; <span class="keyword">new</span> MybatisMapperMethod(mapperInterface, method, sqlSession.getConfiguration()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关键步骤在  <code>new MybatisMapperMethod(mapperInterface, method, sqlSession.getConfiguration()));</code>中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MybatisMapperMethod</span><span class="params">(Class&lt;?&gt; mapperInterface, Method method, Configuration config)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// SqlCommand 前面有介绍</span></span><br><span class="line">        <span class="keyword">this</span>.command = <span class="keyword">new</span> MapperMethod.SqlCommand(config, mapperInterface, method);</span><br><span class="line">        <span class="keyword">this</span>.method = <span class="keyword">new</span> MapperMethod.MethodSignature(config, mapperInterface, method);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>new MapperMethod.SqlCommand</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">SqlCommand</span><span class="params">(Configuration configuration, Class&lt;?&gt; mapperInterface, Method method)</span> </span>&#123;</span><br><span class="line">      <span class="comment">// invoke 方法中拿到了执行的方法对象 从而 拿到 方法名</span></span><br><span class="line">      <span class="comment">// 还有的就是 代理类的 class</span></span><br><span class="line">      <span class="keyword">final</span> String methodName = method.getName();</span><br><span class="line">      <span class="keyword">final</span> Class&lt;?&gt; declaringClass = method.getDeclaringClass();</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 在这里获取  MappedStatement 对象</span></span><br><span class="line">      MappedStatement ms = resolveMappedStatement(mapperInterface, methodName, declaringClass,</span><br><span class="line">          configuration);</span><br><span class="line">       </span><br><span class="line">       <span class="keyword">if</span> (ms == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (method.getAnnotation(Flush.class) != <span class="keyword">null</span>) &#123;</span><br><span class="line">          name = <span class="keyword">null</span>;</span><br><span class="line">          type = SqlCommandType.FLUSH;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">// 抛出异常</span></span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> BindingException(<span class="string">&quot;Invalid bound statement (not found): &quot;</span></span><br><span class="line">              + mapperInterface.getName() + <span class="string">&quot;.&quot;</span> + methodName);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        name = ms.getId();</span><br><span class="line">        type = ms.getSqlCommandType();</span><br><span class="line">        <span class="keyword">if</span> (type == SqlCommandType.UNKNOWN) &#123;</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> BindingException(<span class="string">&quot;Unknown execution method for: &quot;</span> + name);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>resolveMappedStatement() 关键方法</strong></p><p><img src="http://thisforyou.cn:180/file/articleContentImg/2020-03-08/1583662733189.png" alt="12.png"></p><p><strong>获取mapper接口的全限定名：mapperInterface.getName() 拼接上 方法名；</strong></p><p><strong>这时候就可以就可以从 configuration 中拿到了 MappedStatement对象了；</strong>返回空的时候，SqlCommad 构造函数就抛出了 异常了。</p><p><strong>初始化的时候调用：</strong> </p><p>  configuration.addMappedStatement(statement);</p><p><strong>在增删改查的时候调用：</strong></p><p>  <strong>configuration.getMappedStatement(statementId);</strong>    </p><p>这过程就是  <strong>Invalid bound statement (not found)</strong>  异常的 所以然来了。 </p><h1 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h1><p>Invalid bound statement (not found）的产生的原因就是，xml的命名空间+sql节点的id 对应不上，Mapper接口的全限定名+当前调用的方法名；</p><p>解决办法就是： 检查 xml 的 namespace 的值是不对应上了 和 sql节点的值，或者 xml 是否被扫描到了；</p><p>Invalid bound statement (not found) 的原理：</p><pre><code>在项目启动的时候，扫描xml文件夹下的 mapper.xml文件，对 xml 的 sql 节点进行解析，将每个节点的相关信息封装到 MapperStaement对象中，然后 put 进去到  Configuration 对象中的 Map&lt;String, MappedStatement&gt; mappedStatements  属性中；ke y:命名空间+sql节点id。</code></pre><p>在调用的时候，代理对像 MybatisMapperProxy 中invoke方法 拿到当前 mapper.java 对像的class.getName()全限定名，和方法名 拼接成 statementId 去configuration.getMappedStatement(id)中获取 MappedStatement 对像。</p><p>在继续跟踪下去，就是到了 分支，通过 SqlCommad 判断 当前是增还是删 还是查还是改了………..</p><p>::: hljs-center</p><h2 id="打完收工"><a href="#打完收工" class="headerlink" title="打完收工"></a>打完收工</h2><p><img src="http://thisforyou.cn:180/file/img/publick-qrcode.jpg" alt=""><br>关注公众号<br>:::</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;MyBatis-–-Invalid-bound-statement-not-found-的所以然来，知其然知其所以然！&quot;&gt;&lt;a href=&quot;#MyBatis-–-Invalid-bound-statement-not-found-的所以然来，知其然知其所以然！&quot; class=&quot;headerlink&quot; title=&quot;MyBatis – Invalid bound statement (not found) 的所以然来，知其然知其所以然！&quot;&gt;&lt;/a&gt;MyBatis – Invalid bound statement (not found) 的所以然来，知其然知其所以然！&lt;/h1&gt;&lt;p&gt;很多人刚刚开始学mybatis的时候，常常在做select、update、delete、insert的时候，会遇到类似这种，&lt;/p&gt;
&lt;p&gt;Invalid bound statement (not found)：…. 的错误。例如：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://thisforyou.cn:180/file/articleContentImg/2020-03-08/1583662605040.png&quot; alt=&quot;1.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;当然，我们都知到这肯定是，命名空间配置错了，或者是，dao 接口的的 方法，和 mapper文件的方法没有对应上。 这改正过来即可解决这个问题；&lt;/p&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://lyj08.gitee.io/categories/java/"/>
    
      <category term="mybatis" scheme="http://lyj08.gitee.io/categories/java/mybatis/"/>
    
    
      <category term="java" scheme="http://lyj08.gitee.io/tags/java/"/>
    
      <category term="mybatis" scheme="http://lyj08.gitee.io/tags/mybatis/"/>
    
  </entry>
  
  <entry>
    <title>CountDownLatch底层实现构成，一步步分析</title>
    <link href="http://lyj08.gitee.io/posts/7ac91ac6/"/>
    <id>http://lyj08.gitee.io/posts/7ac91ac6/</id>
    <published>2020-03-07T13:19:00.000Z</published>
    <updated>2020-12-30T09:26:28.848Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CountDownLach-计数器"><a href="#CountDownLach-计数器" class="headerlink" title="CountDownLach 计数器"></a>CountDownLach 计数器</h1><p> CountDownLach 的使用过程方法调用，底层源码学习。</p><p><strong>CountDownLach：</strong> 适用于，在主线程中，开启多个子线程去统计某些不同数据的结果，然后主线程需要对这些结果进行操作的场景。</p> <a id="more"></a><h2 id="主要方法"><a href="#主要方法" class="headerlink" title="主要方法"></a>主要方法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 初始化 线程阙值，AQS 的state</span><br><span class="line">CountDownLach cdl &#x3D; new CountDownLach(2);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 阻塞线程，进入队列候着，等待唤醒</span><br><span class="line">cdl.await();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 唤醒所有的线程</span><br><span class="line">cdl.countDown();</span><br></pre></td></tr></table></figure><p><strong>测试代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 永健</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2020-02-18 13:05</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdkCountDownLatch</span></span></span><br><span class="line"><span class="class"></span>&#123;   </span><br><span class="line">    <span class="comment">// 初始化 线程阙值，AQS 的 state = 5</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> CountDownLatch cdl = <span class="keyword">new</span> CountDownLatch(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Task</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="comment">// 来一个线程 state-1 </span></span><br><span class="line">            <span class="comment">// 直到为 0，cdl.await(); 后面的代码就会执行。</span></span><br><span class="line">            cdl.countDown();</span><br><span class="line">            ++i;</span><br><span class="line">            System.out.println(i);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        ExecutorService service = Executors.newCachedThreadPool();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 开启5个线程</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">5</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            service.execute(<span class="keyword">new</span> Task());</span><br><span class="line">        &#125;</span><br><span class="line">        service.shutdown();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 线程进如队列等候</span></span><br><span class="line">            cdl.await();</span><br><span class="line">            System.out.println(<span class="string">&quot;子线程处理结果：&quot;</span>+i);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e)</span><br><span class="line">        &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>底层代码验证查看</strong></p><h2 id="new-CountDownLatch-5"><a href="#new-CountDownLatch-5" class="headerlink" title="new CountDownLatch(5)"></a>new CountDownLatch(5)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">CountDownLatch</span><span class="params">(<span class="keyword">int</span> count)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (count &lt; <span class="number">0</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;count &lt; 0&quot;</span>);</span><br><span class="line">    <span class="keyword">this</span>.sync = <span class="keyword">new</span> Sync(count);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 内部类 Sync 继承于AQS  调用AQS的方法 设置值state的值</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Sync</span> <span class="keyword">extends</span> <span class="title">AbstractQueuedSynchronizer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">4982264981922014374L</span>;</span><br><span class="line"></span><br><span class="line">    Sync(<span class="keyword">int</span> count) &#123;</span><br><span class="line">        setState(count);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getState();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取共享锁 操作</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">tryAcquireShared</span><span class="params">(<span class="keyword">int</span> acquires)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (getState() == <span class="number">0</span>) ? <span class="number">1</span> : -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 释放共享锁，调用cutDown() 的时候</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">tryReleaseShared</span><span class="params">(<span class="keyword">int</span> releases)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Decrement count; signal when transition to zero</span></span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">            <span class="keyword">int</span> c = getState();</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">int</span> nextc = c-<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (compareAndSetState(c, nextc))</span><br><span class="line">                <span class="keyword">return</span> nextc == <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>线程数不能 &lt; 0，一个内置同步类，继承于AQS,基于AQS的state进行计数，然后进行cas操作。</p><h2 id="cdl-await"><a href="#cdl-await" class="headerlink" title="cdl.await()"></a>cdl.await()</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">   </span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">await</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">       sync.acquireSharedInterruptibly(<span class="number">1</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">acquireSharedInterruptibly</span><span class="params">(<span class="keyword">int</span> arg)</span></span></span><br><span class="line"><span class="function">           <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (Thread.interrupted())</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> InterruptedException();</span><br><span class="line"></span><br><span class="line"><span class="comment">//tryAcquireShared AQS 的共享锁的方法，然后 CountDownLach 的 Sync 重写了 此方法，进行内部的逻辑操作</span></span><br><span class="line">       <span class="keyword">if</span> (tryAcquireShared(arg) &lt; <span class="number">0</span>)</span><br><span class="line">           doAcquireSharedInterruptibly(arg);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><img src="http://thisforyou.cn:180/file/articleContentImg/2020-02-18/1582006036142.png" alt="1.png"></p><p><strong>tryAcquireShared(1)</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">tryAcquireShared</span><span class="params">(<span class="keyword">int</span> acquires)</span> </span>&#123;</span><br><span class="line">     </span><br><span class="line">     <span class="keyword">return</span> (getState() == <span class="number">0</span>) ? <span class="number">1</span> : -<span class="number">1</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p> 获取 state的值，acquireSharedInterruptibly（）中<br><code>if (tryAcquireShared(arg) &lt; 0)&#123;         doAcquireSharedInterruptibly(arg);&#125;</code> 如果state值不为0的时候，代表await()之后的代码还会继续阻塞，不会继续执行。当前调用的await的线程，就会暂时进入队列中最# 一级标题后调用USAVE.park()挂起。为0时候，说明countDown 的次数已经等于了初始化构造的时候 参数值了。此时就会从队列唤醒调用await的线程。</p><h2 id="cdl-countDown"><a href="#cdl-countDown" class="headerlink" title="cdl.countDown()"></a>cdl.countDown()</h2><p>sync.releaseShared(1)释放锁，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">releaseShared</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (tryReleaseShared(arg)) &#123;</span><br><span class="line">        doReleaseShared();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>tryReleaseShared()</strong> 方法，是本类中的Sysnc 中的方法，看操作源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Sync</span> <span class="keyword">extends</span> <span class="title">AbstractQueuedSynchronizer</span> </span>&#123;</span><br><span class="line">      <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">4982264981922014374L</span>;</span><br><span class="line"></span><br><span class="line">      Sync(<span class="keyword">int</span> count) &#123;</span><br><span class="line">          setState(count);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">          <span class="keyword">return</span> getState();</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">      <span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">tryAcquireShared</span><span class="params">(<span class="keyword">int</span> acquires)</span> </span>&#123;</span><br><span class="line">          <span class="keyword">return</span> (getState() == <span class="number">0</span>) ? <span class="number">1</span> : -<span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">tryReleaseShared</span><span class="params">(<span class="keyword">int</span> releases)</span> </span>&#123;</span><br><span class="line">          <span class="comment">// Decrement count; signal when transition to zero</span></span><br><span class="line"></span><br><span class="line">          <span class="comment">// 一个死循环</span></span><br><span class="line">          <span class="keyword">for</span> (;;) &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取state值，每个线程调一次countDown方法就会，对state-1;</span></span><br><span class="line">              <span class="keyword">int</span> c = getState();</span><br><span class="line">              <span class="keyword">if</span> (c == <span class="number">0</span>)</span><br><span class="line">                  <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">              <span class="keyword">int</span> nextc = c-<span class="number">1</span>;</span><br><span class="line">              <span class="keyword">if</span> (compareAndSetState(c, nextc))</span><br><span class="line">                  <span class="keyword">return</span> nextc == <span class="number">0</span>;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>当每个线程,调用一次countDown AQS的state值就会减1，如果在减1之前，state就为0的时候，就不会进行阻塞了，比如 new CountDownLach(5) ,但是有6条线程的时候，第六条调用countDown的时候，就会 getState==0,但是，这之前，await后面的代码已经执行了，所以 ,下面代码不会进入doReleaseShared（） 去唤醒主线程，第五天线程已经唤醒过了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (tryReleaseShared(arg)) &#123;</span><br><span class="line">     doReleaseShared();</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>，如果这时候，第5条线程来调用countDown的时候，会cas去修改，state值，如果state-1=0时候，此时就会进入 doReleaseShared() 唤醒队列中的祝线程了。此时awite后面的代码就会执行了。</p><h2 id="总结-流程图"><a href="#总结-流程图" class="headerlink" title="总结 流程图"></a>总结 流程图</h2><p><img src="http://thisforyou.cn:180/file/articleContentImg/2020-02-19/1582095878090.png" alt="1.png"></p><h1 id="CountDownLach-计数器-1"><a href="#CountDownLach-计数器-1" class="headerlink" title="CountDownLach 计数器"></a>CountDownLach 计数器</h1><p> CountDownLach 的使用过程方法调用，底层源码学习。</p><p><strong>CountDownLach：</strong> 适用于，在主线程中，开启多个子线程去统计某些不同数据的结果，然后主线程需要对这些结果进行操作的场景。</p><h2 id="源码查看"><a href="#源码查看" class="headerlink" title="源码查看"></a>源码查看</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 初始化 线程阙值，AQS 的state</span><br><span class="line">CountDownLach cdl &#x3D; new CountDownLach(2);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 阻塞线程，进入队列候着，等待唤醒</span><br><span class="line">cdl.await();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 唤醒所有的线程</span><br><span class="line">cdl.countDown();</span><br></pre></td></tr></table></figure><p><strong>测试代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 永健</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2020-02-18 13:05</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdkCountDownLatch</span></span></span><br><span class="line"><span class="class"></span>&#123;   </span><br><span class="line">    <span class="comment">// 初始化 线程阙值，AQS 的 state = 5</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> CountDownLatch cdl = <span class="keyword">new</span> CountDownLatch(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Task</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="comment">// 来一个线程 state-1 </span></span><br><span class="line">            <span class="comment">// 直到为 0，cdl.await(); 后面的代码就会执行。</span></span><br><span class="line">            cdl.countDown();</span><br><span class="line">            ++i;</span><br><span class="line">            System.out.println(i);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        ExecutorService service = Executors.newCachedThreadPool();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 开启5个线程</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">5</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            service.execute(<span class="keyword">new</span> Task());</span><br><span class="line">        &#125;</span><br><span class="line">        service.shutdown();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 线程进如队列等候</span></span><br><span class="line">            cdl.await();</span><br><span class="line">            System.out.println(<span class="string">&quot;子线程处理结果：&quot;</span>+i);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e)</span><br><span class="line">        &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>底层代码验证查看</strong></p><h2 id="new-CountDownLatch-5-1"><a href="#new-CountDownLatch-5-1" class="headerlink" title="new CountDownLatch(5)"></a>new CountDownLatch(5)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">CountDownLatch</span><span class="params">(<span class="keyword">int</span> count)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (count &lt; <span class="number">0</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;count &lt; 0&quot;</span>);</span><br><span class="line">    <span class="keyword">this</span>.sync = <span class="keyword">new</span> Sync(count);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 内部类 Sync 继承于AQS  调用AQS的方法 设置值state的值</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Sync</span> <span class="keyword">extends</span> <span class="title">AbstractQueuedSynchronizer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">4982264981922014374L</span>;</span><br><span class="line"></span><br><span class="line">    Sync(<span class="keyword">int</span> count) &#123;</span><br><span class="line">        setState(count);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getState();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取共享锁 操作</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">tryAcquireShared</span><span class="params">(<span class="keyword">int</span> acquires)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (getState() == <span class="number">0</span>) ? <span class="number">1</span> : -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 释放共享锁，调用cutDown() 的时候</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">tryReleaseShared</span><span class="params">(<span class="keyword">int</span> releases)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Decrement count; signal when transition to zero</span></span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">            <span class="keyword">int</span> c = getState();</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">int</span> nextc = c-<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (compareAndSetState(c, nextc))</span><br><span class="line">                <span class="keyword">return</span> nextc == <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>线程数不能 &lt; 0，一个内置同步类，继承于AQS,基于AQS的state进行计数，然后进行cas操作。</p><h2 id="cdl-await-1"><a href="#cdl-await-1" class="headerlink" title="cdl.await()"></a>cdl.await()</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">   </span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">await</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">       sync.acquireSharedInterruptibly(<span class="number">1</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">acquireSharedInterruptibly</span><span class="params">(<span class="keyword">int</span> arg)</span></span></span><br><span class="line"><span class="function">           <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (Thread.interrupted())</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> InterruptedException();</span><br><span class="line"></span><br><span class="line"><span class="comment">//tryAcquireShared AQS 的共享锁的方法，然后 CountDownLach 的 Sync 重写了 此方法，进行内部的逻辑操作</span></span><br><span class="line">       <span class="keyword">if</span> (tryAcquireShared(arg) &lt; <span class="number">0</span>)</span><br><span class="line">           doAcquireSharedInterruptibly(arg);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><img src="http://thisforyou.cn:180/file/articleContentImg/2020-02-18/1582006036142.png" alt="1.png"></p><p><strong>tryAcquireShared(1)</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">tryAcquireShared</span><span class="params">(<span class="keyword">int</span> acquires)</span> </span>&#123;</span><br><span class="line">     </span><br><span class="line">     <span class="keyword">return</span> (getState() == <span class="number">0</span>) ? <span class="number">1</span> : -<span class="number">1</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p> 获取 state的值，acquireSharedInterruptibly（）中<br><code>if (tryAcquireShared(arg) &lt; 0)&#123;         doAcquireSharedInterruptibly(arg);&#125;</code> 如果state值不为0的时候，代表await()之后的代码还会继续阻塞，不会继续执行。当前调用的await的线程，就会暂时进入队列中最# 一级标题后调用USAVE.park()挂起。为0时候，说明countDown 的次数已经等于了初始化构造的时候 参数值了。此时就会从队列唤醒调用await的线程。</p><h2 id="cdl-countDown-1"><a href="#cdl-countDown-1" class="headerlink" title="cdl.countDown()"></a>cdl.countDown()</h2><p>sync.releaseShared(1)释放锁，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">releaseShared</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (tryReleaseShared(arg)) &#123;</span><br><span class="line">        doReleaseShared();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>tryReleaseShared()</strong> 方法，是本类中的Sysnc 中的方法，看操作源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Sync</span> <span class="keyword">extends</span> <span class="title">AbstractQueuedSynchronizer</span> </span>&#123;</span><br><span class="line">      <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">4982264981922014374L</span>;</span><br><span class="line"></span><br><span class="line">      Sync(<span class="keyword">int</span> count) &#123;</span><br><span class="line">          setState(count);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">          <span class="keyword">return</span> getState();</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">      <span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">tryAcquireShared</span><span class="params">(<span class="keyword">int</span> acquires)</span> </span>&#123;</span><br><span class="line">          <span class="keyword">return</span> (getState() == <span class="number">0</span>) ? <span class="number">1</span> : -<span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">tryReleaseShared</span><span class="params">(<span class="keyword">int</span> releases)</span> </span>&#123;</span><br><span class="line">          <span class="comment">// Decrement count; signal when transition to zero</span></span><br><span class="line"></span><br><span class="line">          <span class="comment">// 一个死循环</span></span><br><span class="line">          <span class="keyword">for</span> (;;) &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取state值，每个线程调一次countDown方法就会，对state-1;</span></span><br><span class="line">              <span class="keyword">int</span> c = getState();</span><br><span class="line">              <span class="keyword">if</span> (c == <span class="number">0</span>)</span><br><span class="line">                  <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">              <span class="keyword">int</span> nextc = c-<span class="number">1</span>;</span><br><span class="line">              <span class="keyword">if</span> (compareAndSetState(c, nextc))</span><br><span class="line">                  <span class="keyword">return</span> nextc == <span class="number">0</span>;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>当每个线程,调用一次countDown AQS的state值就会减1，如果在减1之前，state就为0的时候，就不会进行阻塞了，比如 new CountDownLach(5) ,但是有6条线程的时候，第六条调用countDown的时候，就会 getState==0,但是，这之前，await后面的代码已经执行了，所以 ,下面代码不会进入doReleaseShared（） 去唤醒主线程，第五天线程已经唤醒过了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (tryReleaseShared(arg)) &#123;</span><br><span class="line">     doReleaseShared();</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>，如果这时候，第5条线程来调用countDown的时候，会cas去修改，state值，如果state-1=0时候，此时就会进入 doReleaseShared() 唤醒队列中的祝线程了。此时awite后面的代码就会执行了。</p><p>::: hljs-center</p><p><img src="http://thisforyou.cn:180/file/articleContentImg/2020-03-07/1583587047909.jpg" alt="publickqrcode.jpg"><br>关注公众号<br>:::</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;CountDownLach-计数器&quot;&gt;&lt;a href=&quot;#CountDownLach-计数器&quot; class=&quot;headerlink&quot; title=&quot;CountDownLach 计数器&quot;&gt;&lt;/a&gt;CountDownLach 计数器&lt;/h1&gt;&lt;p&gt; CountDownLach 的使用过程方法调用，底层源码学习。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;CountDownLach：&lt;/strong&gt; 适用于，在主线程中，开启多个子线程去统计某些不同数据的结果，然后主线程需要对这些结果进行操作的场景。&lt;/p&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://lyj08.gitee.io/categories/java/"/>
    
    
      <category term="java" scheme="http://lyj08.gitee.io/tags/java/"/>
    
      <category term="并发编程" scheme="http://lyj08.gitee.io/tags/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>使用Docker 快速安装 NextCloud 个人私有云盘 并且连接 Mysql 数据库，网速超快</title>
    <link href="http://lyj08.gitee.io/posts/f01f8482/"/>
    <id>http://lyj08.gitee.io/posts/f01f8482/</id>
    <published>2020-03-01T09:00:00.000Z</published>
    <updated>2020-12-30T09:27:34.097Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1、当然是先安装docker，此处docker环境安装不讲解"><a href="#1、当然是先安装docker，此处docker环境安装不讲解" class="headerlink" title="1、当然是先安装docker，此处docker环境安装不讲解"></a>1、当然是先安装docker，此处docker环境安装不讲解</h4><p>​    参考：<a href="https://docs.docker.com/install/linux/docker-ce/centos/">centos 官网安装教程</a></p><a id="more"></a><h4 id="2、mysql安装"><a href="#2、mysql安装" class="headerlink" title="2、mysql安装"></a>2、mysql安装</h4><ol><li><p>安装参考：<a href="https://hub.docker.com/_/mysql">dockerHub 教程</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull mysql # 拉取镜像</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images # 查看名称/镜像id</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 3306:3306 --name mysql -e MYSQL_ROOT_PASSWORD=123456 -d 镜像id </span><br></pre></td></tr></table></figure><p>运行mysql 并且设置访问端口：3306，容器名称：mysql ,管理员密码：123456</p></li></ol><ol start="2"><li><p>配置一个账户和权限给 nextcloud 网盘使用/ 也可以不创建用户，使用root,创建个数据裤即可，为了安全起见，还是单独分配权限的好。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it 容器名称/容器id bash</span><br></pre></td></tr></table></figure><ul><li><p>登陆mysql</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -p</span><br></pre></td></tr></table></figure><p>接着输入管理员密码：123456 回车</p></li><li><p>创建一个数据库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE nextcloud; </span><br></pre></td></tr></table></figure></li><li><p>创建一个用户</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE USER &#x27;nextcloud&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;123456&#x27;; </span><br></pre></td></tr></table></figure><p>创建一个用户  名称为：nextcloud；‘%’：代表不限ip登陆，远程登陆; 密码为：123456。</p></li><li><p>授权</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GRANT ALL ON nextcloud.* TO nextcloud@&#x27;%&#x27; IDENTIFIED BY &#x27;123456&#x27;;</span><br></pre></td></tr></table></figure><p>给这个用户 nextcloud 授予 这个数据库  nextcloud.* 所有的权限，远程登陆，密码为 123456；</p></li></ul></li></ol><h4 id="2、NextCloud-官网"><a href="#2、NextCloud-官网" class="headerlink" title="2、NextCloud 官网"></a>2、NextCloud 官网</h4><ul><li><a href="https://github.com/chrootLogin/docker-nextcloud">nextcloud官网</a></li></ul><p>进入官网先看教程：</p><p><img src="http://thisforyou.cn:180/file/articleContentImg/2020-03-01/1583052950912.png" alt="3.png"></p><ol><li><p>第一步下载镜像：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull rootlogin/nextcloud</span><br></pre></td></tr></table></figure></li><li><p>创建一个目录将镜像的数据挂载到宿主机中</p><p>在服务器上，自己找一个目录，比如我的，<code>/usr/local/software/docker/</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /usr/local/software/docker/nextcloud/data</span><br></pre></td></tr></table></figure></li><li><p>编写一个启动脚本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/software/docker/nextcloud/ &amp;&amp; vim start.sh</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后填写如下内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker stop nextcloud &amp;&amp; docker rm nextcloud</span><br><span class="line">docker run -d -p 9989:80 --name nextcloud \</span><br><span class="line"> --privileged=true \</span><br><span class="line"> --restart=always \</span><br><span class="line"> --link mysql:next_cloud_db \ # 这一行前面的 `mysql` 是 mysql 容器的名称，冒号后的 自定义的</span><br><span class="line"> - v /usr/local/software/docker/nextcloud/data:/data \ # 数据挂载到宿主机中</span><br><span class="line"> rootlogin/nextcloud</span><br></pre></td></tr></table></figure><p>将80端口映射为外部访问端口 9989： 端口自定义；</p><p>如果服务器防火墙没有关，开放端口，不然无法访问：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=9989/tcp --permanent &amp;&amp; firewall-cmd --reload &amp;&amp; firewall-cmd --zone=public --list-ports</span><br></pre></td></tr></table></figure><p>开放端口，并且reload 防火墙使其生效，查看已开放端口。</p></li><li><p>启动nextcloud</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/software/docker/nextcloud/ &amp;&amp; sh start.sh</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps # 检测启动是否成功</span><br></pre></td></tr></table></figure><p><img src="http://thisforyou.cn:180/file/articleContentImg/2020-03-01/1583052967293.png" alt="4.png"></p></li></ol><p>浏览器访问一下：http://服务器ip:9989</p><p>进入页面后，需要填写账户新用户账户密码：还有数据库</p><p><img src="http://thisforyou.cn:180/file/articleContentImg/2020-03-01/1583052998530.png" alt="10.png"></p><p>按图片填写即可，填写完成点击 安装完成，等待个1～2时间，成功之后，就会直接进入主页面；</p><p>此处，在用户授权的时候，最好直接填写 All 不要一个个写，容易漏掉权限，以免带来，创建数据库的的时候，报没有权限的错误。</p><p><img src="/Users/yongjian/Downloads/11.png" alt=""></p><p>大功告成。</p><p>看看mysql数据裤有多少东西：</p><p>看 oc_users表中会有一个管理员账户，密码是加过密的；</p><p>配置文件在：<code>/usr/local/software/docker/nextcloud/data</code> 中，需要修改在那里改即可；</p><p><img src="http://thisforyou.cn:180/file/articleContentImg/2020-03-01/1583053005895.png" alt="31.png"></p><p>::: hljs-center</p><p><img src="http://thisforyou.cn:180/file/articleContentImg/2020-03-01/1583054676570.jpg" alt="publickqrcode.jpg"><br>关注公众号每天为你分享 更多内容</p><p>:::</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;1、当然是先安装docker，此处docker环境安装不讲解&quot;&gt;&lt;a href=&quot;#1、当然是先安装docker，此处docker环境安装不讲解&quot; class=&quot;headerlink&quot; title=&quot;1、当然是先安装docker，此处docker环境安装不讲解&quot;&gt;&lt;/a&gt;1、当然是先安装docker，此处docker环境安装不讲解&lt;/h4&gt;&lt;p&gt;​    参考：&lt;a href=&quot;https://docs.docker.com/install/linux/docker-ce/centos/&quot;&gt;centos 官网安装教程&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://lyj08.gitee.io/categories/java/"/>
    
      <category term="docker" scheme="http://lyj08.gitee.io/categories/java/docker/"/>
    
    
      <category term="私有云盘" scheme="http://lyj08.gitee.io/tags/%E7%A7%81%E6%9C%89%E4%BA%91%E7%9B%98/"/>
    
      <category term="nextcloud" scheme="http://lyj08.gitee.io/tags/nextcloud/"/>
    
  </entry>
  
  <entry>
    <title>接口不能被实例化，Mybatis的Mapper/Dao为什么却可以@Autowired注入？</title>
    <link href="http://lyj08.gitee.io/posts/92011cd1/"/>
    <id>http://lyj08.gitee.io/posts/92011cd1/</id>
    <published>2020-02-29T02:26:52.000Z</published>
    <updated>2020-12-30T09:27:12.757Z</updated>
    
    <content type="html"><![CDATA[<p>对于我们 java 来说，接口是不能被实例化的。而且接口的所有方法都是public的。</p><p>可是为什么 Mybaits 的mapper 接口，可以直接 @Autowired 注入 使用？</p><p>接下来看看Mybatis 是如何做的。</p><p>基于SpringBoot 的 @MapperScan 注解入手，分析。</p><a id="more"></a><p><strong>带着问题分析代码：</strong></p><ol><li>Mybatis 的mapper接口，是怎么被扫描的？</li><li>mapper接口是如何被实例化，然后可以使用@Autowired注入？</li></ol><h2 id="MapperScan"><a href="#MapperScan" class="headerlink" title="@MapperScan"></a>@MapperScan</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Import(MapperScannerRegistrar.class)</span></span><br><span class="line"><span class="meta">@Repeatable(MapperScans.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MapperScan &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 在使用MapperScan中，扫描包的路径。</span></span><br><span class="line">  <span class="comment">// 填写的是 mapper 接口所在包名，对该value值下的所有文件进行扫描</span></span><br><span class="line">  String[] value() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">  String[] basePackages() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">  Class&lt;?&gt;[] basePackageClasses() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  Class&lt;? extends BeanNameGenerator&gt; nameGenerator() <span class="keyword">default</span> BeanNameGenerator.class;</span><br><span class="line">  Class&lt;? extends Annotation&gt; annotationClass() <span class="keyword">default</span> Annotation.class;</span><br><span class="line">  Class&lt;?&gt; markerInterface() <span class="keyword">default</span> Class.class;</span><br><span class="line">  <span class="function">String <span class="title">sqlSessionTemplateRef</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>;</span><br><span class="line">  <span class="function">String <span class="title">sqlSessionFactoryRef</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>;</span><br><span class="line">  Class&lt;? extends MapperFactoryBean&gt; factoryBean() <span class="keyword">default</span> MapperFactoryBean.class;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;cn.thisforyou.core.blog.mapper&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">( String[] args )</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println( <span class="string">&quot;Hello World!&quot;</span> );</span><br><span class="line">        SpringApplication.run(App.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在SpringBoot中使用mybatis,那它的入口就在 @MapperScan中。@MapperScan注解，是在SpringBoot的启动类中。</p><p> @MapperScan中有个 @Import 注解。</p><h2 id="Import-注解，可以加载某个类，放到Spring的IOC中管理"><a href="#Import-注解，可以加载某个类，放到Spring的IOC中管理" class="headerlink" title="@Import 注解，可以加载某个类，放到Spring的IOC中管理"></a>@Import 注解，可以加载某个类，放到Spring的IOC中管理</h2><p>在Spring中，要将Bean放到IOC容器中管理的话，有几种方式。</p><ul><li>@Import 此种方法</li><li>@Configuration 与 @Bean 注解结合使用</li><li>@Controller @Service @Repository @Component </li><li>@ComponentScan 扫描。</li><li>重写BeanFactoryPostProcessor 的postProcessBeanFactory()方法，也可以实现Bean的注入</li></ul><h3 id="MapperScannerRegistrar"><a href="#MapperScannerRegistrar" class="headerlink" title="MapperScannerRegistrar"></a>MapperScannerRegistrar</h3><p>通过@Import 注解，将<code>MapperScannerRegistrar</code> 注入到了IOC容器中，而<code>MapperScannerRegistrar</code>实现这两个接口，<code>ImportBeanDefinitionRegistrar, ResourceLoaderAware</code></p><p><code>ImportBeanDefinitionRegistrar</code> 在Spring需要配合@Impor使用，加载它的实现类，只有一个方法，是主要负责Bean 的动态注入的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ImportBeanDefinitionRegistrar</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerBeanDefinitions</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方法可以拿到 Spring的注册对象 <code>BeanDefinitionRegistry</code> 这也是一个接口，提供了好6、7个方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BeanDefinitionRegistry</span> <span class="keyword">extends</span> <span class="title">AliasRegistry</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="comment">// 注册 BeanDefinition</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">registerBeanDefinition</span><span class="params">(String var1, BeanDefinition var2)</span> <span class="keyword">throws</span> BeanDefinitionStoreException</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 移除 BeanDefinition</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">removeBeanDefinition</span><span class="params">(String var1)</span> <span class="keyword">throws</span> NoSuchBeanDefinitionException</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 根据name 获取一个 BeanDefinition</span></span><br><span class="line">        <span class="function">BeanDefinition <span class="title">getBeanDefinition</span><span class="params">(String var1)</span> <span class="keyword">throws</span> NoSuchBeanDefinitionException</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判断 是否存在</span></span><br><span class="line">        <span class="function"><span class="keyword">boolean</span> <span class="title">containsBeanDefinition</span><span class="params">(String var1)</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// BeanDefinition 的适量</span></span><br><span class="line">        String[] getBeanDefinitionNames();</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">getBeanDefinitionCount</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 是否使用中</span></span><br><span class="line">        <span class="function"><span class="keyword">boolean</span> <span class="title">isBeanNameInUse</span><span class="params">(String var1)</span></span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>BeanDefinition:</strong>是Spring对Bean解析为，Spring内部的 <strong>BeanDefinition</strong> 结构，是对类的数据包装，类全限定名，是否是单例的，是否是懒加载的，注入方式是什么…</p><h4 id="registerBeanDefinitions-注册方法"><a href="#registerBeanDefinitions-注册方法" class="headerlink" title="registerBeanDefinitions 注册方法"></a>registerBeanDefinitions 注册方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerBeanDefinitions</span><span class="params">(AnnotationMetadata importingClassMetadata, org.springframework.beans.factory.support.BeanDefinitionRegistry registry)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 拿到注解，目的是拿到注解里的属性值，拿到值后进行扫描，并且对结果进行一个转换 AnnotationAttributes</span></span><br><span class="line">        AnnotationAttributes mapperScanAttrs = AnnotationAttributes</span><br><span class="line">                .fromMap(importingClassMetadata.getAnnotationAttributes(MapperScan.class.getName()));</span><br><span class="line">        <span class="keyword">if</span> (mapperScanAttrs != <span class="keyword">null</span>) &#123;</span><br><span class="line">            registerBeanDefinitions(mapperScanAttrs, registry);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 对 MapperScan 的属性值进行一个解析处理</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> annoAttrs</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> registry</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">registerBeanDefinitions</span><span class="params">(AnnotationAttributes annoAttrs, BeanDefinitionRegistry registry)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * 🌟</span></span><br><span class="line"><span class="comment">         * 这是Mybatis的一个扫描器</span></span><br><span class="line"><span class="comment">         * 也是 继承了 Spring的扫描器 ClassPathBeanDefinitionScanner</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        ClassPathMapperScanner scanner = <span class="keyword">new</span> ClassPathMapperScanner(registry);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// this check is needed in Spring 3.1</span></span><br><span class="line">        Optional.ofNullable(resourceLoader).ifPresent(scanner::setResourceLoader);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ........</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         *  读取包mapper包下的路径 和 要扫描的一组 mapper.class</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        List&lt;String&gt; basePackages = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        basePackages.addAll(</span><br><span class="line">                Arrays.stream(annoAttrs.getStringArray(<span class="string">&quot;value&quot;</span>))</span><br><span class="line">                        .filter(StringUtils::hasText)</span><br><span class="line">                        .collect(Collectors.toList()));</span><br><span class="line"></span><br><span class="line">        basePackages.addAll(</span><br><span class="line">                Arrays.stream(annoAttrs.getStringArray(<span class="string">&quot;basePackages&quot;</span>))</span><br><span class="line">                        .filter(StringUtils::hasText)</span><br><span class="line">                        .collect(Collectors.toList()));</span><br><span class="line"></span><br><span class="line">        basePackages.addAll(</span><br><span class="line">                Arrays.stream(annoAttrs.getClassArray(<span class="string">&quot;basePackageClasses&quot;</span>))</span><br><span class="line">                        .map(ClassUtils::getPackageName)</span><br><span class="line">                        .collect(Collectors.toList()));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 🌟这是自定义扫描规则，与Spring的默认机制不同</span></span><br><span class="line">        scanner.registerFilters();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 🌟调用扫描器 对包路径进行扫描</span></span><br><span class="line">        scanner.doScan(StringUtils.toStringArray(basePackages));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="扫描器-ClassPathMapperScanner"><a href="#扫描器-ClassPathMapperScanner" class="headerlink" title="扫描器 ClassPathMapperScanner"></a>扫描器 ClassPathMapperScanner</h3><p>classPathMapperScanner 是mybatis的一个类，继承了 ClassPathBeanDefinitionScanner，重写了doScan方法；然后也调用了 它的的扫描方法。并且定义了扫描规则，还有一些Bean的过滤，比如在一个包下，不单单有 mapper 接口的类，我们的@MapperScan主要处理的是 mapper 接口，所以将其排除:</p><p>排除掉非接口的类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">isCandidateComponent</span><span class="params">(AnnotatedBeanDefinition beanDefinition)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> beanDefinition.getMetadata().isInterface() &amp;&amp; beanDefinition.getMetadata().isIndependent();</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h4 id="扫描器-ClassPathMapperScanner-的doScan方法"><a href="#扫描器-ClassPathMapperScanner-的doScan方法" class="headerlink" title="扫描器 ClassPathMapperScanner 的doScan方法"></a>扫描器 ClassPathMapperScanner 的doScan方法</h4><p>重写了父类的doScan方法，并且也调用了它的方法，通过父类的扫描结果，就将 该包下的所有 Mapper接口，解析成了 BeanDefinitionHolder，放到了 set集合中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Set&lt;BeanDefinitionHolder&gt; <span class="title">doScan</span><span class="params">(String... basePackages)</span> </span>&#123;</span><br><span class="line">  Set&lt;BeanDefinitionHolder&gt; beanDefinitions = <span class="keyword">super</span>.doScan(basePackages);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (beanDefinitions.isEmpty()) &#123;</span><br><span class="line">    LOGGER.warn(() -&gt; <span class="string">&quot;No MyBatis mapper was found in &#x27;&quot;</span> + Arrays.toString(basePackages) + <span class="string">&quot;&#x27; package. Please check your configuration.&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 对扫描结果进行处理，如果不处理的话，这个接口就当作了</span></span><br><span class="line">    <span class="comment">// 一个普通的Bean注入IOC了，在引入调用，就会出现错误了。</span></span><br><span class="line">    processBeanDefinitions(beanDefinitions);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> beanDefinitions;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>BeanDefinitionHolder：</strong>是<strong>BeanDefinition</strong>的持有者，包含了Be na的 名字，和Bean的别名，也包含了BeanDefinition。</p><h4 id="processBeanDefinitions-处理BeanDefinition的BeanClass"><a href="#processBeanDefinitions-处理BeanDefinition的BeanClass" class="headerlink" title="processBeanDefinitions 处理BeanDefinition的BeanClass"></a>processBeanDefinitions 处理BeanDefinition的BeanClass</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">processBeanDefinitions</span><span class="params">(Set&lt;BeanDefinitionHolder&gt; beanDefinitions)</span> </span>&#123;</span><br><span class="line">    GenericBeanDefinition definition;</span><br><span class="line">    <span class="comment">// 循环遍历，一个个修改</span></span><br><span class="line">    <span class="keyword">for</span> (BeanDefinitionHolder holder : beanDefinitions) &#123;</span><br><span class="line">      definition = (GenericBeanDefinition) holder.getBeanDefinition();</span><br><span class="line">      String beanClassName = definition.getBeanClassName();</span><br><span class="line">      </span><br><span class="line">      definition.getConstructorArgumentValues().addGenericArgumentValue(beanClassName); </span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 关键步骤： 这将 GenericBeanDefinition 的BeanClass 修改成了mapperFactoryBeanClass；</span></span><br><span class="line">      <span class="comment">// 扫描结果 这个beanClass 就是 mapper.class</span></span><br><span class="line">      definition.setBeanClass(<span class="keyword">this</span>.mapperFactoryBeanClass);</span><br><span class="line"></span><br><span class="line">      definition.getPropertyValues().add(<span class="string">&quot;addToConfig&quot;</span>, <span class="keyword">this</span>.addToConfig);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// .........</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>我们知道Spring 中有两种Bean,一种是 普通的Bean,另一种就是 <code>FactoryBean</code>，如果是<code>FactoryBean</code>在实例化的时候，就会调用它的 getObject方法获取对象。</p><p><code>FactoryBean</code> 是一个接口：mybatis的 <code>MapperFactoryBean</code> 实现了它；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">FactoryBean</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取对像</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="function">T <span class="title">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 类型</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line">Class&lt;?&gt; getObjectType();</span><br><span class="line">  <span class="comment">// 默认是单例Bean</span></span><br><span class="line"><span class="function"><span class="keyword">default</span> <span class="keyword">boolean</span> <span class="title">isSingleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>MapperFactoryBean：</strong></p><p>MapperFactoryBean 有两个属性，其中一个</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Class&lt;T&gt; mapperInterface;</span><br></pre></td></tr></table></figure><p>这个就是mapper接口的class,看它重写的getObject()方法；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> getSqlSession().getMapper(<span class="keyword">this</span>.mapperInterface);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>是由它的<code>SqlSession</code>的具体类去调用 全局的配置文件 Configuration 对象中的一个MapperRegister对象的一个getMapper方法，然后根据class从 MapperRegister 中的属性Map -&gt; knownMappers 拿到 MapperProxyFactory代理工厂，通过newInstance方法代理生成对像；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MapperProxyFactory</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Class&lt;T&gt; mapperInterface;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;Method, MapperMethod&gt; methodCache = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ........</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// --------</span></span><br><span class="line">  <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> T <span class="title">newInstance</span><span class="params">(MapperProxy&lt;T&gt; mapperProxy)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (T) Proxy.newProxyInstance(mapperInterface.getClassLoader(), <span class="keyword">new</span> Class[] &#123; mapperInterface &#125;, mapperProxy);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> T <span class="title">newInstance</span><span class="params">(SqlSession sqlSession)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> MapperProxy&lt;T&gt; mapperProxy = <span class="keyword">new</span> MapperProxy&lt;&gt;(sqlSession, mapperInterface, methodCache);</span><br><span class="line">    <span class="keyword">return</span> newInstance(mapperProxy);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这就完成了一个对 mapper接口的处理。</p><p>在myBatis的启动过程中，会将扫描的mapper信息进行封装，所有的信息都会在 Configuration 中；</p><p>比如：一个 mapper 接口 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.thisforyou.blog.core.mapper;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PayMapper</span></span>&#123;</span><br><span class="line">  pay(String outNo)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 对接口进行解析，拿到  Class: PayMapper.class</p><p>然后 调用 MapperRegistry的 addMapper方法 包装成一个代理对像 MapperProxyFactory</p><p>放到map中，就是 key-&gt; PayMapper.class,vaue:new MapperProxyFactory(class)；</p><p>在注入的时候，就会getObect()方法，最后就调用了MapperProxyFactory.newInstance生成代理对像。</p><p>MapperRegistry 在 Configuration对象中；</p><p><strong>最后：mapper的@Autowired 注入的其实就是 <code>MapperFactoryBean</code> 通过它的getObject方法，代理生成接口对象。</strong></p><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><ol><li><p>Mybatis 的mapper接口，是怎么被扫描的？</p><p>Mybatis 通过注解@MapperScan 下的@Import注解加载，<code>MapperScannerRegistrar</code>类，此类继承了<code>ImportBeanDefinitionRegistrar</code>类,对bean的注册处理，在注册之前 会拿到 @MapperScan 的 参数值，mapper 包路径，然后调用<code>new ClassPathMapperScanner(registry)</code> 类去扫描，<code>ClassPathMapperScanner extends ClassPathBeanDefinitionScanner</code>,重写doScan方法，定义扫描规则，对扫描结果进行更改 BeanDefinition  的beanClass 进行替换成 <code>MapperFactoryBeanClass</code>;</p></li><li><p>mapper接口是如何被实例化，然后可以使用@Autowired注入？</p><p>mapper接口没有被实例化，是通过 FactoryBean 的方式注入到 IOC 中，通过调用getObject方法生成代理对像 @Autowired的；</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对于我们 java 来说，接口是不能被实例化的。而且接口的所有方法都是public的。&lt;/p&gt;
&lt;p&gt;可是为什么 Mybaits 的mapper 接口，可以直接 @Autowired 注入 使用？&lt;/p&gt;
&lt;p&gt;接下来看看Mybatis 是如何做的。&lt;/p&gt;
&lt;p&gt;基于SpringBoot 的 @MapperScan 注解入手，分析。&lt;/p&gt;
    
    </summary>
    
    
      <category term="mybatis" scheme="http://lyj08.gitee.io/categories/mybatis/"/>
    
    
      <category term="mybatis" scheme="http://lyj08.gitee.io/tags/mybatis/"/>
    
  </entry>
  
  <entry>
    <title>手把手教你，gitlab-ci&amp;gitlab-runner,完成自动化部署，不会不要钱，会也不要钱。</title>
    <link href="http://lyj08.gitee.io/posts/86deff97/"/>
    <id>http://lyj08.gitee.io/posts/86deff97/</id>
    <published>2020-02-28T20:17:00.000Z</published>
    <updated>2020-12-30T09:26:39.907Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Gitlab-ci 可以简化的项目部署操作，讲究自动化部署。只需要动动手指，在你的终端敲下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &#x27;update&#x27; </span><br></pre></td></tr></table></figure><p>即可更新仓库代码并且直接发布到线上去。</p><h1 id="1、本机环境"><a href="#1、本机环境" class="headerlink" title="1、本机环境"></a>1、本机环境</h1><ol><li><p>Centos 7</p></li><li><p>Docker version 19.03.5</p></li><li><p>Gitlab-ce  –version lastest 最新</p></li><li><p>Nginx 版本不重要</p></li><li><p>Gitlab-runner version 12.8</p><p><img src="http://thisforyou.cn:180/file/articleContentImg/2020-02-28/gitci1.png" alt="gitci1"></p></li></ol><p>除此之外：还需要在部署的服务上，处理好 免密码登陆。自动化部署，自然不需要手动操。做好免密登陆，就可以将打包的dist文件夹 scp 到服务器上的nginx 指定路径，就可以直接访问了。</p><a id="more"></a><h1 id="2、安装说明"><a href="#2、安装说明" class="headerlink" title="2、安装说明"></a>2、安装说明</h1><h3 id="2-1-nginx-配置"><a href="#2-1-nginx-配置" class="headerlink" title="2.1 nginx 配置"></a>2.1 nginx 配置</h3><p>nginx 安装过程也略过。vim nginx.conf,进行修改。</p><p><img src="http://thisforyou.cn:180/file/articleContentImg/2020-02-28/gitlab12.png" alt="gitlab12"></p><p>Nginx 配置路径,转发；然后 部署脚本 要将 打包好的dist 文件夹，复制到部署的服务器上<code>/opt/project/web/</code>此文件夹下。</p><p><code>nginx -s reload</code></p><h3 id="2-2-部署的服务器要做ssh-免密码登陆"><a href="#2-2-部署的服务器要做ssh-免密码登陆" class="headerlink" title="2.2 部署的服务器要做ssh 免密码登陆"></a>2.2 部署的服务器要做ssh 免密码登陆</h3><ol><li><p>登陆 要将项目发布的服务器上。</p></li><li><p>跟目录下处理</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s sh-keygen -t rsa</span><br><span class="line"><span class="meta">#</span><span class="bash"> 输入后一直回车 默认操作即可，不加密，不改变生成文件的位置</span></span><br></pre></td></tr></table></figure><p><img src="http://thisforyou.cn:180/file/articleContentImg/2020-02-28/ssh2.png" alt=""></p></li><li><p>拷贝公钥到认证文件-命令：cat ~/.ssh/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys</p><p><img src="http://thisforyou.cn:180/file/articleContentImg/2020-02-28/ssh3.png" alt="ssh3"></p></li><li><p>Ssh localhost 看看有没有成功</p></li><li><p>ssh-copy-id root@部署的服务器ip</p><p>此处我是部署环境，和 gitlab-runner 环境在同一个服务器上。一般情况下是两台，在开发环境下有即可配置可以。</p></li></ol><p>   scp 的时候 我写的是 122端口，这是我的端口，如果没有改过，默认是22 </p>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-copy-id root@thisforyou.cn </span><br></pre></td></tr></table></figure><h2 id="2-3-在自己的gitlab仓库上创建一个仓库，例如本机测试的。"><a href="#2-3-在自己的gitlab仓库上创建一个仓库，例如本机测试的。" class="headerlink" title="2.3 在自己的gitlab仓库上创建一个仓库，例如本机测试的。"></a>2.3 在自己的gitlab仓库上创建一个仓库，例如本机测试的。</h2><p> <strong>仓库：</strong></p><p><img src="http://thisforyou.cn:180/file/articleContentImg/2020-02-28//gitlab2.png" alt="gitlab2"></p><p><strong>线下环境：</strong></p><p><img src="/Users/yongjian/Downloads/gitlab3.png" alt="gitlab3"></p><h2 id="2-3-环境安装"><a href="#2-3-环境安装" class="headerlink" title="2.3 环境安装"></a>2.3 环境安装</h2><p><strong>本文重点在于</strong> <strong>gitlab-runnner的集成自动化部署</strong>，所以docker的安装，gitlab的安装，nginx  的安装过程跳过。</p><p>当你看到此文的时候，这些环境相信你也应该有了。主要是 gitlab-runner的配置问题。</p><h3 id="2-21-基于Docker安装-gitlab-runner"><a href="#2-21-基于Docker安装-gitlab-runner" class="headerlink" title="2.21 基于Docker安装  gitlab-runner"></a>2.21 基于Docker安装  gitlab-runner</h3><p><strong>1、安装</strong></p><p>目前我安装的时候是最新版本：</p><p>版本选择，<a href="https://hub.docker.com/r/gitlab/gitlab-runner">移步—&gt;</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull gitlab&#x2F;gitlab-runner</span><br></pre></td></tr></table></figure><p>启动命令： 我这是一个脚本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">path=/usr/local/software/docker/gitlab-runner</span><br><span class="line">docker stop gitlab-runner &amp;&amp; docker rm gitlab-runner</span><br><span class="line">docker run -d --name gitlab-runner \</span><br><span class="line"> --restart always \</span><br><span class="line"> -v /usr/local/software/docker/gitlab-runner/config/gitlab-runner:/etc/gitlab-runner \</span><br><span class="line"> 430012f3776d</span><br></pre></td></tr></table></figure><ul><li>-v:将配置文件挂载到宿主机上 </li><li>430012f3776d: 镜像ID</li></ul><p>启动成功后，如果 <code>/usr/local/software/docker/gitlab-runner/config/gitlab-runner</code> 下没有 配置文件 <code>config.toml</code> 文件的话。</p><p>先停掉  <code>docker stop gitlab-runner &amp;&amp; docker rm gitlab-runner</code> </p><p>直接执行： <code>docker run -d gitlab-runner  430012f3776d</code></p><p>然后将容器中的数据复制出来：<code>docker cp gitlab-runner /etc/gitlab-runner :/usr/local/software/docker/gitlab-runner/config</code></p><p>再次 执行启动脚本。</p><p>或者等会，到注册的那一步也会生成的。</p><p><strong>2、先到仓库拿到Token</strong></p><p><img src="http://thisforyou.cn:180/file/articleContentImg/2020-02-28//gitlab4.png" alt="gitlab4"></p><p><strong>3、注册</strong></p><p>进入容器：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it gitlab-runner bash</span><br></pre></td></tr></table></figure><p>输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gitlab-runner register</span><br></pre></td></tr></table></figure><p><img src="http://thisforyou.cn:180/file/articleContentImg/2020-02-28//gitlab5.png" alt="gitlab5"></p><ul><li><p>Please enter the gitlab-ci coordinator URL (e.g. <a href="https://gitlab.com/">https://gitlab.com/</a>): 输入你的gi tlab访问地址，上一步有说到</p></li><li><p>Please enter the gitlab-ci token for this runner: 访问token,如何获取上一步有说到</p></li><li><p>Please enter the gitlab-ci description for this runner: 输入描述，自定义</p></li><li><p>Please enter the gitlab-ci tags for this runner (comma separated): tags,在后面写脚本的时候需要用到，请先写上，我此处分两个，是在写脚本的时候，也分来个 job 来执行，所以也对应两个。非必要的，gitlab仓库上可以设置，是不是要填写，tags标签上运行。是可以限制</p></li><li><p>Please enter the executor: docker+machine, custom, docker, virtualbox, ssh, docker-ssh+machine, kubernetes, docker-ssh, parallels, shell:</p><p>这里比较重要，做java开发的，主要还是使用 ssh、shell、Docker多，至于其它那些个暂不提。</p><p>此处构建的是，vue项目，vue项目所需的是 node 环境。因为这个 gitlab-runner是基于Docker安装的，是一个独立的容器，你的服务器上的 node , git 都是无法使用的，如果此时，选择的是 shell 或者 ssh,的话，后边写执行脚本的时候 <code>npm run build</code> 就会报 npm not found,因为我的gitlab-runner是Docker装的，所以没有集成，其它环境。所以此时我们选择一个执行环境 为 Docker ,可以很好的管理依赖，也可以自己做一个镜像，将所需依赖放一起。</p><p><a href="http://s0docs0gitlab0com.icopy.site/runner/executors/README.html">中文官网说明</a></p></li><li><p>Please enter the default Docker image (e.g. ruby:2.6):  选择了Docker 执行，那就需要写上 需要的docker 镜像，此处需要node环境，就直接填写：node 即可，也可以加上版本好。此处也可以通过，自己写一个Dockerfile，制作一个容器。将环境依赖都写上Dockerfile里。 </p></li></ul><p><strong>4、此时是已经注册成功了，回到gitlab仓库看看</strong></p><p><img src="http://thisforyou.cn:180/file/articleContentImg/2020-02-28//gitlab6.png" alt="gitlab6"></p><p>已经成功了。这里点击进去可以修改一些属性操作</p><p><strong>5、编写脚本</strong></p><p>编写脚本要在项目的根目录下编写；</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 如果是第一次看这个文件，看不明白先不要紧，先看明白它的关系先</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> yml格式编写</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># stages：通俗讲：就是将项目，从打包部署，分几个步骤，比如我这里就分两个步骤，一个 build,打包编译， deploy：部署</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 如果有更多步骤就写上，比如 先 clean build test deploy ；如Java的项目： 先 mvn clean , mvn test ,mvn package</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> image: node <span class="comment"># 就是所依赖的环境 在 gitrunner-cli注册的时候，已经写了此处可以省略不写</span></span></span><br><span class="line">stages:</span><br><span class="line">    - build    </span><br><span class="line">    - deploy</span><br><span class="line">    </span><br><span class="line">before_script:</span><br><span class="line">  - &#x27;which ssh-agent || ( apt-get update -y &amp;&amp; apt-get install openssh-client -y )&#x27;</span><br><span class="line">  - eval $(ssh-agent -s)</span><br><span class="line">  - ssh-add &lt;(echo &quot;$SSH_KEY&quot;)</span><br><span class="line">  - mkdir -p ~/.ssh</span><br><span class="line">  - &#x27;[[ -f /.dockerenv ]] &amp;&amp; echo -e &quot;Host *\n\tStrictHostKeyChecking no\n\n&quot; &gt; ~/.ssh/config&#x27;</span><br><span class="line"></span><br><span class="line"><span class="meta">   #</span><span class="bash"> 第一步打包，</span> </span><br><span class="line">   build: # build:这个名称自定义</span><br><span class="line">     stage: buil  # 这一个stage：的值就是上面的 stages下的第一个 build</span><br><span class="line">     tags: # tag 在注册的时候，有提到过，分两步骤，第一个是 buil,所以这里也对应上，注册的时候是自定义的名称</span><br><span class="line">      - buil</span><br><span class="line">     script: # 这个就是 操作命令 或者写脚本路径</span><br><span class="line">      - npm install -g cnpm --registry=https://registry.npm.taobao.org # 切换cnpm 提升速度</span><br><span class="line">      - echo `pwd` # 我只是输出下观察写路径</span><br><span class="line">      - cnpm install  # 安装 nodemodus</span><br><span class="line">      - cnpm run build  # 打包生成 dist 文件夹</span><br><span class="line">   </span><br><span class="line"><span class="meta"> #</span><span class="bash"> 缓存，因为是容器执行，每次执行的时候都会重新打包，缓存起来就不需要安装一次</span>  </span><br><span class="line">cache:</span><br><span class="line">  paths:</span><br><span class="line">   - node_modules/</span><br><span class="line">   - dist/</span><br><span class="line">   </span><br><span class="line"><span class="meta">   #</span><span class="bash"> 第二个任务 就是 专业词语 job ,第一个是先 build ,这个跟上面的build一样名称自定义</span></span><br><span class="line">   deploy:</span><br><span class="line">     stage: deploy  # 这一个stage：的值就是上面的 stages下的第一个 deploy</span><br><span class="line">     tags:</span><br><span class="line">       - deploy # tag 在注册的时候，有提到过，分两步骤，第二个个是 deploy,所以这里也对应上，注册的时候是自定义的名称</span><br><span class="line">     script:</span><br><span class="line">      - pwd #  也输出下路径</span><br><span class="line">      - mv dist vue-ci # 修改文件夹名字，对应上nginx 配置的 路径名字，不然nginx 无法正确转发 </span><br><span class="line">      - scp -R 122 -r /dist/ root@thisforyou.cn:/opt/project  # 将打包好的文件上到发布项目的服务器中的。放到nginx能访问到的文件夹下</span><br><span class="line">      #  我写的是 122端口，这是我的端口，如果没有改过，默认是22  ,scp 不需要 写 `—R 122`</span><br></pre></td></tr></table></figure><p>脚本写好了，就将此文件更新到gitlab的仓库上去吧，git push之后，就会执行此脚本文件了，然后进入浏览器查看过程有没有问题。</p><p><strong>⚠️yaml语法检测：http://你的gitlab访问地址/账户/vue-ci/-/ci/lint</strong></p><p>本文正确的语法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">stages:</span><br><span class="line"> - build    </span><br><span class="line"> - deploy</span><br><span class="line"></span><br><span class="line">before_script:</span><br><span class="line">  - &#x27;which ssh-agent || ( apt-get update -y &amp;&amp; apt-get install openssh-client -y )&#x27;</span><br><span class="line">  - eval $(ssh-agent -s)</span><br><span class="line">  - ssh-add &lt;(echo &quot;$SSH_KEY&quot;)</span><br><span class="line">  - mkdir -p ~/.ssh</span><br><span class="line">  - &#x27;[[ -f /.dockerenv ]] &amp;&amp; echo -e &quot;Host *\n\tStrictHostKeyChecking no\n\n&quot; &gt; ~/.ssh/config&#x27;</span><br><span class="line">build:</span><br><span class="line"> stage: build </span><br><span class="line"> tags: </span><br><span class="line">  - buil</span><br><span class="line"> script:</span><br><span class="line">  - npm install -g cnpm --registry=https://registry.npm.taobao.org </span><br><span class="line">  - echo `pwd`</span><br><span class="line">  - cnpm install </span><br><span class="line">  - cnpm run build</span><br><span class="line">cache:</span><br><span class="line">  paths:</span><br><span class="line">   - node_modules/</span><br><span class="line">   - dist/</span><br><span class="line">deploy:</span><br><span class="line"> stage: deploy  </span><br><span class="line"> tags:</span><br><span class="line">   - deploy </span><br><span class="line"> script:</span><br><span class="line">  - pwd</span><br><span class="line">  - ls -l</span><br><span class="line">  - mv dist vue-ci </span><br><span class="line">  - scp -P 122 -r vue-ci root@thisforyou.cn:/opt/project/web</span><br></pre></td></tr></table></figure><ul><li><p>before_script:  就是在执行脚本或者命令前，先执行的操纵。比如需要预先处理，环境问题，此处是要咋dock er内配置好与服务器的免密登陆。</p><ul><li><p>-ssh-add &lt;(echo “$SSH_KEY”)： $SSH_KEY，这是一个变量，需要到gitlab-ci 页面里面设置。</p><p><code>cat /root/.ssh/id_rsa</code> 查看密钥，记下来,填到下面去。</p><p><img src="http://thisforyou.cn:180/file/articleContentImg/2020-02-28//gitlab16.png" alt="gitlab16"></p></li></ul></li></ul><p>查看结果：</p><p><img src="http://thisforyou.cn:180/file/articleContentImg/2020-02-28//gitlab10.png" alt="gitlab10"></p><p><img src="http://thisforyou.cn:180/file/articleContentImg/2020-02-28//gitlab11.png" alt="gitlab11"></p><p><strong>进入第一个job build:</strong></p><p>这图片已经不是第一次build了，前面有好几次测试，因为脚本的错 tags:buil 写错了 buid, 注册的时候，想写的是 build 却写成了 buil 。 在途中，是第已经有了nodemoduls的缓存了。</p><p>第一次build:</p><p><img src="http://thisforyou.cn:180/file/articleContentImg/2020-02-28/02-28-24.jpg" alt=""></p><p>第二次build,纠正脚本后。</p><p><img src="http://thisforyou.cn:180/file/articleContentImg/2020-02-28/02.40.36.jpg" alt="长截图   2020-02-28 上午02.40.36"></p><p>build成功了。</p><p>第一个job,成功，现在看看第二个，deploy job</p><p><img src="http://thisforyou.cn:180/file/articleContentImg/2020-02-28/103921.jpg" alt=""></p><p><strong>看看服务器上看看</strong></p><p>看已经有了：</p><p><img src="http://thisforyou.cn:180/file/articleContentImg/2020-02-28/gitlab14.png" alt="gitlab14"></p><p>先浏览器看看成功了没有： </p><p><img src="http://thisforyou.cn:180/file/articleContentImg/2020-02-28//gitlab15.png" alt="gitlab15"></p><p><img src="https://www.memoryoverflow.cn/file/articleContentImg/2019-10-16/1571216899999.gif" alt=""></p><p>返回上一页看，步骤结果：</p><p><img src="http://thisforyou.cn:180/file/articleContentImg/2020-02-28/gitlab13.png" alt="gitlab13"></p><p>现在已经部署成功；</p><p>先跑流程跑通再来看；配置文件参数详解：</p><table><thead><tr><th>值</th><th align="left">是否必须</th><th>描述</th></tr></thead><tbody><tr><td>script</td><td align="left">必须</td><td>定义由Runner执行的shell脚本或命令</td></tr><tr><td>extends</td><td align="left">非必须</td><td>定义此作业将继承的配置条目</td></tr><tr><td>image</td><td align="left">非必须</td><td>需要使用的docker镜像，请查阅该文档</td></tr><tr><td>services</td><td align="left">非必须</td><td>定义所需的docker服务，请查阅该文档</td></tr><tr><td>stage</td><td align="left">非必须</td><td>定义一个工作场景阶段，默认是test</td></tr><tr><td>type</td><td align="left">非必须</td><td>stage的别名,不赞成使用</td></tr><tr><td>variables</td><td align="left">非必须</td><td>在job级别上定义的变量</td></tr><tr><td>only</td><td align="left">非必须</td><td><strong>就是上面所说的，任务 jobs下的配置，only: - master 这个配置的是在仓库的哪个分支上执行的。</strong></td></tr><tr><td>except</td><td align="left">非必须</td><td>定义job所不适用的git分支</td></tr><tr><td>tags</td><td align="left">非必须</td><td>定义job所适用的runner，tags为runner标签</td></tr><tr><td>allow_failure</td><td align="left">非必须</td><td>允许任务失败，但是如果失败，将不会改变提交状态</td></tr><tr><td>when</td><td align="left">非必须</td><td>定义了job什么时候执行，可以是on_success、on_failure、always和manual</td></tr><tr><td>dependencies</td><td align="left">非必须</td><td>定义了该job依赖哪一个job，如果设置该项，可以通过artifacts设置</td></tr><tr><td>artifacts</td><td align="left">非必须</td><td>工件，在依赖项之间传递的东西，类似cache，但原理与cache不同</td></tr><tr><td>cache</td><td align="left">非必须</td><td>定义需要被缓存的文件、文件夹列表</td></tr><tr><td>before_script</td><td align="left">非必须</td><td>覆盖在作业之前执行的脚本或命令</td></tr><tr><td>after_script</td><td align="left">非必须</td><td>覆盖在作业之后执行的脚本或命令</td></tr><tr><td>environment</td><td align="left">非必须</td><td>定义让job完成部署的环境名称</td></tr><tr><td>coverage</td><td align="left">非必须</td><td>定义job设置代码覆盖率</td></tr><tr><td>retry</td><td align="left">非必须</td><td>定义job失败后的自动重试次数</td></tr></tbody></table><p>不同的项目需要不同的配置</p><p><strong>Gitlab-ci</strong> 更多的功能，等你来深究～</p><p><a href="http://s0docs0gitlab0com.icopy.site/runner/executors/README.html">中文官网说明</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;Gitlab-ci 可以简化的项目部署操作，讲究自动化部署。只需要动动手指，在你的终端敲下&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git commit -m &amp;#x27;update&amp;#x27; &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;即可更新仓库代码并且直接发布到线上去。&lt;/p&gt;
&lt;h1 id=&quot;1、本机环境&quot;&gt;&lt;a href=&quot;#1、本机环境&quot; class=&quot;headerlink&quot; title=&quot;1、本机环境&quot;&gt;&lt;/a&gt;1、本机环境&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Centos 7&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Docker version 19.03.5&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Gitlab-ce  –version lastest 最新&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Nginx 版本不重要&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Gitlab-runner version 12.8&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://thisforyou.cn:180/file/articleContentImg/2020-02-28/gitci1.png&quot; alt=&quot;gitci1&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;除此之外：还需要在部署的服务上，处理好 免密码登陆。自动化部署，自然不需要手动操。做好免密登陆，就可以将打包的dist文件夹 scp 到服务器上的nginx 指定路径，就可以直接访问了。&lt;/p&gt;
    
    </summary>
    
    
      <category term="vue" scheme="http://lyj08.gitee.io/categories/vue/"/>
    
      <category term="持续自动化部署" scheme="http://lyj08.gitee.io/categories/vue/%E6%8C%81%E7%BB%AD%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/"/>
    
    
      <category term="gitlab-ci" scheme="http://lyj08.gitee.io/tags/gitlab-ci/"/>
    
      <category term="gitlab-runner" scheme="http://lyj08.gitee.io/tags/gitlab-runner/"/>
    
  </entry>
  
  <entry>
    <title>ConcurrentHashMap源码过程执行过程分析</title>
    <link href="http://lyj08.gitee.io/posts/62ed19e0/"/>
    <id>http://lyj08.gitee.io/posts/62ed19e0/</id>
    <published>2020-02-23T14:06:20.000Z</published>
    <updated>2020-12-30T09:26:25.335Z</updated>
    
    <content type="html"><![CDATA[<p>::: hljs-center</p><h1 id="ConcurrentHashMap-1-7-源码分析学习"><a href="#ConcurrentHashMap-1-7-源码分析学习" class="headerlink" title="ConcurrentHashMap 1.7 源码分析学习"></a>ConcurrentHashMap 1.7 源码分析学习</h1><p>:::</p><a id="more"></a><blockquote><h1 id="1、常量说明"><a href="#1、常量说明" class="headerlink" title="1、常量说明"></a>1、常量说明</h1></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// concurrentHashMap 默认长度</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_INITIAL_CAPACITY = <span class="number">16</span>;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 默认扩容因子</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> DEFAULT_LOAD_FACTOR = <span class="number">0.75f</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认 Segment[].length 长度</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_CONCURRENCY_LEVEL = <span class="number">16</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// concurrentHashMap 最大容量值</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAXIMUM_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 每一个 Segment 对象中的 hashTable 数组最小长度</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MIN_SEGMENT_TABLE_CAPACITY = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Segment[] 最大值</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_SEGMENTS = <span class="number">1</span> &lt;&lt; <span class="number">16</span>; <span class="comment">// slightly conservative</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 非锁定情况下调用size和contains方法的重试次数,避免由于table连续被修改导致无限重试</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> RETRIES_BEFORE_LOCK = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//计算segment位置的一个值</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">int</span> segmentMask;</span><br><span class="line"></span><br><span class="line"><span class="comment">//计算segment位置时,用于hash参与运算的位数</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">int</span> segmentShift;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Segment[]数组</span></span><br><span class="line"><span class="keyword">final</span> Segment&lt;K,V&gt;[] segments;</span><br></pre></td></tr></table></figure><blockquote><h1 id="2、数据结构图"><a href="#2、数据结构图" class="headerlink" title="2、数据结构图"></a>2、数据结构图</h1><p><img src="http://thisforyou.cn:180/file/articleContentImg/2020-02-22/1582363106092.png" alt="1.png"></p></blockquote><p>ConcurrentHashMap 底层数据结构是采用分段式存储数据，每一个Segment就是一段，都是一个非公平锁锁，继承于 ReentrantLock,是线程安全的。每一个Segment 下中，都有一个数组，当put值的时候，算出了key所在segment[]中的位置后，put 就会锁住，当前的这个segment对象，其它的segment 是不上锁的。这区别于 hashTale, hashTable 是锁整个对象，每个方法上 synchronized 锁住，所以在效率上会 大大由于 hashTable。</p><blockquote><h1 id="3、Segment-对象"><a href="#3、Segment-对象" class="headerlink" title="3、Segment 对象"></a>3、Segment 对象</h1><p>Segment 对象继承了ReentrantLock，对每一个Segment 对象进行分段锁，当线程执行put的时候，只锁住对应的 那个Segment 对象，对其他的Segment 的get put 互不干扰，这样子就提升了效率；做到了线程安全。</p></blockquote><p>对于 HashTable 是锁住的整个HashTable,每个方法都上了锁，线程量大的时候，会消耗cpu,效率也低下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Segment</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">ReentrantLock</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// HashEntrys数组，数组又装链表</span></span><br><span class="line">    <span class="keyword">transient</span> <span class="keyword">volatile</span> HashEntry&lt;K,V&gt;[] table;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 数组长度</span></span><br><span class="line">    <span class="keyword">transient</span> <span class="keyword">int</span> count;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 操作次数</span></span><br><span class="line">    <span class="keyword">transient</span> <span class="keyword">int</span> modCount;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 扩容的一个判断条件 数组长度*负载因子 默认 0.75</span></span><br><span class="line">    <span class="keyword">transient</span> <span class="keyword">int</span> threshold;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 负载因子 0.75</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">float</span> loadFactor;</span><br><span class="line"></span><br><span class="line">    Segment(<span class="keyword">float</span> lf, <span class="keyword">int</span> threshold, ConcurrentHashMap.HashEntry&lt;K,V&gt;[] tab) &#123;</span><br><span class="line">        <span class="keyword">this</span>.loadFactor = lf;</span><br><span class="line">        <span class="keyword">this</span>.threshold = threshold;</span><br><span class="line">        <span class="keyword">this</span>.table = tab;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><h1 id="4、构造初始化"><a href="#4、构造初始化" class="headerlink" title="4、构造初始化"></a>4、构造初始化</h1><p><strong>1、构造</strong></p></blockquote><p><strong>参数介绍：</strong></p><ol><li>int initialCapacity   #concurrentHashMap 初始容量</li><li>float loadFactor      # 加载扩容因子</li><li>int concurrencyLevel  # segment[]成度</li></ol><p>默认构造方法，都是使用默认参数值,其它构造 最终都是调用此构造</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ConcurrentHashMap</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">          <span class="keyword">int</span> initialCapacity,</span></span></span><br><span class="line"><span class="function"><span class="params">          <span class="keyword">float</span> loadFactor, <span class="keyword">int</span> concurrencyLevel)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">      <span class="comment">// 参数校验</span></span><br><span class="line">      <span class="keyword">if</span> (!(loadFactor &gt; <span class="number">0</span>) || initialCapacity &lt; <span class="number">0</span> || concurrencyLevel &lt;= <span class="number">0</span>)</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</span><br><span class="line">      <span class="keyword">if</span> (concurrencyLevel &gt; MAX_SEGMENTS)</span><br><span class="line">          concurrencyLevel = MAX_SEGMENTS;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       *  // Find power-of-two sizes best matching arguments</span></span><br><span class="line"><span class="comment">       *</span></span><br><span class="line"><span class="comment">       * 找到两个大小的最佳匹配参数的幂，就是计算出，每个 segment 下 应该放几个 hashEntry对象，就是它的hashEntry[]长度</span></span><br><span class="line"><span class="comment">       *</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">int</span> sshift = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      <span class="comment">// 通过计算获取 segment[] 数组长度的最佳值</span></span><br><span class="line">      <span class="keyword">int</span> ssize = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * 举例子：</span></span><br><span class="line"><span class="comment">       *   initialCapacity = 33，concurrencyLevel = 16；</span></span><br><span class="line"><span class="comment">       *   while 循坏，ssize = 0, 第一次 就是 2，第二次 就是 4 ，第三次就是 8，第四次就是 16</span></span><br><span class="line"><span class="comment">       *</span></span><br><span class="line"><span class="comment">       *   此时 (ssize = 16 ) &lt; concurrencyLevel = 16 跳出循环，sshift 加加了四次 sshift = 4 ;</span></span><br><span class="line"><span class="comment">       *</span></span><br><span class="line"><span class="comment">       *   从 ssize &lt;&lt;= 1  来看， segment[] 长度就是，2的幂次方； 为什么是 2的幂次方，为了减少 hash冲突；</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      <span class="keyword">while</span> (ssize &lt; concurrencyLevel)</span><br><span class="line">      &#123;</span><br><span class="line">          ++sshift;</span><br><span class="line">          ssize &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 也计算得出 了 参与 计算 key要存储的下表位置的值；</span></span><br><span class="line">      <span class="keyword">this</span>.segmentShift = <span class="number">32</span> - sshift;</span><br><span class="line">      <span class="keyword">this</span>.segmentMask = ssize - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 计算结果 也不能 大于 segment[] 默认的最大长度，超出则为最大值</span></span><br><span class="line">      <span class="keyword">if</span> (initialCapacity &gt; MAXIMUM_CAPACITY)</span><br><span class="line">          initialCapacity = MAXIMUM_CAPACITY;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       *</span></span><br><span class="line"><span class="comment">       * 计算 每个 HashEntry 的最佳长度</span></span><br><span class="line"><span class="comment">       *</span></span><br><span class="line"><span class="comment">       *  （initialCapacity = 33）/ 计算出来的( ssize=16 )</span></span><br><span class="line"><span class="comment">       *</span></span><br><span class="line"><span class="comment">       *   目的就是 出现分配不均 的情况</span></span><br><span class="line"><span class="comment">       *</span></span><br><span class="line"><span class="comment">       *   假如 segment[]=16;最大容量是 33 个；如果每个 hashEntry[].length=2,那装不完</span></span><br><span class="line"><span class="comment">       *</span></span><br><span class="line"><span class="comment">       *   33/16=2.多；就每个 hashEntry[].length+1; 保证装完</span></span><br><span class="line"><span class="comment">       *</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      <span class="keyword">int</span> c = initialCapacity / ssize;</span><br><span class="line">      <span class="keyword">if</span> (c * ssize &lt; initialCapacity)</span><br><span class="line">          ++c;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 如果计算出的 c 小于 默认 最小 容量，就取 默认值，2的幂次方，最小就是2</span></span><br><span class="line">      <span class="keyword">int</span> cap = MIN_SEGMENT_TABLE_CAPACITY;</span><br><span class="line">      <span class="keyword">while</span> (cap &lt; c)</span><br><span class="line">          cap &lt;&lt;= <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      <span class="comment">// create segments and segments[0]</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * &lt;br&gt;</span></span><br><span class="line"><span class="comment">       *</span></span><br><span class="line"><span class="comment">       * 初始化Segment对象</span></span><br><span class="line"><span class="comment">       *   。loadFactor:Segment[]数组的扩容因子</span></span><br><span class="line"><span class="comment">       *   。(int) (cap * loadFactor):hashEntry[]的扩容因子</span></span><br><span class="line"><span class="comment">       *   。new HashEntry[cap]：初始化Segment对象下的数组</span></span><br><span class="line"><span class="comment">       *</span></span><br><span class="line"><span class="comment">       *</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      Segment&lt;K, V&gt; s0 =</span><br><span class="line">              <span class="keyword">new</span> Segment&lt;K, V&gt;(loadFactor, (<span class="keyword">int</span>) (cap * loadFactor),</span><br><span class="line">                      (HashEntry&lt;K, V&gt;[]) <span class="keyword">new</span> HashEntry[cap]);</span><br><span class="line"></span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       *</span></span><br><span class="line"><span class="comment">       * 初始化 Segment 数组</span></span><br><span class="line"><span class="comment">       *</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      Segment&lt;K, V&gt;[] ss = (Segment&lt;K, V&gt;[]) <span class="keyword">new</span> Segment[ssize];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * &lt;br&gt;</span></span><br><span class="line"><span class="comment">       *</span></span><br><span class="line"><span class="comment">       * putOrderedObject（obj,offset,val）</span></span><br><span class="line"><span class="comment">       *   将obj对象的偏移量为offset的位置修改为value</span></span><br><span class="line"><span class="comment">       *</span></span><br><span class="line"><span class="comment">       *   SBASE = UNSAFE.arrayBaseOffset(sc);</span></span><br><span class="line"><span class="comment">       *      读取数组第一个的偏移量，然后 putOrderedObject 负值</span></span><br><span class="line"><span class="comment">       *</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      UNSAFE.putOrderedObject(ss, SBASE, s0); <span class="comment">// ordered write of segments[0]</span></span><br><span class="line">      <span class="keyword">this</span>.segments = ss;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>构造函数，Segment[] 数组进行了初始化，并且计算出，每个Segment 对象最优存储个数，以及Segment[]的长度计算，根据代码的算法，Segment[]的长度是一定是2的幂次方，最小的长度 是2，hashEntry[]的长度也是2的幂次方。</p><blockquote><h1 id="5、ConcurrentHashMap-put-K-k-V-v"><a href="#5、ConcurrentHashMap-put-K-k-V-v" class="headerlink" title="5、ConcurrentHashMap.put(K k,V v)"></a>5、ConcurrentHashMap.put(K k,V v)</h1></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Segment&lt;K, V&gt; s;</span><br><span class="line">    <span class="comment">// put 方法 没有做key 的非空校验，1.8的做了校验</span></span><br><span class="line">    <span class="keyword">if</span> (value == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算key 的 hash值</span></span><br><span class="line">    <span class="keyword">int</span> hash = hash(key);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算 这个key 在Segment[] 数组中的哪个位置；</span></span><br><span class="line">    <span class="keyword">int</span> j = (hash &gt;&gt;&gt; segmentShift) &amp; segmentMask;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;br&gt;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *  UNSAFE.getObject(segments, (j &lt;&lt; SSHIFT) + SBASE)</span></span><br><span class="line"><span class="comment">     *      去拿这个这个下表位置的偏移量，通过此方法获取这个偏移量位置的Segment对象是否为空；</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *      在构造的时候，只初始化了，下表为0的，第一个元素；</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *      s = null 的话，就 ensureSegment 实实例化出来</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> ((s = (Segment&lt;K, V&gt;) UNSAFE.getObject          <span class="comment">// nonvolatile; recheck</span></span><br><span class="line">            (segments, (j &lt;&lt; SSHIFT) + SBASE)) == <span class="keyword">null</span>) <span class="comment">//  in ensureSegment</span></span><br><span class="line">        s = ensureSegment(j);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> s.put(key, hash, value, <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><h2 id="5-1-ensureSegment-j"><a href="#5-1-ensureSegment-j" class="headerlink" title="5.1 ensureSegment(j)"></a>5.1 ensureSegment(j)</h2></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Segment&lt;K,V&gt; <span class="title">ensureSegment</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">     <span class="comment">// 读取Segment[]</span></span><br><span class="line">     <span class="keyword">final</span> Segment&lt;K,V&gt;[] ss = <span class="keyword">this</span>.segments;</span><br><span class="line"></span><br><span class="line">     <span class="comment">// 在获取一次 key 在数组中的偏移量</span></span><br><span class="line">     <span class="keyword">long</span> u = (k &lt;&lt; SSHIFT) + SBASE; <span class="comment">// raw offset</span></span><br><span class="line"></span><br><span class="line">     <span class="comment">// 生明 即将实例化的Segment对像</span></span><br><span class="line">     Segment&lt;K,V&gt; seg;</span><br><span class="line"></span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * &lt;br&gt;</span></span><br><span class="line"><span class="comment">      * 防止其它线程 在此线程修改前已经修改了</span></span><br><span class="line"><span class="comment">      *</span></span><br><span class="line"><span class="comment">      * UNSAFE.getObjectVolatile(ss, u)</span></span><br><span class="line"><span class="comment">      *   从对象的指定偏移量处获取变量的引用</span></span><br><span class="line"><span class="comment">      *   再次判断是否为空</span></span><br><span class="line"><span class="comment">      *</span></span><br><span class="line"><span class="comment">      *</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">     <span class="keyword">if</span> ((seg = (Segment&lt;K,V&gt;)UNSAFE.getObjectVolatile(ss, u)) == <span class="keyword">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">         <span class="comment">// 为空的话，就拿构造初始化的Segment对象作为原型，拿取，hashEntryp[]长度,和加载因子</span></span><br><span class="line">         <span class="comment">// 去实例化新的Segment对像</span></span><br><span class="line">         Segment&lt;K,V&gt; proto = ss[<span class="number">0</span>]; <span class="comment">// use segment 0 as prototype</span></span><br><span class="line"></span><br><span class="line">         <span class="keyword">int</span> cap = proto.table.length;</span><br><span class="line"></span><br><span class="line">         <span class="keyword">float</span> lf = proto.loadFactor;</span><br><span class="line"></span><br><span class="line">         <span class="comment">// 计算数组的 加载因子</span></span><br><span class="line">         <span class="keyword">int</span> threshold = (<span class="keyword">int</span>)(cap * lf);</span><br><span class="line"></span><br><span class="line">         <span class="comment">// 实例化 hashEntry数组</span></span><br><span class="line">         HashEntry&lt;K,V&gt;[] tab = (HashEntry&lt;K,V&gt;[])<span class="keyword">new</span> HashEntry[cap];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">         <span class="comment">/**</span></span><br><span class="line"><span class="comment">          * &lt;br&gt;</span></span><br><span class="line"><span class="comment">          *</span></span><br><span class="line"><span class="comment">          * 再次复查当前位置是否为空</span></span><br><span class="line"><span class="comment">          * 防止其它线程 在此线程修改前已经修改了</span></span><br><span class="line"><span class="comment">          *</span></span><br><span class="line"><span class="comment">          * 否则直接return即可</span></span><br><span class="line"><span class="comment">          */</span></span><br><span class="line">         <span class="keyword">if</span> ((seg = (Segment&lt;K,V&gt;)UNSAFE.getObjectVolatile(ss, u))</span><br><span class="line">                 == <span class="keyword">null</span>) &#123; <span class="comment">// recheck</span></span><br><span class="line"></span><br><span class="line">             <span class="comment">// 实例化 Segment 对象</span></span><br><span class="line">             Segment&lt;K,V&gt; s = <span class="keyword">new</span> Segment&lt;K,V&gt;(lf, threshold, tab);</span><br><span class="line"></span><br><span class="line">             <span class="comment">/**</span></span><br><span class="line"><span class="comment">              * &lt;br&gt;</span></span><br><span class="line"><span class="comment">              *</span></span><br><span class="line"><span class="comment">              * 使用循环知道cas成功为止，因为有时候会cas失败；</span></span><br><span class="line"><span class="comment">              *</span></span><br><span class="line"><span class="comment">              */</span></span><br><span class="line">             <span class="keyword">while</span> ((seg = (Segment&lt;K,V&gt;)UNSAFE.getObjectVolatile(ss, u))</span><br><span class="line">                     == <span class="keyword">null</span>) &#123;</span><br><span class="line">                 <span class="comment">// cas 修改数组中的key在的下标位置的值，原来为 null,修改值为 新对象</span></span><br><span class="line">                 <span class="keyword">if</span> (UNSAFE.compareAndSwapObject(ss, u, <span class="keyword">null</span>, seg = s))</span><br><span class="line">                     <span class="keyword">break</span>;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> seg;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><blockquote><h2 id="5-2-Segment-put-K-key-int-hash-V-value-boolean-onlyIfAbsent"><a href="#5-2-Segment-put-K-key-int-hash-V-value-boolean-onlyIfAbsent" class="headerlink" title="5.2 Segment.put(K key, int hash, V value, boolean onlyIfAbsent)"></a>5.2 Segment.put(K key, int hash, V value, boolean onlyIfAbsent)</h2><p>将 key value 包装成 HashEntry 对象，假如到数组中，或者HashEntry 链表中去；</p></blockquote><p>Segment 继承了 ReentrantLock ，是一把锁，在此put 方法中进行 tryLock(), 获取锁，获取失败，救会<br>scanAndLockForPut(key, hash, value),进行循环重试取锁，如果到达指定的尝试次数还没有锁的话，就会lock() 进入队列等待。</p><p>此锁是非公平锁。</p><p><strong>put 方法</strong>：<br>  <strong>注意点：</strong><br>  &emsp; 1、hash冲突，key相同的情况，处理？<br>    &emsp;&emsp; &emsp; hash 冲突，key 相同的情况下，会默认 进行，值替换，新值覆盖旧值。</p><p>  &emsp; 2、key 的hash冲突，key 不相同的情况？<br>      &emsp;&emsp;&emsp; 只是 key的 hash 冲突，的话，就会在链表的头节点加入新的包装的HashEntry对象；<br>  &emsp; 3、Segment下的HashEntry 数组装不下怎么办？<br>       &emsp;&emsp;&emsp; 在加入之前，根据加载因子去计算，是否需要扩容，不需要扩容就直接加入，否则就会对数组进行扩容。</p><p><strong>代码分析：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> V <span class="title">put</span><span class="params">(K key, <span class="keyword">int</span> hash, V value, <span class="keyword">boolean</span> onlyIfAbsent)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * &lt;br&gt;</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * 开始上锁了</span></span><br><span class="line"><span class="comment">         * tryLock()；是 ReentrantLock 里面的方法；是非公平锁；</span></span><br><span class="line"><span class="comment">         * tryLock()失败，就会</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * scanAndLockForPut();</span></span><br><span class="line"><span class="comment">         *   进行重试获取锁，在不超过 RETRIES_BEFORE_LOCK = 2 次数的时候，2 是默认值</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        HashEntry&lt;K, V&gt; node = tryLock() ? <span class="keyword">null</span> :</span><br><span class="line">                scanAndLockForPut(key, hash, value);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        V oldValue;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            HashEntry&lt;K, V&gt;[] tab = table;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 计算HashEntry对象在 HashEntry[]数组中的位置，这个算法跟 HashTable一样的</span></span><br><span class="line">            <span class="keyword">int</span> index = (tab.length - <span class="number">1</span>) &amp; hash;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取这个 数组中的，这个下标位置是的值，有可能为空，有可能存在值，存在值说明hash冲突了</span></span><br><span class="line">            HashEntry&lt;K, V&gt; first = entryAt(tab, index);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 遍历 HashEntry&lt;K,V&gt; 链表结构，</span></span><br><span class="line">            <span class="keyword">for</span> (HashEntry&lt;K, V&gt; e = first; ; )</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// e !=null 有可能是hash冲突了，存在 链表</span></span><br><span class="line">                <span class="keyword">if</span> (e != <span class="keyword">null</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">/**</span></span><br><span class="line"><span class="comment">                     * &lt;br&gt;</span></span><br><span class="line"><span class="comment">                     *</span></span><br><span class="line"><span class="comment">                     * 继续进一步判断 key 的内存是否相等、</span></span><br><span class="line"><span class="comment">                     * 内存地址是否相等、hash 值是否相等。</span></span><br><span class="line"><span class="comment">                     *</span></span><br><span class="line"><span class="comment">                     * 这个判断跟 HashTable的判断也是一样的</span></span><br><span class="line"><span class="comment">                     *</span></span><br><span class="line"><span class="comment">                     *</span></span><br><span class="line"><span class="comment">                     */</span></span><br><span class="line">                    K k;</span><br><span class="line">                    <span class="keyword">if</span> ((k = e.key) == key ||</span><br><span class="line">                            (e.hash == hash &amp;&amp; key.equals(k)))</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="comment">// 此时key相等了，就判断是否新值覆盖旧值</span></span><br><span class="line">                        oldValue = e.value;</span><br><span class="line"></span><br><span class="line">                        <span class="comment">// 是否覆盖</span></span><br><span class="line">                        <span class="keyword">if</span> (!onlyIfAbsent)</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="comment">// 覆盖</span></span><br><span class="line">                            e.value = value;</span><br><span class="line"></span><br><span class="line">                            <span class="comment">// 修改次数加一</span></span><br><span class="line">                            ++modCount;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// 如果 只是hash冲突，key的值不等，就形成了链表</span></span><br><span class="line">                    e = e.next;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// 没有hash冲突，HashEntry 没有存在链表；</span></span><br><span class="line">                    <span class="keyword">if</span> (node != <span class="keyword">null</span>)</span><br><span class="line">                        <span class="comment">// 新增的节点，设置为头节点</span></span><br><span class="line">                        node.setNext(first);</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        <span class="comment">// 创建新的HashENtry对象，并且设置为头节点</span></span><br><span class="line">                        node = <span class="keyword">new</span> HashEntry&lt;K, V&gt;(hash, key, value, first);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 数组容量加一，就是判断，新增这个key之后，这个数组的容量是否需要扩容</span></span><br><span class="line">                    <span class="keyword">int</span> c = count + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 判断是否需要扩容</span></span><br><span class="line">                    <span class="keyword">if</span> (c &gt; threshold &amp;&amp; tab.length &lt; MAXIMUM_CAPACITY)</span><br><span class="line">                        rehash(node);</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        <span class="comment">// 不需要扩容，就将数组下的这个位置，替换为新的HashEntry</span></span><br><span class="line">                        setEntryAt(tab, index, node);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 修改次数+1</span></span><br><span class="line">                    ++modCount;</span><br><span class="line">                    count = c;</span><br><span class="line">                    oldValue = <span class="keyword">null</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 释放锁</span></span><br><span class="line">            unlock();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> oldValue;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><h3 id="5-21-scanAndLockForPut-K-key-int-hash-V-value"><a href="#5-21-scanAndLockForPut-K-key-int-hash-V-value" class="headerlink" title="5.21 scanAndLockForPut(K key, int hash, V value)"></a>5.21 scanAndLockForPut(K key, int hash, V value)</h3><p>  tryLock()；是 ReentrantLock 里面的方法；是非公平锁；<br>  tryLock()失败，就会 scanAndLockForPut();<br>  进行重试获取锁，在不超过 RETRIES_BEFORE_LOCK = 2 次数的时候，2 是默认值;<br>  重试次数大于 指定的重试值的时候，线程被挂起，进入AQS 的队列等待</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> HashEntry&lt;K,V&gt; <span class="title">scanAndLockForPut</span><span class="params">(K key, <span class="keyword">int</span> hash, V value)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 根据 获取当前数组下的位置，获取第一个HashEntry</span></span><br><span class="line">        HashEntry&lt;K,V&gt; first = entryForHash(<span class="keyword">this</span>, hash);</span><br><span class="line">        HashEntry&lt;K,V&gt; e = first;</span><br><span class="line">        HashEntry&lt;K,V&gt; node = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 初始化 重试获取锁的标志次数</span></span><br><span class="line">        <span class="keyword">int</span> retries = -<span class="number">1</span>; <span class="comment">// negative while locating node</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 尝试循环重试读锁</span></span><br><span class="line">        <span class="keyword">while</span> (!tryLock()) &#123;</span><br><span class="line">            HashEntry&lt;K,V&gt; f; <span class="comment">// to recheck first below</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (retries &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// 如过 数组的下标这个位置是空的，初始化新的HashEntry对象，</span></span><br><span class="line">                <span class="comment">// return 回去，在判断是否存在链表</span></span><br><span class="line">                <span class="keyword">if</span> (e == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (node == <span class="keyword">null</span>) <span class="comment">// speculatively create node</span></span><br><span class="line">                        node = <span class="keyword">new</span> HashEntry&lt;K,V&gt;(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">                    retries = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (key.equals(e.key))</span><br><span class="line">                    retries = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    e = e.next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (++retries &gt; MAX_SCAN_RETRIES) &#123;</span><br><span class="line">                <span class="comment">// 如果 重试次数到达最大值，阻塞进入AQS的队列排队</span></span><br><span class="line">                lock();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ((retries &amp; <span class="number">1</span>) == <span class="number">0</span> &amp;&amp;</span><br><span class="line">                    (f = entryForHash(<span class="keyword">this</span>, hash)) != first) &#123;</span><br><span class="line">                <span class="comment">// 判断 这个位置是否有被修改，修改了则重新初始化其它值</span></span><br><span class="line"></span><br><span class="line">                e = first = f; <span class="comment">// re-traverse if entry changed</span></span><br><span class="line">                retries = -<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><h1 id="6、rehash-HashEntry-lt-K-V-gt-node-扩容"><a href="#6、rehash-HashEntry-lt-K-V-gt-node-扩容" class="headerlink" title="6、rehash(HashEntry&lt;K,V&gt; node) 扩容"></a>6、rehash(HashEntry&lt;K,V&gt; node) 扩容</h1><p>在新增key的时候，就会判断是否需要扩容，扩容条件就是。<br>新增后的个数大于数组容量*加载因子(默认0.75) 并且 数组的容量在不大于最大容量的时候<br>&emsp; <code>(count &gt; (cap * lf) &amp;&amp; tab.length &lt; MAXIMUM_CAPACITY)</code></p></blockquote><p><strong>扩容过程：</strong><br>1、扩容后的容量是原来数的一倍，最后还是2的幂次方。<br>2、重新计算数 HashEntry 在新的数组上的位置。</p><p>遍历老的HashEntry[] 数组，进行数据迁移，先要重新拿取 sizeMask这个是计算key存放位置所在下标用的也就是<br>sizeMask = newTable.length-1</p><p>重新修改 扩容阙值条件 threshold = (int)(newCapacity * loadFactor);</p><p>判断 HashEntry[] 的任何位置，判断是否存在链表，如果链表只有一个元素，就直接计算 <code>e.hash &amp; sizeMask</code> 在新数组的位置，迁移过去；</p><p>如果链表存在多个值，进行第一次遍历链表：拿到链表的最后一个 HashEntry,将其迁移到新数组中；</p><p>接着 第二个循环,遍历链表的前面几个 上一个 循环已经拿了 最后一个，<br>根据计算的新数组下标，从新数组中的这个位置拿HashEntry，然后重新构造自己 HashEntry，如果，这个位置不存在HashEntry 的话，那自己就是第一个节点，否则，自己作为头节点加入到 链表中，将原来的HashEntry 作为自己的next。</p><p>这种情况有可能会加入到新的链表中，并且作为头节点，也有可能自己占据一个位置。</p><p><strong>源码分析：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 扩容处理</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> node</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">rehash</span><span class="params">(HashEntry&lt;K,V&gt; node)</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">       <span class="comment">// 旧数组</span></span><br><span class="line">       HashEntry&lt;K,V&gt;[] oldTable = table;</span><br><span class="line">       <span class="keyword">int</span> oldCapacity = oldTable.length;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 新数组容量，为旧的2倍</span></span><br><span class="line">       <span class="keyword">int</span> newCapacity = oldCapacity &lt;&lt; <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 下一次的扩容阙值条件</span></span><br><span class="line">       threshold = (<span class="keyword">int</span>)(newCapacity * loadFactor);</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 新数组</span></span><br><span class="line">       HashEntry&lt;K,V&gt;[] newTable =</span><br><span class="line">               (HashEntry&lt;K,V&gt;[]) <span class="keyword">new</span> HashEntry[newCapacity];</span><br><span class="line"></span><br><span class="line">       <span class="keyword">int</span> sizeMask = newCapacity - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历 老Segment[]数组,进行数据迁移</span></span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; oldCapacity ; i++) &#123;</span><br><span class="line"></span><br><span class="line">           <span class="comment">// 链表的第一个 头节点</span></span><br><span class="line">           HashEntry&lt;K,V&gt; e = oldTable[i];</span><br><span class="line">           <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123;</span><br><span class="line">               HashEntry&lt;K,V&gt; next = e.next;</span><br><span class="line"></span><br><span class="line">               <span class="comment">// 重新计算 当前key,在新数组的位置；</span></span><br><span class="line">               <span class="keyword">int</span> idx = e.hash &amp; sizeMask;</span><br><span class="line"></span><br><span class="line">               <span class="comment">// 当前 HashEntry对象，没有存在 hash冲突，没有形成链表，直接给值到新的数组中</span></span><br><span class="line">               <span class="keyword">if</span> (next == <span class="keyword">null</span>)   <span class="comment">//  Single node on list</span></span><br><span class="line">                   newTable[idx] = e;</span><br><span class="line">               <span class="keyword">else</span> &#123; <span class="comment">// Reuse consecutive sequence at same slot</span></span><br><span class="line"></span><br><span class="line">                   <span class="comment">/**</span></span><br><span class="line"><span class="comment">                    *</span></span><br><span class="line"><span class="comment">                    * 遍历链表</span></span><br><span class="line"><span class="comment">                    *</span></span><br><span class="line"><span class="comment">                    * 读取链表的最后一个 HashEntry 并且计算在新数组的中位置，将其放到新数组中</span></span><br><span class="line"><span class="comment">                    */</span></span><br><span class="line">                   HashEntry&lt;K,V&gt; lastRun = e;</span><br><span class="line">                   <span class="keyword">int</span> lastIdx = idx;</span><br><span class="line">                   <span class="keyword">for</span> (HashEntry&lt;K,V&gt; last = next;</span><br><span class="line">                        last != <span class="keyword">null</span>;</span><br><span class="line">                        last = last.next) &#123;</span><br><span class="line">                       <span class="keyword">int</span> k = last.hash &amp; sizeMask;</span><br><span class="line">                       <span class="keyword">if</span> (k != lastIdx) &#123;</span><br><span class="line">                           lastIdx = k;</span><br><span class="line">                           lastRun = last;</span><br><span class="line">                       &#125;</span><br><span class="line">                   &#125;</span><br><span class="line">                   newTable[lastIdx] = lastRun;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                   <span class="comment">// Clone remaining nodes</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                   <span class="comment">// 遍历链表的前面几个 上一个 循环已经拿了 最后一个；</span></span><br><span class="line">                   <span class="keyword">for</span> (HashEntry&lt;K,V&gt; p = e; p != lastRun; p = p.next) &#123;</span><br><span class="line">                       V v = p.value;</span><br><span class="line">                       <span class="keyword">int</span> h = p.hash;</span><br><span class="line">                       <span class="keyword">int</span> k = h &amp; sizeMask;</span><br><span class="line"></span><br><span class="line">                       <span class="comment">// 根据计算的新数组下标，从新数组中的这个位置拿HashEntry，</span></span><br><span class="line">                       <span class="comment">// 然后重新构造自己 HashEntry，如果，这个位置不存在HashEntry 的话，</span></span><br><span class="line">                       <span class="comment">// 那自己就是第一个节点，否则，自己作为头节点加入到 链表中，将原来的HashEntry 作为自己的next.</span></span><br><span class="line">                       <span class="comment">// 这种情况有可能会加入到新的链表中，并且作为头节点；</span></span><br><span class="line">                       <span class="comment">// 也有可能自己占据一个位置。</span></span><br><span class="line">                       HashEntry&lt;K,V&gt; n = newTable[k];</span><br><span class="line">                       newTable[k] = <span class="keyword">new</span> HashEntry&lt;K,V&gt;(h, p.key, v, n);</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 添加新的节点</span></span><br><span class="line">       <span class="keyword">int</span> nodeIndex = node.hash &amp; sizeMask; <span class="comment">// add the new node</span></span><br><span class="line">       node.setNext(newTable[nodeIndex]);</span><br><span class="line">       newTable[nodeIndex] = node;</span><br><span class="line">       <span class="comment">// 更换新的 HashEntry[] 因为已经扩容了</span></span><br><span class="line">       table = newTable</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><blockquote><h1 id="7、Get-Object-key"><a href="#7、Get-Object-key" class="headerlink" title="7、Get(Object key)"></a>7、Get(Object key)</h1><p> get 方法并没有加锁，而是通过UNSAFE类的方法来保证线程安全的。</p></blockquote><blockquote><h1 id="8、总结"><a href="#8、总结" class="headerlink" title="8、总结"></a>8、总结</h1></blockquote><p>ConcurrentHashMap 与 HashTable 都是属于线程安全的 Map,但两者的区别不同。HashTable 的线程安全是基于Sycnchronized,是每个方法都上了sycnchronized；锁住了整个HashTable,效率低下。ConcurrentHashMap 而是采用分段锁的设计，将数据拆分开来存储，也就是 每一个 Segment 都是一个 一个锁，Segment 继承了 ReentrantLock，经过两次 对key的Hash 运算，进行对key在 Segment[] 数组中的位置和Segment[]中的HashEntry[]数组中的位置定位，这样一来，就将数据打散开了存储，在Get的时候，如果不存Hash冲突，也就是不在同一个Segment 就不会出现竞争关系，大大提升了效率问题，也解决了线程安全问题。</p><p>ConcurrentHashMap迭代器是弱一致性的。</p><p>ConcurrentHashMap有些方法需要跨段，比如size()和containsValue()，它们可能需要锁定整个表而而不仅仅是某个段，这需要按顺序锁定所有段，操作完毕后，又按顺序释放所有段的锁。这里“按顺序”是很重要的，否则极有可能出现死锁，在ConcurrentHashMap内部，段数组是final的，并且其成员变量实际上也是final的，但是，仅仅是将数组声明为final的并不保证数组成员也是final的，这需要实现上的保证。这可以确保不会出现死锁，因为获得锁的顺序是固定的。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;::: hljs-center&lt;/p&gt;
&lt;h1 id=&quot;ConcurrentHashMap-1-7-源码分析学习&quot;&gt;&lt;a href=&quot;#ConcurrentHashMap-1-7-源码分析学习&quot; class=&quot;headerlink&quot; title=&quot;ConcurrentHashMap 1.7 源码分析学习&quot;&gt;&lt;/a&gt;ConcurrentHashMap 1.7 源码分析学习&lt;/h1&gt;&lt;p&gt;:::&lt;/p&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://lyj08.gitee.io/categories/java/"/>
    
      <category term="并发编程" scheme="http://lyj08.gitee.io/categories/java/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="并发编程" scheme="http://lyj08.gitee.io/tags/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
      <category term="集合" scheme="http://lyj08.gitee.io/tags/%E9%9B%86%E5%90%88/"/>
    
      <category term="ConcurrentHashMap" scheme="http://lyj08.gitee.io/tags/ConcurrentHashMap/"/>
    
  </entry>
  
  <entry>
    <title>根据ArrayList原理，实现一个自己的ArrayList 。。。。。。。。。</title>
    <link href="http://lyj08.gitee.io/posts/e51c6570/"/>
    <id>http://lyj08.gitee.io/posts/e51c6570/</id>
    <published>2020-02-20T15:25:00.000Z</published>
    <updated>2020-12-30T09:27:58.467Z</updated>
    
    <content type="html"><![CDATA[<h1 id="手写◆ArrayList"><a href="#手写◆ArrayList" class="headerlink" title="手写◆ArrayList"></a>手写◆ArrayList</h1><blockquote><p>&emsp; 在前面一章中，分析了ArrayList的实现原理，现在根据它的思路，自己造一个ArrayList</p></blockquote><h1 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//默认初始化的数组长度</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_CAPACITY = <span class="number">10</span>;</span><br><span class="line"> <span class="comment">//定义一个数组</span></span><br><span class="line"> <span class="keyword">private</span> Object[] elementData;</span><br><span class="line"><span class="comment">//空数组</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object[] EMPTY_ELEMENTDATA = &#123;&#125;;</span><br><span class="line"> <span class="comment">//最大容量</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_ARRAY_SIZE = Integer.MAX_VALUE - <span class="number">8</span>;</span><br><span class="line"> <span class="comment">//数组实际大小</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br></pre></td></tr></table></figure><a id="more"></a><h1 id="构造"><a href="#构造" class="headerlink" title="构造"></a>构造</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 默认构造函数 数组长度为10</span></span><br><span class="line"><span class="comment">  **/</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">MyArrayList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.size = <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">this</span>.elementData = EMPTY_ELEMENTDATA;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 定义一个固定长度的数组，如果数组小于0则抛异常</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">MyArrayList</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>) &#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;初始容量不能小于0 &quot;</span> + initialCapacity);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">this</span>.elementData = <span class="keyword">new</span> Object[initialCapacity];</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> size;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h1 id="add-T-t"><a href="#add-T-t" class="headerlink" title="add(T t)"></a>add(T t)</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 添加方法</span></span><br><span class="line"><span class="comment">  * 1.添加之前检查数组容量是否够用</span></span><br><span class="line"><span class="comment">  * 2.如果不够用则对数组进行扩容,扩容为原来长度的1.5倍</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(T t)</span> </span>&#123;</span><br><span class="line">      ensureCapacityInternal(size + <span class="number">1</span>);</span><br><span class="line">      elementData[size++] = t;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * 指定位置插入</span></span><br><span class="line"><span class="comment">   *1.先检查下标是否越界</span></span><br><span class="line"><span class="comment">   * 2.是否是否需要扩容</span></span><br><span class="line"><span class="comment">   * 3.指定位置后边的元素统统往后移动一位</span></span><br><span class="line"><span class="comment">   *      插入和删除效率低下</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, T t)</span> </span>&#123;</span><br><span class="line">      <span class="comment">//1.检查下标是否越界</span></span><br><span class="line">      rangeCheckForAdd(index);</span><br><span class="line">      <span class="comment">//2.是否扩容</span></span><br><span class="line">      ensureCapacityInternal(size + <span class="number">1</span>);</span><br><span class="line">      <span class="comment">//移位</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = size(); i &gt; index; i--) &#123;</span><br><span class="line">          elementData[i] = elementData[i - <span class="number">1</span>];</span><br><span class="line">      &#125;</span><br><span class="line">      elementData[index] = t;</span><br><span class="line">      size++;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h1 id="get-int-i"><a href="#get-int-i" class="headerlink" title="get(int i)"></a>get(int i)</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * get方法 通过下标去数据</span></span><br><span class="line"><span class="comment"> * 1.检查下标是否越界</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    rangeCheckForAdd(index);</span><br><span class="line">    <span class="keyword">return</span> (T) elementData[index];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="remove-Object-o"><a href="#remove-Object-o" class="headerlink" title="remove(Object o)"></a>remove(Object o)</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * 根据元素删除方法</span><br><span class="line"> * 2.删除指定位置的前边的元素统统往前移动一位</span><br><span class="line"> *&#x2F;</span><br><span class="line">public boolean remove(Object o) &#123;</span><br><span class="line">    if (o &#x3D;&#x3D; null) &#123;</span><br><span class="line">        &#x2F;&#x2F;移位</span><br><span class="line">        for (int i &#x3D; 0; i &lt; size(); i++) &#123;</span><br><span class="line">            if (elementData[i] &#x3D;&#x3D; null) &#123;</span><br><span class="line">                fastRemove(i);</span><br><span class="line">                return true;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        for (int i &#x3D; 0; i &lt; size(); i++) &#123;</span><br><span class="line">            if (elementData[i].equals(o)) &#123;</span><br><span class="line">                fastRemove(i);</span><br><span class="line">                return true;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.example.demo;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Author: yj</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Discription</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>:11:51 2018/8/16</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 基于数组实现的：</span></span><br><span class="line"><span class="comment"> * 优缺点：查询快，增删慢</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyArrayList</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">//默认初始化的数组长度</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_CAPACITY = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//定义一个数组</span></span><br><span class="line">    <span class="keyword">private</span> Object[] elementData;</span><br><span class="line">    <span class="comment">//空数组</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object[] EMPTY_ELEMENTDATA = &#123;&#125;;</span><br><span class="line">    <span class="comment">//最大容量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_ARRAY_SIZE = Integer.MAX_VALUE - <span class="number">8</span>;</span><br><span class="line">    <span class="comment">//数组实际大小</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line">   </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 默认构造函数 数组长度为10</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyArrayList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.size = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">this</span>.elementData = EMPTY_ELEMENTDATA;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义一个固定长度的数组，如果数组小于0则抛异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyArrayList</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;初始容量不能小于0 &quot;</span> + initialCapacity);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.elementData = <span class="keyword">new</span> Object[initialCapacity];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加方法</span></span><br><span class="line"><span class="comment">     * 1.添加之前检查数组容量是否够用</span></span><br><span class="line"><span class="comment">     * 2.如果不够用则对数组进行扩容,扩容为原来长度的1.5倍</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(T t)</span> </span>&#123;</span><br><span class="line">        ensureCapacityInternal(size + <span class="number">1</span>);</span><br><span class="line">        elementData[size++] = t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 指定位置插入</span></span><br><span class="line"><span class="comment">     *1.先检查下标是否越界</span></span><br><span class="line"><span class="comment">     * 2.是否是否需要扩容</span></span><br><span class="line"><span class="comment">     * 3.指定位置后边的元素统统往后移动一位</span></span><br><span class="line"><span class="comment">     *      插入和删除效率低下</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, T t)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.检查下标是否越界</span></span><br><span class="line">        rangeCheckForAdd(index);</span><br><span class="line">        <span class="comment">//2.是否扩容</span></span><br><span class="line">        ensureCapacityInternal(size + <span class="number">1</span>);</span><br><span class="line">        <span class="comment">//移位</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = size(); i &gt; index; i--) &#123;</span><br><span class="line">            elementData[i] = elementData[i - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        elementData[index] = t;</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据下标 删除方法</span></span><br><span class="line"><span class="comment">     * 1.先检查下标是否越界</span></span><br><span class="line"><span class="comment">     * 2.删除指定位置的前边的元素统统往前移动一位</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        rangeCheckForAdd(index);</span><br><span class="line">        T oldIndex = (T) elementData[index];</span><br><span class="line">        <span class="comment">//移位</span></span><br><span class="line">        fastRemove(index);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=index;i&lt;size()-<span class="number">1</span>;i++) &#123;</span><br><span class="line">            elementData[i]=<span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">if</span> (i==size) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">            elementData[i]=elementData[i+<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> oldIndex;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据元素删除方法</span></span><br><span class="line"><span class="comment">     * 2.删除指定位置的前边的元素统统往前移动一位</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//移位</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size(); i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (elementData[i] == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    fastRemove(i);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size(); i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (elementData[i].equals(o)) &#123;</span><br><span class="line">                    fastRemove(i);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fastRemove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = index; i &lt; size() - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            elementData[i] = <span class="keyword">null</span>;</span><br><span class="line">            elementData[i] = elementData[i + <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        size--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * get方法 通过下标去数据</span></span><br><span class="line"><span class="comment">     * 1.检查下标是否越界</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        rangeCheckForAdd(index);</span><br><span class="line">        <span class="keyword">return</span> (T) elementData[index];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 检查数组容量是否够用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ensureCapacityInternal</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//数组元素个数大于初始化的数组长度时候</span></span><br><span class="line">        <span class="keyword">if</span> (minCapacity - elementData.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">//进行数组扩容</span></span><br><span class="line">            grow(minCapacity);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 数组扩容</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">grow</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> oldLen = elementData.length;</span><br><span class="line">        <span class="keyword">int</span> newLen = oldLen + oldLen &gt;&gt; <span class="number">1</span>; <span class="comment">//左移位 相当于除以2</span></span><br><span class="line">        <span class="comment">//加一个元素就加长一个长度，最少保证容量和minCapacity一样</span></span><br><span class="line">        <span class="keyword">if</span> (newLen - minCapacity &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            newLen = minCapacity;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果扩充一半后仍然不够，则 newCapacity = minCapacity;minCapacity实际元素的个数。</span></span><br><span class="line">        <span class="keyword">if</span> (newLen - MAX_ARRAY_SIZE &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            newLen = hugeCapacity(minCapacity);</span><br><span class="line">            <span class="comment">//数组最大位2^32</span></span><br><span class="line">        &#125;</span><br><span class="line">        elementData = Arrays.copyOf(elementData, newLen);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 下标越界检查</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">rangeCheckForAdd</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt; <span class="keyword">this</span>.size)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">&quot;下标越界异常&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 赋值数组最大长度</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">hugeCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (minCapacity &lt; <span class="number">0</span>) <span class="comment">// overflow</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> OutOfMemoryError();</span><br><span class="line">        <span class="keyword">return</span> (minCapacity &gt; MAX_ARRAY_SIZE) ?</span><br><span class="line">                Integer.MAX_VALUE :</span><br><span class="line">                MAX_ARRAY_SIZE;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] a)</span> </span>&#123;</span><br><span class="line">        MyArrayList&lt;String&gt; stringMyArrayList = <span class="keyword">new</span> MyArrayList&lt;&gt;();</span><br><span class="line">        stringMyArrayList.add(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        stringMyArrayList.add(<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">        stringMyArrayList.add(<span class="number">1</span>, <span class="string">&quot;王五&quot;</span>);</span><br><span class="line">        stringMyArrayList.add(<span class="number">1</span>, <span class="string">&quot;王麻子&quot;</span>);</span><br><span class="line">        stringMyArrayList.add(<span class="number">0</span>, <span class="string">&quot;刘能&quot;</span>);</span><br><span class="line">        stringMyArrayList.add(<span class="number">5</span>, <span class="string">&quot;刘能去&quot;</span>);</span><br><span class="line">        <span class="comment">//stringMyArrayList.remove(3);</span></span><br><span class="line">        stringMyArrayList.remove(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line"><span class="comment">//        for (int i = 0; i &lt; 15; i++) &#123;</span></span><br><span class="line"><span class="comment">//            stringMyArrayList.add(String.valueOf(i));</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; stringMyArrayList.size(); i++) &#123;</span><br><span class="line">            System.out.println(stringMyArrayList.get(i));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;手写◆ArrayList&quot;&gt;&lt;a href=&quot;#手写◆ArrayList&quot; class=&quot;headerlink&quot; title=&quot;手写◆ArrayList&quot;&gt;&lt;/a&gt;手写◆ArrayList&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;&amp;emsp; 在前面一章中，分析了ArrayList的实现原理，现在根据它的思路，自己造一个ArrayList&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;属性&quot;&gt;&lt;a href=&quot;#属性&quot; class=&quot;headerlink&quot; title=&quot;属性&quot;&gt;&lt;/a&gt;属性&lt;/h1&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;comment&quot;&gt;//默认初始化的数组长度&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; DEFAULT_CAPACITY = &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;comment&quot;&gt;//定义一个数组&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; Object[] elementData;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//空数组&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; Object[] EMPTY_ELEMENTDATA = &amp;#123;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;comment&quot;&gt;//最大容量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; MAX_ARRAY_SIZE = Integer.MAX_VALUE - &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;comment&quot;&gt;//数组实际大小&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; size;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://lyj08.gitee.io/categories/java/"/>
    
    
      <category term="java" scheme="http://lyj08.gitee.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>http协议是网页开发的必备知识，是基于TCP/IP通信协议来传输数据的。</title>
    <link href="http://lyj08.gitee.io/posts/9c4d68f1/"/>
    <id>http://lyj08.gitee.io/posts/9c4d68f1/</id>
    <published>2020-02-16T12:26:00.000Z</published>
    <updated>2020-12-30T09:35:00.714Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Http-协议相关知识点"><a href="#Http-协议相关知识点" class="headerlink" title="Http 协议相关知识点"></a>Http 协议相关知识点</h1><p>&emsp; http协议是网页开发的必备知识，是基于TCP/IP通信协议来传输数据的。</p><h1 id="1、HTTP-协议的定义是什么？"><a href="#1、HTTP-协议的定义是什么？" class="headerlink" title="1、HTTP 协议的定义是什么？"></a>1、HTTP 协议的定义是什么？</h1><p>HTTP协议是基于 客户端/服务端 的架构模型；是一种超文本传输协议。</p><h1 id="2、HTTP请求有那三部分组成？"><a href="#2、HTTP请求有那三部分组成？" class="headerlink" title="2、HTTP请求有那三部分组成？"></a>2、HTTP请求有那三部分组成？</h1><h3 id="1-请求行-n"><a href="#1-请求行-n" class="headerlink" title="1.请求行\n"></a>1.请求行\n<img src="http://www.memoryoverflow.cn/file/articleContentImg/2019-09-28/1569643462174.png" alt="image.png"></h3><p>请求行包括了： 请求方法 url http协议版本 </p><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">GET /write/edit/<span class="number">68</span> HTTP/<span class="number">1.1</span></span><br><span class="line">User-Agent: curl/<span class="number">7.16</span><span class="number">.3</span> libcurl/<span class="number">7.16</span><span class="number">.3</span> OpenSSL/<span class="number">0.9</span>.<span class="number">7l</span> zlib/<span class="number">1.2</span><span class="number">.3</span></span><br><span class="line">Host: www.memoryoverflow.cn</span><br><span class="line">.......</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="2-请求头部"><a href="#2-请求头部" class="headerlink" title="2.请求头部"></a>2.请求头部</h3><p>请求头包含的东西就很多可以自定义：自带一般会有 date  server content-type 等字段</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">access-control-allow-credentials: <span class="keyword">true</span></span><br><span class="line">access-control-allow-headers: Content-Type,X-Requested-With,accept,Origin,Access-Control-Request-Method,Access-Control-Request-Headers,Accept</span><br><span class="line">access-control-allow-methods: GET, POST, PATCH, DELETE, PUT, OPTIONS</span><br><span class="line">content-type: application/json;charset=UTF-<span class="number">8</span></span><br><span class="line">date: Sat, <span class="number">28</span> Sep <span class="number">2019</span> <span class="number">03</span>:<span class="number">59</span>:<span class="number">55</span> GMT</span><br><span class="line">server: nginx/<span class="number">1.12</span><span class="number">.2</span>\nstatus: <span class="number">200</span></span><br></pre></td></tr></table></figure><h3 id="3-空行"><a href="#3-空行" class="headerlink" title="3.空行"></a>3.空行</h3><p><strong>空行，请求头部后面的空行是必须的；即使第四部分的请求数据为空，也必须有空行。</strong></p><h3 id="4-请求数据"><a href="#4-请求数据" class="headerlink" title="4.请求数据"></a>4.请求数据</h3><p>   请求数据就是：客户端于服务端交流时候，所携带的参数内容</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id=<span class="number">68</span>&amp;type=intenet</span><br></pre></td></tr></table></figure><p><strong>一个HTTP的请求例子</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">POST /write/edit/<span class="number">68</span>  http1<span class="number">.1</span>\nHost:www.memoryoverflow.cn\nUser-Agent:Mozilla/<span class="number">4.0</span> (compatible; MSIE <span class="number">6.0</span>; Windows NT <span class="number">5.1</span>; SV1;</span><br><span class="line">Content-Type:application/x-www-form-urlencoded</span><br><span class="line">Connection: Keep-Alive</span><br><span class="line">id=<span class="number">68</span></span><br></pre></td></tr></table></figure><h2 id="HTTP响应："><a href="#HTTP响应：" class="headerlink" title="HTTP响应："></a>HTTP响应：</h2><p>响应报文包括四部分：状态行，消息报头 空行 响应内容<br>如图所示：<br><img src="http://www.memoryoverflow.cn/file/articleContentImg/2019-09-28/1569644539894.png" alt="image.png"></p><h1 id="3、HTTP-客户端于服务端的交流过程？"><a href="#3、HTTP-客户端于服务端的交流过程？" class="headerlink" title="3、HTTP 客户端于服务端的交流过程？"></a>3、HTTP 客户端于服务端的交流过程？</h1><p>是基于TCP/IP通信协议来传输数据的；<br><strong>客户端（浏览器，默认端口是 80）—–  建立TCP连接（三次握手）  —-&gt; 服务端—-断开连接（四次挥手）–&gt;响应客户端，</strong><br><img src="http://www.memoryoverflow.cn/file/articleContentImg/2019-09-28/1569642894760.png" alt="image.png"><br><strong>Http(应用层)—&gt;TCP/UDP(传输层)—&gt;网络层（IP）—&gt; 链路层(网络硬件)</strong><br><img src="http://www.memoryoverflow.cn/file/articleContentImg/2019-09-28/1569646104250.png" alt="image.png"></p><h3 id="1-TCP的三次握手"><a href="#1-TCP的三次握手" class="headerlink" title="1.TCP的三次握手"></a>1.TCP的三次握手</h3><p><strong>客户端于服务端建立连接之前需要进行通信测试连接</strong><br><img src="http://www.memoryoverflow.cn/file/articleContentImg/2019-09-28/1569647802279.png" alt="image.png"></p><h3 id="2-TCP的四次挥手"><a href="#2-TCP的四次挥手" class="headerlink" title="2.TCP的四次挥手"></a>2.TCP的四次挥手</h3><p><strong>当客户端的请求到服务端，服务端数据处理完成后，客户端主动断开当前连接请求</strong><br><img src="http://www.memoryoverflow.cn/file/articleContentImg/2019-09-28/1569648944856.png" alt="image.png"><br>第一次：客户端发送连接释放请求，FIN=1,seq=u;客户端进入FIN-WAIT-1（终止等待1）状态<br>第二次：服务器收到连接释放信息，响应确认，ACK=1，ack=u+1，并且带上自己的序列号seq=v，此时，服务端就进入了CLOSE-WAIT（关闭等待）状态。<br>第三次：客户端收到服务器的确认请求后，此时，客户端就进入FIN-WAIT-2（终止等待2）状态，等待服务器发送连接释放报文（在这之前还需要接受服务器发送的最后的数据）。<br>服务器将最后的数据发送完毕后，就向客户端发送连接释放信息，FIN=1，ack=u+1，；</p><p>第四此：客户端收到服务器的连接释确认消息后，必须发出确认消息，ACK=1，ack=w+1，而自己的序列号是seq=u+1，此时，客户端就进入了TIME-WAIT（时间等待）状态。</p><p>**注意此时TCP连接还没有释放，必须经过2∗ *∗MSL（最长报文段寿命）的时间后，当客户端撤销相应的TCB后，才进入CLOSED状态。</p><h1 id="4、常用的HTTP方法有哪些？"><a href="#4、常用的HTTP方法有哪些？" class="headerlink" title="4、常用的HTTP方法有哪些？"></a>4、常用的HTTP方法有哪些？</h1><ol><li><p>POST：常用于 传输数据到服务端</p></li><li><p>GET：一般用于 向服务去获取消息</p></li><li><p>DELETE： 用于删除数据/文件请求</p></li><li><p>PUT:常用于数据修改</p></li><li><p>HEAD:类似于 GET 请求，只不过返回的响应中没有具体的内容，用于获取报头</p></li><li><p>OPTIONS:查询相应URI支持的HTTP方法</p></li></ol><h1 id="5、HTTP-常见状态码，有哪些？"><a href="#5、HTTP-常见状态码，有哪些？" class="headerlink" title="5、HTTP 常见状态码，有哪些？"></a>5、HTTP 常见状态码，有哪些？</h1><ol><li>200 请求成功</li><li>301 资源网页被永久转移到其它URL</li><li>404 请求的路径错误，不存在</li><li>500 服务器抛出异常，服务器错误</li><li>503 服务器不存在，连接不上服务器</li><li>400 客户端请求数据格式错误</li><li>401 没有权限，未进行身份认证</li><li>405 请求方法错误 比如 后台指定的HTTP方法为 POST ,客户端发送GET请求</li><li>504 网关错误 </li></ol><h1 id="6、HTTP-与-http-有什么区别？"><a href="#6、HTTP-与-http-有什么区别？" class="headerlink" title="6、HTTP 与 http 有什么区别？"></a>6、HTTP 与 http 有什么区别？</h1><p>http:<br>1.通信不加密，内容可能被窃听<br>2.不验证通信方身份，可能遭到伪装<br>3.无法验证报文完整性，可能被篡改<br>http:<br>是一个加密的安全协议</p><h1 id="7、Http协议有哪些特征"><a href="#7、Http协议有哪些特征" class="headerlink" title="7、Http协议有哪些特征?"></a>7、Http协议有哪些特征?</h1><h3 id="1-无状态："><a href="#1-无状态：" class="headerlink" title="1.无状态："></a>1.无状态：</h3><p>&emsp; HTTP协议是无状态协议。无状态是指协议对于事务处理没有记忆能力。缺少状态意味着如果后续处理需要前面的信息，则它必须重传，这样可能导致每次连接传送的数据量增大。另一方面，在服务器不需要先前信息时它的应答就较快</p><h3 id="2-无连接"><a href="#2-无连接" class="headerlink" title="2.无连接"></a>2.无连接</h3><p>&emsp;无连接的含义是限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接。采用这种方式可以节省传输时间</p><h3 id="3-媒体独立"><a href="#3-媒体独立" class="headerlink" title="3.媒体独立"></a>3.媒体独立</h3><p>&emsp;这意味着，只要客户端和服务器知道如何处理的数据内容，任何类型的数据都可以通过HTTP发送。客户端以及服务器指定使用适合的MIME-type内容类型。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Http-协议相关知识点&quot;&gt;&lt;a href=&quot;#Http-协议相关知识点&quot; class=&quot;headerlink&quot; title=&quot;Http 协议相关知识点&quot;&gt;&lt;/a&gt;Http 协议相关知识点&lt;/h1&gt;&lt;p&gt;&amp;emsp; http协议是网页开发的必备知识，是基于TCP/IP通信协议来传输数据的。&lt;/p&gt;
&lt;h1 id=&quot;1、HTTP-协议的定义是什么？&quot;&gt;&lt;a href=&quot;#1、HTTP-协议的定义是什么？&quot; class=&quot;headerlink&quot; title=&quot;1、HTTP 协议的定义是什么？&quot;&gt;&lt;/a&gt;1、HTTP 协议的定义是什么？&lt;/h1&gt;&lt;p&gt;HTTP协议是基于 客户端/服务端 的架构模型；是一种超文本传输协议。&lt;/p&gt;
&lt;h1 id=&quot;2、HTTP请求有那三部分组成？&quot;&gt;&lt;a href=&quot;#2、HTTP请求有那三部分组成？&quot; class=&quot;headerlink&quot; title=&quot;2、HTTP请求有那三部分组成？&quot;&gt;&lt;/a&gt;2、HTTP请求有那三部分组成？&lt;/h1&gt;&lt;h3 id=&quot;1-请求行-n&quot;&gt;&lt;a href=&quot;#1-请求行-n&quot; class=&quot;headerlink&quot; title=&quot;1.请求行\n&quot;&gt;&lt;/a&gt;1.请求行\n&lt;img src=&quot;http://www.memoryoverflow.cn/file/articleContentImg/2019-09-28/1569643462174.png&quot; alt=&quot;image.png&quot;&gt;&lt;/h3&gt;&lt;p&gt;请求行包括了： 请求方法 url http协议版本 &lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;GET /write/edit/&lt;span class=&quot;number&quot;&gt;68&lt;/span&gt; HTTP/&lt;span class=&quot;number&quot;&gt;1.1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;User-Agent: curl/&lt;span class=&quot;number&quot;&gt;7.16&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.3&lt;/span&gt; libcurl/&lt;span class=&quot;number&quot;&gt;7.16&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.3&lt;/span&gt; OpenSSL/&lt;span class=&quot;number&quot;&gt;0.9&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;7l&lt;/span&gt; zlib/&lt;span class=&quot;number&quot;&gt;1.2&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Host: www.memoryoverflow.cn&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.......&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://lyj08.gitee.io/categories/java/"/>
    
    
      <category term="http协议" scheme="http://lyj08.gitee.io/tags/http%E5%8D%8F%E8%AE%AE/"/>
    
  </entry>
  
  <entry>
    <title>ReentrantLock可重入锁,源码学习，分析执行原理</title>
    <link href="http://lyj08.gitee.io/posts/84b802e7/"/>
    <id>http://lyj08.gitee.io/posts/84b802e7/</id>
    <published>2020-02-11T14:26:54.000Z</published>
    <updated>2020-12-30T09:27:29.297Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ReentrantLock"><a href="#ReentrantLock" class="headerlink" title="ReentrantLock"></a>ReentrantLock</h1><p>&emsp; <code>ReentrantLock</code> 在1.6 之前，性能比 <code>Synchronized</code>，好很多，因为实现同步，不需要到jvm的操作系统中处理，在java代码层面就可以处理掉，而Synchronized 是需要到操作系统处理。在1.6之后，Synchronized 进行了优化，在性上没有太多的差别。</p><a id="more"></a><h1 id="ReentrantLock源码学习"><a href="#ReentrantLock源码学习" class="headerlink" title="ReentrantLock源码学习"></a>ReentrantLock源码学习</h1><h2 id="1、ReentrantLock-构造函数"><a href="#1、ReentrantLock-构造函数" class="headerlink" title="1、ReentrantLock 构造函数"></a>1、ReentrantLock 构造函数</h2><p>&emsp; 我们可以看源码/jdk.chm，知道 ReentrantLock 有两个构造函数。<br><img src="http://thisforyou.cn:180/file/articleContentImg/2020-02-12/1581479921147.png" alt="1.png"></p><p>代码上的锁取决于程序员的参数处理，默认使用的就是，不带参数的构造函数，也就是 <strong>非公平锁</strong>，ReentrantLock(true),使用的就是<strong>公平锁</strong>。</p><p>在这之前，先看一边源码，对它的整体过程有个大致的了解。<br>先看看 这几个类有些什么<br><img src="http://thisforyou.cn:180/file/articleContentImg/2020-02-12/1581480193834.png" alt="image.png"></p><p><strong>加锁过程 如图：</strong><br><img src="http://thisforyou.cn:180/file/articleContentImg/2020-02-13/1581572584555.png" alt="1.png"></p><p><strong>代码分析</strong></p><h3 id="1-1-ReentrantLock-公平锁"><a href="#1-1-ReentrantLock-公平锁" class="headerlink" title="1.1 ReentrantLock 公平锁"></a>1.1 ReentrantLock 公平锁</h3><h4 id="1-11-new-ReentrantLock-true-构造"><a href="#1-11-new-ReentrantLock-true-构造" class="headerlink" title="1.11 new ReentrantLock(true) 构造"></a>1.11 new ReentrantLock(true) 构造</h4><p><code>static ReentrantLock lock = new ReentrantLock(true)</code><br><img src="http://thisforyou.cn:180/file/articleContentImg/2020-02-13/1581572718699.png" alt="1.png"><br><strong>有个构造函数，一个是有参的一个无参，根据参数 实力化一个公平锁/非公平锁。</strong></p><h4 id="1-12-加锁过程-new-FairSync-lock"><a href="#1-12-加锁过程-new-FairSync-lock" class="headerlink" title="1.12 加锁过程 new FairSync().lock()"></a>1.12 加锁过程 new FairSync().lock()</h4><h4 id="加锁过程图解"><a href="#加锁过程图解" class="headerlink" title="加锁过程图解"></a><strong>加锁过程图解</strong></h4><p><img src="http://thisforyou.cn:180/file/articleContentImg/2020-02-20/1582181039535.jpg" alt="长截图   20200220 下午02.43.37.jpg"></p><p><strong>接下来看lock()方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    acquire(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">acquire</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">if</span> (!tryAcquire(arg) &amp;&amp;</span><br><span class="line">         acquireQueued(addWaiter(Node.EXCLUSIVE), arg))</span><br><span class="line">         selfInterrupt();</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><strong>tryAcquire(int acquires) 尝试加锁</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">tryAcquire</span><span class="params">(<span class="keyword">int</span> acquires)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 当前线程</span></span><br><span class="line">    <span class="keyword">final</span> Thread current = Thread.currentThread();</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * getState() 获取锁的状态，AQS中的一个线程共享的变量，根据此变量来判断锁的状态。</span></span><br><span class="line"><span class="comment">     *  如果 状态为0，说明锁此时是自由状态，如果不为0，并且来取锁的线程不为当前线程，</span></span><br><span class="line"><span class="comment">     *  的话，就取锁失败 就会进入队列等待 acquireQueued(addWaiter(Node.EXCLUSIVE), arg)</span></span><br><span class="line"><span class="comment">     *  否则就是，状态++，说明自旋多了一次</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">int</span> c = getState();</span><br><span class="line">    <span class="keyword">if</span> (c == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * hasQueuedPredecessors() </span></span><br><span class="line"><span class="comment">         *     判断队列是否已经初始化过，是否有线等待的线程</span></span><br><span class="line"><span class="comment">         * compareAndSetState(0, acquires)：</span></span><br><span class="line"><span class="comment">         *      如果不需要进入队列等待，则进行CAS修改状态为1 取锁操作。</span></span><br><span class="line"><span class="comment">         * </span></span><br><span class="line"><span class="comment">         * setExclusiveOwnerThread(current)：</span></span><br><span class="line"><span class="comment">         *      将获得锁的线程设置为自己</span></span><br><span class="line"><span class="comment">         *    </span></span><br><span class="line"><span class="comment">         * </span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">if</span> (!hasQueuedPredecessors() &amp;&amp;</span><br><span class="line">                compareAndSetState(<span class="number">0</span>, acquires))</span><br><span class="line">        &#123;</span><br><span class="line">            setExclusiveOwnerThread(current);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (current == getExclusiveOwnerThread())</span><br><span class="line">    &#123;</span><br><span class="line"> <span class="comment">// 线程重入取锁，state+1</span></span><br><span class="line">        <span class="keyword">int</span> nextc = c + acquires;</span><br><span class="line">        <span class="keyword">if</span> (nextc &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Error(<span class="string">&quot;Maximum lock count exceeded&quot;</span>);</span><br><span class="line">        setState(nextc);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>获得锁返回true,方法一层层返回，接着就会执行.lock()方法下的业务代码。</strong></p><p><strong>在并发的状况下并且存在竞争的时候，如果第一个线程，获得了锁，在业务未完成之前，锁未释放的时候，其他线程来强锁的时候，此时就会进入队列排队等候并且，队列是一个链表，因为是公平锁所以先进去的会先获得锁</strong></p><p><strong>hasQueuedPredecessors()方法</strong><br>&emsp;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">hasQueuedPredecessors</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// The correctness of this depends on head being initialized</span></span><br><span class="line">    <span class="comment">// before tail and on head.next being accurate if the current</span></span><br><span class="line">    <span class="comment">// thread is first in queue.</span></span><br><span class="line">    Node t = tail; <span class="comment">// Read fields in reverse initialization order</span></span><br><span class="line">    Node h = head;</span><br><span class="line">    Node s;</span><br><span class="line">    <span class="keyword">return</span> h != t &amp;&amp;</span><br><span class="line">        ((s = h.next) == <span class="keyword">null</span> || s.thread != Thread.currentThread());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为第一个进入的时候 aqs中的这个 tail 和 head 肯定是空的，所以 h != t 必定返回false。所以不加锁。 线程的并发状况，如果不存在竞争，交替执行那肯定 不会用到AQS的这个队列操</p><h4 id="1-13-入队过程"><a href="#1-13-入队过程" class="headerlink" title="1.13 入队过程"></a>1.13 入队过程</h4><p><strong>1、addWaiter(Node node)</strong><br>将节点包装成Node</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Node <span class="title">addWaiter</span><span class="params">(Node mode)</span> </span>&#123;</span><br><span class="line">    Node node = <span class="keyword">new</span> Node(Thread.currentThread(), mode);</span><br><span class="line">    <span class="comment">// Try the fast path of enq; backup to full enq on failure</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;br&gt;</span></span><br><span class="line"><span class="comment">     * 当第一条线程入队的时候，不会走这个方法</span></span><br><span class="line"><span class="comment">     * 当第二条线程来的时候；</span></span><br><span class="line"><span class="comment">     *   尾部节点不为空，当前线程包装的节点node.pred = pred 就是上一个线程包装的Node</span></span><br><span class="line"><span class="comment">     *   compareAndSetTail(pred, node)</span></span><br><span class="line"><span class="comment">     *      将 AQS 的 tail = 当前线程包装的节点node</span></span><br><span class="line"><span class="comment">     *      node.next = 当前线程包装的节点node</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Node pred = tail;</span><br><span class="line">    <span class="keyword">if</span> (pred != <span class="keyword">null</span>) &#123;</span><br><span class="line">        node.prev = pred;</span><br><span class="line">        <span class="keyword">if</span> (compareAndSetTail(pred, node)) &#123;</span><br><span class="line">            pred.next = node;</span><br><span class="line">            <span class="keyword">return</span> node;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 第一条线程入队时候 走这个方法</span></span><br><span class="line">    enq(node);</span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2、enq(node)</strong><br>线程第一次入队的时候：走enq</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Node <span class="title">enq</span><span class="params">(<span class="keyword">final</span> Node node)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 死循环</span></span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        Node t = tail;</span><br><span class="line">        <span class="comment">// 第一次循环</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * &lt;br&gt;</span></span><br><span class="line"><span class="comment">         * 第一次循环不会 尾部节点必然是空的。</span></span><br><span class="line"><span class="comment">         * 所以初始化一个 什么都不装的Node 并且setHead </span></span><br><span class="line"><span class="comment">         * AQS的 head = new Node(); 如果node为空，在acquireQueued会报空指针。</span></span><br><span class="line"><span class="comment">         * </span></span><br><span class="line"><span class="comment">         * 此时 AQS的 head = tail = new Node();</span></span><br><span class="line"><span class="comment">         * </span></span><br><span class="line"><span class="comment">         * </span></span><br><span class="line"><span class="comment">         * </span></span><br><span class="line"><span class="comment">         * 因为是死循环：接着第二次遍历</span></span><br><span class="line"><span class="comment">         * </span></span><br><span class="line"><span class="comment">         * 此时 t==null 不成立 走 else</span></span><br><span class="line"><span class="comment">         * </span></span><br><span class="line"><span class="comment">         * node.pred  =  AQS的 head</span></span><br><span class="line"><span class="comment">         * </span></span><br><span class="line"><span class="comment">         * compareAndSetTail(t, node)</span></span><br><span class="line"><span class="comment">         *    设置 AQS的 tail = node(当前线程包装的node)</span></span><br><span class="line"><span class="comment">         *    node.next 指向自己；</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">if</span> (t == <span class="keyword">null</span>) &#123; <span class="comment">// Must initialize</span></span><br><span class="line">            <span class="keyword">if</span> (compareAndSetHead(<span class="keyword">new</span> Node()))</span><br><span class="line">                tail = head;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            node.prev = t;</span><br><span class="line">            <span class="keyword">if</span> (compareAndSetTail(t, node)) &#123;</span><br><span class="line">                t.next = node;</span><br><span class="line">                <span class="keyword">return</span> t;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3、acquireQueued</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  当线程包装成节点的时候就会调用此方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> node</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> arg</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">acquireQueued</span><span class="params">(<span class="keyword">final</span> Node node, <span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> failed = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">boolean</span> interrupted = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * &lt;br&gt;</span></span><br><span class="line"><span class="comment">             *</span></span><br><span class="line"><span class="comment">             * 获取addWaiter包装的节点node,的山 上一个节点。</span></span><br><span class="line"><span class="comment">             * 在 第一个线程入队的时候 head 已经初始化了，为 new Node(),第一个</span></span><br><span class="line"><span class="comment">             * node.pred = new Node();此时 不会空，不报空指针异常；</span></span><br><span class="line"><span class="comment">             *</span></span><br><span class="line"><span class="comment">             * 第一条线程来的时候，p == head 成立，会再次走一遍  tryAcquire(arg)</span></span><br><span class="line"><span class="comment">             * 如果获得锁成功，此时修改头节点 为 node , p.next 指向为空，此时，队列没有排队的线程了。</span></span><br><span class="line"><span class="comment">             *</span></span><br><span class="line"><span class="comment">             * a. 第一条线程来排队时候</span></span><br><span class="line"><span class="comment">             * 假如 tryAcquire(arg) 不成立，走 shouldParkAfterFailedAcquire</span></span><br><span class="line"><span class="comment">             *</span></span><br><span class="line"><span class="comment">             *</span></span><br><span class="line"><span class="comment">             * b、第二条线程来的时候，此时获取锁的线程还没有释放，队列中已经有一条了，我是来第二个排队的</span></span><br><span class="line"><span class="comment">             *   次条线程的node.pred 指向的就是 上一个入队的Node。 addWaiter()方法中处理的</span></span><br><span class="line"><span class="comment">             *   此时 p == head &amp;&amp; tryAcquire(arg) 也不成立，继续走 shouldParkAfterFailedAcquire</span></span><br><span class="line"><span class="comment">             *</span></span><br><span class="line"><span class="comment">             *</span></span><br><span class="line"><span class="comment">             *</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="keyword">final</span> AbstractQueuedSynchronizer.Node p = node.predecessor();</span><br><span class="line">            <span class="keyword">if</span> (p == head &amp;&amp; tryAcquire(arg)) &#123;</span><br><span class="line">                setHead(node);</span><br><span class="line">                p.next = <span class="keyword">null</span>; <span class="comment">// help GC</span></span><br><span class="line">                failed = <span class="keyword">false</span>;</span><br><span class="line">                <span class="keyword">return</span> interrupted;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (shouldParkAfterFailedAcquire(p, node) &amp;&amp;</span><br><span class="line">                    parkAndCheckInterrupt())</span><br><span class="line">                interrupted = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (failed)</span><br><span class="line">            cancelAcquire(node);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>4、shouldParkAfterFailedAcquire(p, node)</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">shouldParkAfterFailedAcquire</span><span class="params">(Node pred, Node node)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * &lt;br&gt;</span></span><br><span class="line"><span class="comment">      *  a.  假如 第一条线来排队的时候，tryAcquire(arg) 不成立；则 pred = new Node()</span></span><br><span class="line"><span class="comment">      *    此时这个 waitStatus 是初始值0；</span></span><br><span class="line"><span class="comment">      *    所以 compareAndSetWaitStatus(pred, ws, SIGNAL);</span></span><br><span class="line"><span class="comment">      *    将 pred 的waitStatus 修改为 SIGNAL = -1</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line"></span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * &lt;br&gt;</span></span><br><span class="line"><span class="comment">      *  b. 第二条线程进来排队的时候，此时pred 就是上一个线程，就是第一个node</span></span><br><span class="line"><span class="comment">      *       上一条node进来的时候，pred.waitStatus 已经被修改为 -1了。</span></span><br><span class="line"><span class="comment">      *       所以 ws == Node.SIGNAL 成立 返回 true,parkAndCheckInterrupt() 阻塞当前线程</span></span><br><span class="line"><span class="comment">      *</span></span><br><span class="line"><span class="comment">      *</span></span><br><span class="line"><span class="comment">      *</span></span><br><span class="line"><span class="comment">      *</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line"></span><br><span class="line">     <span class="keyword">int</span> ws = pred.waitStatus;</span><br><span class="line">     <span class="keyword">if</span> (ws == Node.SIGNAL)</span><br><span class="line">         <span class="comment">/*</span></span><br><span class="line"><span class="comment">          * This node has already set status asking a release</span></span><br><span class="line"><span class="comment">          * to signal it, so it can safely park.</span></span><br><span class="line"><span class="comment">          */</span></span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">     <span class="keyword">if</span> (ws &gt; <span class="number">0</span>) &#123;</span><br><span class="line">         <span class="comment">/*</span></span><br><span class="line"><span class="comment">          * Predecessor was cancelled. Skip over predecessors and</span></span><br><span class="line"><span class="comment">          * indicate retry.</span></span><br><span class="line"><span class="comment">          */</span></span><br><span class="line">         <span class="keyword">do</span> &#123;</span><br><span class="line">             node.prev = pred = pred.prev;</span><br><span class="line">         &#125; <span class="keyword">while</span> (pred.waitStatus &gt; <span class="number">0</span>);</span><br><span class="line">         pred.next = node;</span><br><span class="line">     &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         <span class="comment">/*</span></span><br><span class="line"><span class="comment">          * waitStatus must be 0 or PROPAGATE.  Indicate that we</span></span><br><span class="line"><span class="comment">          * need a signal, but don&#x27;t park yet.  Caller will need to</span></span><br><span class="line"><span class="comment">          * retry to make sure it cannot acquire before parking.</span></span><br><span class="line"><span class="comment">          */</span></span><br><span class="line">         compareAndSetWaitStatus(pred, ws, Node.SIGNAL);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><strong>5、入队节点 流程图</strong><br><img src="http://thisforyou.cn:180/file/articleContentImg/2020-02-20/1582193140776.jpg" alt="长截图   20200220 下午06.05.18.jpg"></p><h4 id="1-14-解锁过程-new-FairSync-lock"><a href="#1-14-解锁过程-new-FairSync-lock" class="headerlink" title="1.14 解锁过程 new FairSync().lock()"></a>1.14 解锁过程 new FairSync().lock()</h4><p>unlock-&gt;sync.releas(1)-&gt;tryRelease(1)</p><p><strong>1、release(1)</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">release</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 如果cas 成功，唤醒队列的中中的排队线程</span></span><br><span class="line">    <span class="keyword">if</span> (tryRelease(arg)) &#123;</span><br><span class="line">        Node h = head;</span><br><span class="line">        <span class="keyword">if</span> (h != <span class="keyword">null</span> &amp;&amp; h.waitStatus != <span class="number">0</span>)</span><br><span class="line">            unparkSuccessor(h);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2、tryRelease(arg)</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">tryRelease</span><span class="params">(<span class="keyword">int</span> releases)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取state 值，减1，加锁的时候如果没有自旋 就是1，有自旋多一次也就多加一次1</span></span><br><span class="line">       <span class="keyword">int</span> c = getState() - releases;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 判断 当前线程 是不是自己的线程</span></span><br><span class="line">       <span class="keyword">if</span> (Thread.currentThread() != getExclusiveOwnerThread())</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> IllegalMonitorStateException();</span><br><span class="line">       <span class="keyword">boolean</span> free = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// state为0 ， 消除持有锁的线程，修改setState的值</span></span><br><span class="line">       <span class="keyword">if</span> (c == <span class="number">0</span>) &#123;</span><br><span class="line">           free = <span class="keyword">true</span>;</span><br><span class="line">           setExclusiveOwnerThread(<span class="keyword">null</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       setState(c);</span><br><span class="line">       <span class="keyword">return</span> free;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><strong>3、unparkSuccessor(Node)</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">unparkSuccessor</span><span class="params">(Node node)</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * If status is negative (i.e., possibly needing signal) try</span></span><br><span class="line"><span class="comment">     * to clear in anticipation of signalling.  It is OK if this</span></span><br><span class="line"><span class="comment">     * fails or if status is changed by waiting thread.</span></span><br><span class="line"><span class="comment">     */</span> </span><br><span class="line">    <span class="keyword">int</span> ws = node.waitStatus;</span><br><span class="line">    <span class="keyword">if</span> (ws &lt; <span class="number">0</span>)</span><br><span class="line">        修改为初始值</span><br><span class="line">        compareAndSetWaitStatus(node, ws, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Thread to unpark is held in successor, which is normally</span></span><br><span class="line"><span class="comment">     * just the next node.  But if cancelled or apparently null,</span></span><br><span class="line"><span class="comment">     * traverse backwards from tail to find the actual</span></span><br><span class="line"><span class="comment">     * non-cancelled successor.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Node s = node.next; <span class="comment">// head.next 指向的就是 队列的第一个node；</span></span><br><span class="line">    <span class="comment">// 线程 waitStatus&gt;0 线程被中断 火取消了，遍历找 最近一个 唤醒</span></span><br><span class="line">    <span class="keyword">if</span> (s == <span class="keyword">null</span> || s.waitStatus &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        s = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">// 第一个被唤醒了，唤醒队列中的第一个，遍历查找 最前的 waitStatus为&lt;= 0的节点，将其唤醒，调用。</span></span><br><span class="line">        <span class="keyword">for</span> (Node t = tail; t != <span class="keyword">null</span> &amp;&amp; t != node; t = t.prev)</span><br><span class="line">            <span class="keyword">if</span> (t.waitStatus &lt;= <span class="number">0</span>)</span><br><span class="line">                s = t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//  解除阻塞</span></span><br><span class="line">    <span class="keyword">if</span> (s != <span class="keyword">null</span>)</span><br><span class="line">        LockSupport.unpark(s.thread);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;ReentrantLock&quot;&gt;&lt;a href=&quot;#ReentrantLock&quot; class=&quot;headerlink&quot; title=&quot;ReentrantLock&quot;&gt;&lt;/a&gt;ReentrantLock&lt;/h1&gt;&lt;p&gt;&amp;emsp; &lt;code&gt;ReentrantLock&lt;/code&gt; 在1.6 之前，性能比 &lt;code&gt;Synchronized&lt;/code&gt;，好很多，因为实现同步，不需要到jvm的操作系统中处理，在java代码层面就可以处理掉，而Synchronized 是需要到操作系统处理。在1.6之后，Synchronized 进行了优化，在性上没有太多的差别。&lt;/p&gt;
    
    </summary>
    
    
      <category term="锁" scheme="http://lyj08.gitee.io/categories/%E9%94%81/"/>
    
      <category term="java" scheme="http://lyj08.gitee.io/categories/%E9%94%81/java/"/>
    
      <category term="并发编程" scheme="http://lyj08.gitee.io/categories/%E9%94%81/java/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="并发编程" scheme="http://lyj08.gitee.io/tags/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
      <category term="锁" scheme="http://lyj08.gitee.io/tags/%E9%94%81/"/>
    
      <category term="lock" scheme="http://lyj08.gitee.io/tags/lock/"/>
    
  </entry>
  
  <entry>
    <title>mysql主从同步（一主一从搭建）</title>
    <link href="http://lyj08.gitee.io/posts/c357a4cf/"/>
    <id>http://lyj08.gitee.io/posts/c357a4cf/</id>
    <published>2020-02-03T15:27:40.000Z</published>
    <updated>2020-12-30T09:27:20.392Z</updated>
    
    <content type="html"><![CDATA[<p><strong>主服务器</strong><br>|角色|主机|版本|<br>|-|-|-|<br>|主服务器|centos 7 106.14.226.138|5.7.11|<br>|从服务器（docker安装的mysql）|centos 7 thisforyou.cn| 5.7.28|</p><h3 id="1、主服务器-配置文件修改："><a href="#1、主服务器-配置文件修改：" class="headerlink" title="1、主服务器:配置文件修改："></a>1、主服务器:配置文件修改：</h3><p>编辑主数据苦的配置文件my.cnf</p><a id="more"></a><p>vim /etc/my.cnf</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">basedir=/usr/local/mysql</span><br><span class="line">datadir=/usr/local/mysql/data</span><br><span class="line">port=<span class="number">3306</span></span><br><span class="line"></span><br><span class="line"># 在原有基础上增加</span><br><span class="line">server_id=<span class="number">1</span></span><br><span class="line">log_bin=/usr/local/mysql/mysql-bin</span><br><span class="line">log_bin_index=/usr/local/mysql/mysql-bin-index</span><br><span class="line">binlog_format=mixed</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>参数解释</strong></p><ol><li>server-id：用来标识一个唯一的实例</li><li>log_bin：二进制日志文件的路径，mysql用户对该路径必须具有读写权限.</li><li>log_bin_index：二进制文件的索引路径，mysql用户对该路径必须具有读写权限.</li><li>binlog_format：表示二进制日志内容的记录方式，有三种方式：<br> a、row:基于行记录的方式，MySQL会将真实发生变化的行记录进日志，所以如果有update更新全表的操作，二进制日志文件会变得非常大。通常用于SQL语句复杂但是影响的行比较少的场景<br> b、statement:基于语句的方式，MySQL会将导致数据发生变化的SQL语句记录到日志文件中，适用于一条语句影响很多行的场景，但是注意当在主库上使用到了UUID，SYSDATE，FOUND_ROWS函数时，使用statement方式的复制会出现主从不一致的情况；<br> c、mixed:混合记录模式，MySQL会自动进行判断具体是使用row格式还是statement格式，通常情况下都使用mixed，由MySQL来进行判断</li></ol><p>log_bin、log_bin_index 所在路径授读写权限</p><p><code>chown 777 /usr/local/mysql/</code></p><h4 id="重启数据库，配置文件生效。"><a href="#重启数据库，配置文件生效。" class="headerlink" title="重启数据库，配置文件生效。"></a>重启数据库，配置文件生效。</h4><p><code>/etc/init.d/mysql restart</code></p><h4 id="登陆数据库-查看-binlog的二进制日志文件及位置点"><a href="#登陆数据库-查看-binlog的二进制日志文件及位置点" class="headerlink" title="登陆数据库 查看 binlog的二进制日志文件及位置点"></a>登陆数据库 查看 binlog的二进制日志文件及位置点</h4><p><code>show master status \G</code><br><img src="http://thisforyou.cn:180/file/articleContentImg/2020-02-03/1580712274877.png" alt="1.png"></p><p>记下来<br><strong>File:</strong>这个文件名称需要在从服务器上用到<br><strong>position:</strong> 也需要 </p><h3 id="2、将主数据库上的库，同步一份到从数据库上。"><a href="#2、将主数据库上的库，同步一份到从数据库上。" class="headerlink" title="2、将主数据库上的库，同步一份到从数据库上。"></a>2、将主数据库上的库，同步一份到从数据库上。</h3><p><img src="http://thisforyou.cn:180/file/articleContentImg/2020-02-03/1580712475044.png" alt="1.png"></p><h3 id="3、从服务器-修改上的mysql配置文件。"><a href="#3、从服务器-修改上的mysql配置文件。" class="headerlink" title="3、从服务器:修改上的mysql配置文件。"></a>3、从服务器:修改上的mysql配置文件。</h3><p>mysql已经安装，配置文件一挂载到宿主机目录中。<br><img src="http://thisforyou.cn:180/file/articleContentImg/2020-02-03/1580712645558.png" alt="1.png"></p><p><strong>修改</strong><br>vim mysql.conf.d/mysqld.cnf</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">port            = <span class="number">3307</span></span><br><span class="line">pid-file        = /<span class="keyword">var</span>/run/mysqld/mysqld.pid</span><br><span class="line">socket          = /<span class="keyword">var</span>/run/mysqld/mysqld.sock</span><br><span class="line">datadir         = /<span class="keyword">var</span>/lib/mysql</span><br><span class="line">max_connections=<span class="number">200</span></span><br><span class="line">character-set-server=utf8</span><br><span class="line">max_allowed_packet=1024M</span><br><span class="line">log-error      = /<span class="keyword">var</span>/log/mysql/error.log</span><br><span class="line">prevent assorted security risks</span><br><span class="line">symbolic-links=<span class="number">0</span></span><br><span class="line"></span><br><span class="line"># 新增</span><br><span class="line">server-id=<span class="number">2</span></span><br><span class="line">relay_log=/<span class="keyword">var</span>/lib/mysql/mysql-replay-bin</span><br><span class="line">relay_log_index=/<span class="keyword">var</span>/lib/mysql/mysql-replay-bin-index</span><br></pre></td></tr></table></figure><p><strong>relay_log、relay_log_index:</strong> 路径是容器中的目录</p><ol><li>relay_log： 就是从服务器上的binlog二进制文件,内容来自于，主服务器上的bin_log 内容。</li></ol><p>配置好后重启mysql</p><p><code>docker restart mysql/容器id</code></p><h4 id="进入mysql容器"><a href="#进入mysql容器" class="headerlink" title="进入mysql容器"></a>进入mysql容器</h4><p><code>docker exec -it mysql/容器id bash</code></p><p>可以看看 /var/lib/mysql/ 是不是多了 mysql-replay-bin.0000*;系列文件</p><h5 id="登陆mysql，并开启主从服务"><a href="#登陆mysql，并开启主从服务" class="headerlink" title="登陆mysql，并开启主从服务"></a>登陆mysql，并开启主从服务</h5><p><code>mysql -uroot -p # 登陆</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&gt;CHANGE MASTER TO </span><br><span class="line">master_host=<span class="string">&#x27;106.14.226.138&#x27;</span>,</span><br><span class="line">master_port=<span class="number">3306</span>,</span><br><span class="line">master_user=<span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">master_password=<span class="string">&#x27;123&#x27;</span>,</span><br><span class="line">master_log_file=<span class="string">&#x27;mysql-bin.000004&#x27;</span>,</span><br><span class="line">master_log_pos =<span class="number">1590</span>; </span><br><span class="line"></span><br><span class="line"># master_host: 主数据库的主机</span><br><span class="line"># master_user: 主数据的登陆密码（我使用的是root账户）</span><br><span class="line"># master_password: 密码</span><br><span class="line"># master_log_file: binlog二进制文件，前面在主数据看上看到的。`show master status \G` 可看</span><br><span class="line"># master_log_pos: 二进制文件的位置点 `show master status \G` 可看。</span><br><span class="line"></span><br><span class="line"># 敲下回车</span><br><span class="line"># 开启slave</span><br><span class="line">&gt; start slave;</span><br><span class="line">&gt; SHOW SLAVE STATUS \G 如下图：</span><br></pre></td></tr></table></figure><p><img src="http://thisforyou.cn:180/file/articleContentImg/2020-02-03/1580713776398.png" alt="1.png"></p><p>⚠️：Slave_IO_Running为Yes表示主从同步成功，如果为Connecting…，等待一会再看看，如果为No，表示同步失败；<br>⚠️：失败的原因有肯能是，账号密码不对，主数据看的端口，没有外放，不允许其他ip登陆，或者账号没有权限…</p><p>此时，可以去主数据库录取一条数据测试看看是否成功！</p><p>参考：<a href="https://segmentfault.com/a/1190000015282191">https://segmentfault.com/a/1190000015282191</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;主服务器&lt;/strong&gt;&lt;br&gt;|角色|主机|版本|&lt;br&gt;|-|-|-|&lt;br&gt;|主服务器|centos 7 106.14.226.138|5.7.11|&lt;br&gt;|从服务器（docker安装的mysql）|centos 7 thisforyou.cn| 5.7.28|&lt;/p&gt;
&lt;h3 id=&quot;1、主服务器-配置文件修改：&quot;&gt;&lt;a href=&quot;#1、主服务器-配置文件修改：&quot; class=&quot;headerlink&quot; title=&quot;1、主服务器:配置文件修改：&quot;&gt;&lt;/a&gt;1、主服务器:配置文件修改：&lt;/h3&gt;&lt;p&gt;编辑主数据苦的配置文件my.cnf&lt;/p&gt;
    
    </summary>
    
    
      <category term="mysql" scheme="http://lyj08.gitee.io/categories/mysql/"/>
    
    
      <category term="linux" scheme="http://lyj08.gitee.io/tags/linux/"/>
    
      <category term="mysql" scheme="http://lyj08.gitee.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>如何将私有jar,上传到自己的nexus私服里面去？</title>
    <link href="http://lyj08.gitee.io/posts/7bc7c52/"/>
    <id>http://lyj08.gitee.io/posts/7bc7c52/</id>
    <published>2020-01-29T21:33:26.000Z</published>
    <updated>2020-12-30T09:27:43.929Z</updated>
    
    <content type="html"><![CDATA[<h3 id="建立一个Starter"><a href="#建立一个Starter" class="headerlink" title="建立一个Starter"></a>建立一个Starter</h3><p>例如我的一个 类似 jpa 那样的正向工具生成starter<br><img src="http://www.memoryoverflow.cn/file/articleContentImg/2020-01-28/1580188010950.png" alt="3.png"></p><a id="more"></a><h3 id="主要配置-pom-xml"><a href="#主要配置-pom-xml" class="headerlink" title="主要配置 pom.xml"></a>主要配置 pom.xml</h3><p>在pom文件中加入 与 dependencies 标签同级</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;distributionManagement&gt;</span><br><span class="line">        &lt;repository&gt;</span><br><span class="line">          &lt;id&gt;releases&lt;/id&gt;</span><br><span class="line">          &lt;url&gt;http:<span class="comment">//thisforyou.cn:28081/repository/maven-releases/&lt;/url&gt;</span></span><br><span class="line">        &lt;/repository&gt;</span><br><span class="line">        &lt;snapshotRepository&gt;</span><br><span class="line">            &lt;id&gt;snapshots&lt;/id&gt;</span><br><span class="line">            &lt;url&gt;http:<span class="comment">//thisforyou.cn:28081/repository/maven-snapshots/&lt;/url&gt;</span></span><br><span class="line">        &lt;/snapshotRepository&gt;</span><br><span class="line">    &lt;/distributionManagement&gt;</span><br></pre></td></tr></table></figure><p>⚠️<br>1.id标签：随便起，但是maven仓库中的servers节点需要与这个一至<br>2.url：就是你的仓库地址：<a href="http://thisforyou.cn:28081/repository/maven-releases">http://thisforyou.cn:28081/repository/maven-releases</a><br>如下图所示：<br>两个url:一个是版本带-SNAPSHOT 的一个是不带的</p><p><strong>maven-releases</strong>：如果你的starter不version不带SNAPSHOT，就会上传到这个仓库中，代表的是正式稳定发布版本。<br><strong>maven-snapshots</strong>：带SNAPSHOT，就是快照版本，开发中的。</p><p>上面这两个仓库是要对应 nexus上的不然打包上传的时候，会报错 找不到对应的仓库的。</p><p><img src="http://www.memoryoverflow.cn/file/articleContentImg/2020-01-28/1580188417971.png" alt="5.png"></p><p><img src="http://www.memoryoverflow.cn/file/articleContentImg/2020-01-28/1580188348263.png" alt="4.png"></p><p>pom文件配置好后，就直接clean 然后 deploy;<br><img src="http://www.memoryoverflow.cn/file/articleContentImg/2020-01-28/1580188770288.png" alt="6.png"></p><p>查看仓库是否已经上传了：<br><img src="http://www.memoryoverflow.cn/file/articleContentImg/2020-01-28/1580188943240.png" alt="7.png"></p><p>点击进去看看，maven-public 会包含两个 一个 不带SNAPSHOT，一个带的，如果两个都上传了，就会有两个。所以这个时候的 maven 的 settings.xml配置 写maven-public就好了。<br><img src="http://www.memoryoverflow.cn/file/articleContentImg/2020-01-28/1580189053221.png" alt="8.png"></p><h3 id="maven-settings-xml配置"><a href="#maven-settings-xml配置" class="headerlink" title="maven settings.xml配置"></a>maven settings.xml配置</h3><h4 id="servers-节点"><a href="#servers-节点" class="headerlink" title="servers 节点"></a>servers 节点</h4><p>找到我们的本地开发的maven配置文件， conf/settiings.xml</p><p>打开编辑他：<br>找到 servers 节点： 填写如下信息<br>记住这个</p><p>*id 要与 pom.xml 那里的 id一至<br>*username 就是你的账号<br>*password 就是密码</p><p>配置好两个：一个快照的 一个 稳定版本的。</p><p><img src="http://www.memoryoverflow.cn/file/articleContentImg/2020-01-28/1580189212937.png" alt="9.png"></p><h4 id="mirrors-节点"><a href="#mirrors-节点" class="headerlink" title="mirrors 节点"></a>mirrors 节点</h4><p>id:随便写<br>name:随便写<br>url:填写nexus的maven-public地址即可<br><img src="http://www.memoryoverflow.cn/file/articleContentImg/2020-01-28/1580189591641.png" alt="11.png"></p><p><img src="http://www.memoryoverflow.cn/file/articleContentImg/2020-01-28/1580189468996.png" alt="10.png"></p><h3 id="从私服拉取我们的jar包"><a href="#从私服拉取我们的jar包" class="headerlink" title="从私服拉取我们的jar包"></a>从私服拉取我们的jar包</h3><p>打开另外一个项目：<br>填写好，刷新一下即可<br><img src="http://www.memoryoverflow.cn/file/articleContentImg/2020-01-28/1580189842062.png" alt="12.png"></p><p><strong><a href="http://github.com/memoryoverflow/forward-generation-starter">Starter 源码</a></strong> </p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;建立一个Starter&quot;&gt;&lt;a href=&quot;#建立一个Starter&quot; class=&quot;headerlink&quot; title=&quot;建立一个Starter&quot;&gt;&lt;/a&gt;建立一个Starter&lt;/h3&gt;&lt;p&gt;例如我的一个 类似 jpa 那样的正向工具生成starter&lt;br&gt;&lt;img src=&quot;http://www.memoryoverflow.cn/file/articleContentImg/2020-01-28/1580188010950.png&quot; alt=&quot;3.png&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Nexus" scheme="http://lyj08.gitee.io/categories/Nexus/"/>
    
    
      <category term="Nexus" scheme="http://lyj08.gitee.io/tags/Nexus/"/>
    
      <category term="maven" scheme="http://lyj08.gitee.io/tags/maven/"/>
    
  </entry>
  
  <entry>
    <title>加密文章测试</title>
    <link href="http://lyj08.gitee.io/posts/7e709353/"/>
    <id>http://lyj08.gitee.io/posts/7e709353/</id>
    <published>2020-01-21T02:14:11.000Z</published>
    <updated>2020-12-30T06:48:54.543Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="不好意思，密码没对哦，在检查检查呢！" data-whm="不好意思，信息无法验证！">  <script id="hbeData" type="hbeData" data-hmacdigest="f0f9c9cb2c90f3c8d8b638899d3e6bab0b7028795b0f7c3f96c9f31947f55a5b">4630436162ade97ba2718b7d0c4b3b63480c11f21f943edd569d93952dd2b428ca40d00edd08503bde446612a9b43ffa557648f22736556fdb8df232a70f5b62381872db0244c43c00526e1a08cf52221edf34128af95f6689fc9f8038d2d384d80553865a152ddd5e6208a870af3b5c9bc83d20b2dbb9eed9bf4345fcbd80740d0d96973b857ce18daf962a01b68ae1d5fbd8ee95919ff5e4e59e2389903324d011f36e647c7bfde1d377a277b639b7845f1864318dedde1881f738423184c1eda461211d6767b7282687bd23a77a8725cebce8f83995baff71092164b22479</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">嗨，请准确无误地输入密码查看哟（密码：123456）！</span>      </label>    </div>  </div></div><script src="/blog/lib/hbe.js"></script><link href="/blog/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      咦，这是一篇加密文章，好像需要输入密码才能查看呢！
    
    </summary>
    
    
      <category term="private" scheme="http://lyj08.gitee.io/categories/private/"/>
    
    
      <category term="加密文章" scheme="http://lyj08.gitee.io/tags/%E5%8A%A0%E5%AF%86%E6%96%87%E7%AB%A0/"/>
    
  </entry>
  
  <entry>
    <title>将jar包做成系统服务-linux</title>
    <link href="http://lyj08.gitee.io/posts/180c3fe2/"/>
    <id>http://lyj08.gitee.io/posts/180c3fe2/</id>
    <published>2020-01-15T22:26:52.000Z</published>
    <updated>2020-12-30T09:27:52.365Z</updated>
    
    <content type="html"><![CDATA[<p>SpringBoot的项目部署有好几种，有docker方式，有war包通过tomcat部署方式，也有 java -jar 的部署方式。</p><p><strong>本文 是基于 java -jar 来启动部署项目，做成系统服务，并且设置为开机自启</strong></p><h2 id="1、脚本编写"><a href="#1、脚本编写" class="headerlink" title="1、脚本编写"></a>1、脚本编写</h2><p>目录：/opt/project jar包和启动停止脚本都基于这里操作， 一下的操作命令 都基于 这个命令 之后 <code>cd  /opt/project</code> </p><ol><li><p>将项目打好的jar包，上传至服务器的某个路径中，比如：<code>/opt/project/boot-test.jar</code></p></li><li><p>在本目录下新建一个 启动脚本 <code>start.sh</code><br> 编写启动脚本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#!bin&#x2F;sh</span><br><span class="line">source &#x2F;etc&#x2F;profile</span><br><span class="line"># 启动命令 </span><br><span class="line">nohup&gt;&#x2F;opt&#x2F;project&#x2F;log java -jar &#x2F;opt&#x2F;project&#x2F;jar&#x2F;boot-test.jar 2&gt;&amp; 1 &amp;</span><br><span class="line">           </span><br></pre></td></tr></table></figure><a id="more"></a></li><li><p>停止脚本 stop.sh</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#!bin&#x2F;sh</span><br><span class="line">pid&#x3D;$(ps -ef | grep boot-test.jar | grep -v grep | awk &#39;&#123;print $2&#125;&#39;)</span><br><span class="line">kill -9 $pid</span><br><span class="line">echo $pid</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="4"><li>文件授权  </li></ol><p>如果脚本不授执行权限会出现 203 的错误</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chmod +x start.sh</span><br><span class="line">chmod +x stop.sh</span><br><span class="line">chmod +x boot-test.jar</span><br></pre></td></tr></table></figure><ol start="5"><li><p>编写服务文件</p><p><code>vim /etc/systemd/system/boot-test.serivce</code></p><p>填写内容： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description&#x3D;blog-service</span><br><span class="line"></span><br><span class="line">After&#x3D;network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line"></span><br><span class="line">Type&#x3D;forking</span><br><span class="line"></span><br><span class="line">ExecStart&#x3D;&#x2F;opt&#x2F;project&#x2F;blog&#x2F;start.sh</span><br><span class="line">ExecStop&#x3D;&#x2F;opt&#x2F;project&#x2F;stop.sh</span><br><span class="line"></span><br><span class="line">PrivateTmp&#x3D;true</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line"></span><br><span class="line"> WantedBy&#x3D;multi-user.target</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h2 id="2、特别注意"><a href="#2、特别注意" class="headerlink" title="2、特别注意"></a>2、特别注意</h2><p>  <strong>203 错误原因:</strong></p><ol><li>start.sh 和 stop.sh 不授予执行权限。 解决：<code>chmod +x start.sh &amp;&amp; chmod +x stop.sh</code></li><li>脚本头部没有写 <code>#!bin/sh</code>。vim 加上即可</li><li>jar包没有执行权限。 <code>chmod +x boot-test.jar</code><br><img src="http://thisforyou.cn:180/file/articleContentImg/2020-02-26/1582702669438.png" alt="5.png"></li></ol><p><strong>其它错误原因：</strong><br> <img src="http://thisforyou.cn:180/file/articleContentImg/2020-02-26/1582702532689.png" alt="1.png"><br>例如执行完启动命令，后查看状态 <code>systemctl status boot-test.service</code></p><p>启动命题提示成 <code>status=0/SUCCESS</code> 但是失败。</p><p>这种情况可能是：执行的 jar包所需要的环境没有。无法启动，jar包所需要的环境是 java环境。</p><p>解决办法：</p><ol><li>在启动脚本 的 <code>#!bin/sh</code> 下面加上 环境变量 <code>source /etc/profile</code> 此命令前提是 Java已经在这文件中配置了环境变量；<br>或者 export <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME&#x3D;&#x2F;usr&#x2F;local&#x2F;software&#x2F;java&#x2F;jdk</span><br><span class="line">export </span><br><span class="line">PATH&#x3D;$JAVA_HOME&#x2F;bin:$PATH:&#x2F;opt&#x2F;project&#x2F;Hexo&#x2F;node_modules&#x2F;.bin:$PATH</span><br></pre></td></tr></table></figure></li><li>在<code>/etc/systemd/system/boot-test.service</code>中加入环境变量。<br>更多配置 <a href="http://www.jinbuguo.com/systemd/systemd.service.html">移步 System.service 配置详情说明</a></li></ol><p>二者选一即可。</p><h2 id="3、设置开机自启"><a href="#3、设置开机自启" class="headerlink" title="3、设置开机自启"></a>3、设置开机自启</h2><p><code>systemctl enable boot-test</code></p><p>启动：<br><code>system start boot-test</code></p><p>查看状态：<br><code>system stop boot-test</code><br><img src="http://thisforyou.cn:180/file/articleContentImg/2020-02-26/1582702506427.png" alt="start.png"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;SpringBoot的项目部署有好几种，有docker方式，有war包通过tomcat部署方式，也有 java -jar 的部署方式。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;本文 是基于 java -jar 来启动部署项目，做成系统服务，并且设置为开机自启&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;1、脚本编写&quot;&gt;&lt;a href=&quot;#1、脚本编写&quot; class=&quot;headerlink&quot; title=&quot;1、脚本编写&quot;&gt;&lt;/a&gt;1、脚本编写&lt;/h2&gt;&lt;p&gt;目录：/opt/project jar包和启动停止脚本都基于这里操作， 一下的操作命令 都基于 这个命令 之后 &lt;code&gt;cd  /opt/project&lt;/code&gt; &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;将项目打好的jar包，上传至服务器的某个路径中，比如：&lt;code&gt;/opt/project/boot-test.jar&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在本目录下新建一个 启动脚本 &lt;code&gt;start.sh&lt;/code&gt;&lt;br&gt; 编写启动脚本&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;#!bin&amp;#x2F;sh&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;source &amp;#x2F;etc&amp;#x2F;profile&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 启动命令 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;nohup&amp;gt;&amp;#x2F;opt&amp;#x2F;project&amp;#x2F;log java -jar &amp;#x2F;opt&amp;#x2F;project&amp;#x2F;jar&amp;#x2F;boot-test.jar 2&amp;gt;&amp;amp; 1 &amp;amp;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="linux" scheme="http://lyj08.gitee.io/categories/linux/"/>
    
    
      <category term="linux" scheme="http://lyj08.gitee.io/tags/linux/"/>
    
      <category term="shell" scheme="http://lyj08.gitee.io/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>反射实战，基于注解的形式，带你实现类似jpa的正向生成数据库表的starter</title>
    <link href="http://lyj08.gitee.io/posts/740692cb/"/>
    <id>http://lyj08.gitee.io/posts/740692cb/</id>
    <published>2020-01-15T06:39:15.000Z</published>
    <updated>2020-12-30T09:27:39.930Z</updated>
    
    <content type="html"><![CDATA[<p>::: hljs-left</p><h1 id="反射-实战"><a href="#反射-实战" class="headerlink" title="反射-实战"></a>反射-实战</h1><p>:::</p><blockquote><p><strong>==脱离实战的讲解 都是 流氓，我们即将进行反射的实战==</strong></p></blockquote><blockquote><blockquote><p><strong>我们将实现一个 根据 实体 bean 加上我们的自定义注解 正向生成向库里 生成对应的表的一个 starter (SpringBoot )</strong></p></blockquote></blockquote><p><strong>我们的项目得先引入依赖</strong></p><a id="more"></a><p>mysql 驱动:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">   &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">    &lt;scope&gt;runtime&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="1、建立好我们的项目（SpringBoot）"><a href="#1、建立好我们的项目（SpringBoot）" class="headerlink" title="1、建立好我们的项目（SpringBoot）"></a>1、建立好我们的项目（SpringBoot）</h1><p>  <img src="https://www.memoryoverflow.cn/file/articleContentImg/2019-09-20/1568957376173.png" alt="image.png"></p><p>  <img src="https://www.memoryoverflow.cn/file/articleContentImg/2019-09-20/1568955195605.png" alt="image.png"></p><p>  <strong>demo-test  是测试项目</strong>\n<strong>forward-generation-starter 就是一个自己造的一个starter,打了一个jar 可以自行引入</strong> </p><h1 id="2、自定义注解说明"><a href="#2、自定义注解说明" class="headerlink" title="2、自定义注解说明"></a>2、自定义注解说明</h1><p><img src="https://www.memoryoverflow.cn/file/articleContentImg/2019-09-20/1568957448890.png" alt="image.png"></p><ol><li><p><strong><code>@EnableAutoForwardGeneration</code></strong> 是否开启主动生成表操作 放在App启动类里面</p><p><code>OnOff()  true:开启，false:不开启</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;br&gt;</span></span><br><span class="line"><span class="comment"> * 开启正向生成操作</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 永健</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2019/5/7 14:21</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"> <span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"> <span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"> <span class="meta">@Documented</span>\n<span class="meta">@Import(RegisterScaner.class)</span></span><br><span class="line"> <span class="keyword">public</span> <span class="meta">@interface</span> EnableAutoForwardGeneration</span><br><span class="line"> &#123;</span><br><span class="line">     <span class="comment">// 指定实体类所在的包</span></span><br><span class="line">     <span class="function">String <span class="title">entityPackages</span><span class="params">()</span></span>;</span><br><span class="line">     <span class="comment">// 是否开启表自动生成</span></span><br><span class="line">     <span class="function"><span class="keyword">boolean</span>  <span class="title">OnOff</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">true</span></span>;</span><br><span class="line">     &#125; </span><br></pre></td></tr></table></figure><p>2.<strong><code>@LColumn</code> 列属性注解</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;br&gt;</span></span><br><span class="line"><span class="comment"> * 列注解</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 永健</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2019/5/7 14:37</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"> <span class="meta">@Target(ElementType.FIELD)</span></span><br><span class="line"> <span class="meta">@Documented</span></span><br><span class="line"> <span class="keyword">public</span> <span class="meta">@interface</span> LColumn</span><br><span class="line"> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;br&gt;</span></span><br><span class="line"><span class="comment">     * 列长度 String 类型的默认为</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">     <span class="function"><span class="keyword">int</span> <span class="title">width</span><span class="params">()</span> <span class="keyword">default</span> 0</span>;</span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * &lt;br&gt;</span></span><br><span class="line"><span class="comment">      * 指定数据库类型</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">      <span class="function">ColumnType <span class="title">type</span><span class="params">()</span> <span class="keyword">default</span> ColumnType.FIELDTYPE</span>;</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * &lt;br&gt;</span></span><br><span class="line"><span class="comment">    * 列是否默认为空</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">boolean</span> <span class="title">isNull</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">true</span></span>;</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * &lt;br&gt;</span></span><br><span class="line"><span class="comment">    * 是否有默认值</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function">String <span class="title">defaultValue</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>;</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * &lt;br&gt;</span></span><br><span class="line"><span class="comment">    * 注释</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function">String <span class="title">comment</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>3.<strong><code>@LIncrement</code></strong></p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;br&gt;</span></span><br><span class="line"><span class="comment"> * 是否自增</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 永健</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2019/5/7 15:01</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(ElementType.FIELD)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> LIncrement</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function">IdType <span class="title">type</span><span class="params">()</span> <span class="keyword">default</span> IdType.NONE</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>4.<strong><code>@LNotTableField</code> 排除非表中字段</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;br&gt;</span></span><br><span class="line"><span class="comment"> * 排除非表中字段</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 永健</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2019/5/7 15:09</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"> <span class="meta">@Target(ElementType.FIELD)</span></span><br><span class="line"> <span class="meta">@Documented</span>\npublic <span class="meta">@interface</span> LNotTableField</span><br><span class="line"> &#123;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>5.<strong><code>LTable</code> 实体注解 指定表名</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;br&gt;</span></span><br><span class="line"><span class="comment"> * 实体注解 指定表名否则转下划线</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 永健</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2019/5/7 15:23</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"> <span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"> <span class="meta">@Documented</span>\npublic <span class="meta">@interface</span> LTable</span><br><span class="line"> &#123;</span><br><span class="line">   <span class="function">String <span class="title">name</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>6.<strong><code>@LTableId 主键注解</code></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;br&gt;</span></span><br><span class="line"><span class="comment"> * 主键注解</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 永健</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2019/5/7 14:36</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"> <span class="meta">@Target(ElementType.FIELD)</span></span><br><span class="line"> <span class="meta">@Documented</span></span><br><span class="line"> <span class="keyword">public</span> <span class="meta">@interface</span> LTableId\n&#123;</span><br><span class="line">   <span class="function">IdType <span class="title">type</span><span class="params">()</span> <span class="keyword">default</span> IdType.NONE</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h1 id="3、注解使用例子"><a href="#3、注解使用例子" class="headerlink" title="3、注解使用例子"></a>3、注解使用例子</h1><p><strong>实体上的注解</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;br&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 永健</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2019/5/7 17:31</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="meta">@LTable(name = &quot;tb_user&quot;)</span></span><br><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">extends</span> <span class="title">BaseEntity</span></span></span><br><span class="line"><span class="class"> </span>&#123;</span><br><span class="line">     <span class="meta">@LTableId(type = IdType.AUTO)</span></span><br><span class="line">     <span class="meta">@LColumn(width = 11,type = ColumnType.INT,isNull = false,comment = &quot;主键&quot;)</span></span><br><span class="line">     <span class="keyword">private</span> Integer id;</span><br><span class="line">     <span class="meta">@LColumn(width = 64,isNull = true,comment = &quot;姓名&quot;,type = ColumnType.VARCHAR)</span></span><br><span class="line">     <span class="keyword">private</span> String name;</span><br><span class="line">     <span class="meta">@LColumn(width = 0,isNull = true,comment = &quot;出生日期&quot;)</span></span><br><span class="line">     <span class="keyword">private</span> Date birthDay;</span><br><span class="line">     <span class="meta">@LNotTableField</span></span><br><span class="line">     <span class="keyword">private</span> Company company;</span><br><span class="line">     <span class="comment">// get set 省略</span></span><br><span class="line">     &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>App 启动类加上注解</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableAutoForwardGeneration(entityPackages=&quot;com.example.demo.entity&quot;,OnOff = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoApplication</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">            SpringApplication.run(DemoApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <strong>application.yml 配置</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  datasource:</span><br><span class="line">     driver-class-name: com.mysql.cj.jdbc.Driver</span><br><span class="line">     url: jdbc:mysql:<span class="comment">//127.0.0.1:3307/test?useUnicode=true&amp;characterEncoding=utf-8&amp;serverTimezone=GMT%2B8</span></span><br><span class="line">     username: root</span><br><span class="line">     password: tiger</span><br><span class="line">     #update 在原有的基础上更新,create：删除原来的表 根据实体信息重新建</span><br><span class="line">     ddl-auto: create</span><br></pre></td></tr></table></figure><h1 id="4、思路"><a href="#4、思路" class="headerlink" title="4、思路"></a>4、思路</h1><p>&emsp;其实我是学 mybatis的初始化过程的，之前有看过mybatis 源码，mybatis 也是利用Spring的扫描接口 去扫描的 mappeer.java  文件；<a href="https://www.memoryoverflow.cn/blog/#/index/article/home/detail/4e5fbdf81f224085889eab51b06c6cc2">mybatis mappe接口扫描</a></p><p>&emsp;使用SpringBoot 自定义一个starter,利用Spring的ClassPathBeanDefinitionScanner.java 的 doScan扫描接口，自定义扫描规则，也就是加了@LTable 注解的实体；</p><p>&emsp;在starter 中的LyjAutoConfigure 实现于 <code>InitializingBean.java</code> 中的<code>afterPropertiesSet</code> 方法，在初始化bean的时候，此方法会被执行，所以这个时候我们就可以通过<code>ConfigurableListableBeanFactory.java</code> 中的方法 <code>getBeansWithAnnotation(Class&lt;? extends Annotation&gt; var1)</code> 拿到加了我们自定义注解的bean了。</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterPropertiesSet</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 获取自定义类注解的类</span></span><br><span class="line">    List&lt;Class&lt;?&gt;&gt; classes = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    Map&lt;String, Object&gt; map = beanFactory.getBeansWithAnnotation(LTable.class);</span><br><span class="line">    <span class="keyword">for</span> (Map.Entry&lt;String, Object&gt; entry : map.entrySet())</span><br><span class="line">    &#123;</span><br><span class="line">        classes.add(entry.getValue().getClass());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (classes.size()&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ConfigureEntityTable configureEntity = <span class="keyword">new</span> ConfigureEntityTable();</span><br><span class="line"></span><br><span class="line">    configureEntity.setProperties(<span class="keyword">this</span>.mySqlProperties);</span><br><span class="line">    <span class="comment">// 解析实体</span></span><br><span class="line">    EntityParserHandler parserHandler = <span class="keyword">new</span> EntityParserHandler(configureEntity);</span><br><span class="line">    parserHandler.parser(classes);</span><br><span class="line">    <span class="comment">// 读取数据库中的表信息</span></span><br><span class="line">    TableParserHandler tableParserHandler = <span class="keyword">new</span> TableParserHandler(configureEntity,ddlExecutor);</span><br><span class="line">    tableParserHandler.parser();</span><br><span class="line">    DataBaseServiceHandler serviceHandler = <span class="keyword">new</span> DataBaseServiceHandler(<span class="keyword">this</span>.ddlExecutor,configureEntity);</span><br><span class="line">    serviceHandler.excute();</span><br><span class="line">    logger.info(<span class="string">&quot;表已更新--------&gt;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>拿到了我们的bean的信息，这会就可以通过反射，去读取类的相关信息了，比如 类上的注解啊，属性注解啊，等。这会就可以通过这个信息，属性名，转驼峰，和加上注解的一些配置值，就可以生成 我们的DDl语句了，接下来就是 连上数据库了 执行我们的sql语句去见表了。</p><p> <strong>⚠️ 只是一个demo ，对反射的实践操作</strong><br>项目源码 <a href="https://github.com/memoryoverflow/forward-generation-starter">github 源码</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;::: hljs-left&lt;/p&gt;
&lt;h1 id=&quot;反射-实战&quot;&gt;&lt;a href=&quot;#反射-实战&quot; class=&quot;headerlink&quot; title=&quot;反射-实战&quot;&gt;&lt;/a&gt;反射-实战&lt;/h1&gt;&lt;p&gt;:::&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;==脱离实战的讲解 都是 流氓，我们即将进行反射的实战==&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;我们将实现一个 根据 实体 bean 加上我们的自定义注解 正向生成向库里 生成对应的表的一个 starter (SpringBoot )&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;我们的项目得先引入依赖&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://lyj08.gitee.io/categories/java/"/>
    
    
      <category term="反射" scheme="http://lyj08.gitee.io/tags/%E5%8F%8D%E5%B0%84/"/>
    
      <category term="SpringBoot starter" scheme="http://lyj08.gitee.io/tags/SpringBoot-starter/"/>
    
  </entry>
  
  <entry>
    <title>java反射重中之重，高级编程（你会造轮子吗，造轮子，必备知识，你懂多少?）</title>
    <link href="http://lyj08.gitee.io/posts/undefined/"/>
    <id>http://lyj08.gitee.io/posts/undefined/</id>
    <published>2019-12-23T00:04:12.000Z</published>
    <updated>2020-12-30T09:26:57.550Z</updated>
    
    <content type="html"><![CDATA[<p>::: hljs-center</p><h1 id="反射的使用"><a href="#反射的使用" class="headerlink" title="反射的使用"></a>反射的使用</h1><p>:::</p><p><strong>java 开发中 任何的一个框架 都离不开发射机制，比如我们最熟悉的 框架<code>Mybatis</code>、<code>Spring</code>…</strong> 几乎所有封装的  框架中都离不开它，想要做架构，做工具、写一个 starter 都离不开反射机制。 所以说在开发中，反射机制运用得当可以省下很多代码。<br><strong>接下来个人学习的见解</strong><br><strong>获取当前类的相关信息</strong></p><h1 id="反射机制"><a href="#反射机制" class="headerlink" title="反射机制"></a>反射机制</h1><p> &emsp; 反射应该是 JVM读取相应类的 字节码文件；在类的运行状态中，通过字节码文件也就是.class文件，获取当前类的所有信息，包括 成员变量，私有、共有的方法、构造函数、以及相关的注解等。</p><h1 id="反射的三种方式"><a href="#反射的三种方式" class="headerlink" title="反射的三种方式"></a>反射的三种方式</h1><ol><li>对于任意一个类，都能够知道这个类的所有属性和方法 <code>User.class</code></li><li>对于任意一个类的全路径名，都能够知道这个类的所有属性和方法 <code>class.forName(&quot;com.baidu.User&quot;)</code></li><li>对于任意一个实例对象，都能够调用它的任意一个方法和属性 <code>(new User()).getClass()</code></li><li><h1 id="反射之构造方法"><a href="#反射之构造方法" class="headerlink" title="反射之构造方法"></a>反射之构造方法</h1><h2 id="1-getConstructor-Class-lt-gt-…-parameterTypes"><a href="#1-getConstructor-Class-lt-gt-…-parameterTypes" class="headerlink" title="1.getConstructor(Class&lt;?&gt;… parameterTypes)"></a>1.getConstructor(Class&lt;?&gt;… parameterTypes)</h2>&emsp; 反射有三种方式，我们就采用其中一种  <code>(new User()).getClass()</code><br>通过 反射 拿到User的构造器 实例化 一个user,</li></ol><a id="more"></a><p> <strong><code>一个实体类 User.java</code></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">   <span class="keyword">private</span> Integer id;</span><br><span class="line">   <span class="keyword">private</span> String name;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(Integer id)</span></span></span><br><span class="line"><span class="function">   </span>&#123;        <span class="keyword">this</span>.id = id;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(Integer id, String name)</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.id = id;</span><br><span class="line">       <span class="keyword">this</span>.name = name;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String name)</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.name = name;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> id;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.id = id;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> name;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.name = name;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">               <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">               <span class="string">&quot;, name=&quot;</span> + name + “</span><br><span class="line">               <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><strong><code>main() 方法：</code></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        System.out.println(<span class="string">&quot;new User():&quot;</span> + user);</span><br><span class="line">        Class&lt;? extends User&gt; aClass = user.getClass();</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            Constructor&lt;? extends User&gt; constructor = aClass.getConstructor(Integer.class, String.class);</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                User newUser = constructor.newInstance(<span class="number">1</span>, <span class="string">&quot;张三&quot;</span>);</span><br><span class="line">                System.out.println(<span class="string">&quot;反射构造到的 newUser:&quot;</span>+newUser);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (InstantiationException e)</span><br><span class="line">            &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (IllegalAccessException e)</span><br><span class="line">            &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (InvocationTargetException e)</span><br><span class="line">            &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (NoSuchMethodException e)</span><br><span class="line">        &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> User():User&#123;id=<span class="keyword">null</span>, name=<span class="string">&#x27;null&#x27;</span>&#125;</span><br><span class="line">反射拿到的 newUser:User&#123;id=<span class="number">1</span>, name=<span class="string">&#x27;张三&#x27;</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="2-getConstructors"><a href="#2-getConstructors" class="headerlink" title="2.getConstructors();"></a>2.getConstructors();</h2><p><strong>获取当前类的所有public构造器</strong><br>这次我们使用 <code>User.class 获取字节码文件</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Class&lt;User&gt; aClass = User.class;</span><br><span class="line">Constructor&lt;?&gt;[] constructors = aClass.getConstructors();</span><br><span class="line"><span class="keyword">for</span> (Constructor&lt;?&gt; constructor : constructors)</span><br><span class="line">&#123;</span><br><span class="line">    System.out.println(constructor);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果： 共有四个构造器，每个构造器的参数，都不一样，要获取指定的构造器，就使用<code>getConstructor(Class&lt;?&gt;... parameterTypes)</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> reflect.User(java.lang.String)</span><br><span class="line"><span class="keyword">public</span> reflect.User(java.lang.Integer,java.lang.String)</span><br><span class="line"><span class="keyword">public</span> reflect.User(java.lang.Integer)</span><br><span class="line"><span class="keyword">public</span> reflect.User()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong><code>getDeclaredConstructors()</code></strong> 获取类的所有构造方法 public、private</p><h1 id="反射之获取类相关方法"><a href="#反射之获取类相关方法" class="headerlink" title="反射之获取类相关方法"></a>反射之获取类相关方法</h1><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>getMethod(String name, Class…&lt;?&gt; parameterTypes)</td><td>获取某个方法</td></tr><tr><td>getMethods()</td><td>获取所有的public方法</td></tr><tr><td>getDeclaredMethod(String name, Class…&lt;?&gt; parameterTypes)</td><td>获取所有的public的某个方法</td></tr><tr><td>getDeclaredMethods()</td><td>获取所有的public private的方法</td></tr></tbody></table><h2 id="1-getMethod-String-name-Class…-lt-gt-parameterTypes"><a href="#1-getMethod-String-name-Class…-lt-gt-parameterTypes" class="headerlink" title="1.getMethod(String name, Class…&lt;?&gt; parameterTypes)"></a>1.getMethod(String name, Class…&lt;?&gt; parameterTypes)</h2><p>name:方法名称；<br>parameterTypes:当前方法的参数类型；<br>比如我获取 setName() 这个方法,然后调用他set一个值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Class&lt;User&gt; aClass = User.class;</span><br><span class="line">Method method = aClass.getMethod(<span class="string">&quot;setName&quot;</span>, String.class);</span><br><span class="line">Constructor&lt;User&gt; constructor = aClass.getConstructor();</span><br><span class="line">User user = constructor.newInstance();</span><br><span class="line">System.out.println(<span class="string">&quot;set值前：&quot;</span> + user);</span><br><span class="line">method.invoke(user, <span class="string">&quot;库里&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;set值后：&quot;</span> + user);</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">set值前：User&#123;id=<span class="keyword">null</span>, name=<span class="string">&#x27;null&#x27;</span>&#125;</span><br><span class="line">set值后：User&#123;id=<span class="keyword">null</span>, name=<span class="string">&#x27;库里&#x27;</span>&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="反射之获取类属性"><a href="#反射之获取类属性" class="headerlink" title="反射之获取类属性"></a>反射之获取类属性</h1><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>getField(String name)</td><td>获得具体的public属性对象</td></tr><tr><td>getFields()</td><td>获得所有public的属性对象</td></tr><tr><td>getDeclaredField(String name)</td><td>获取某个属性</td></tr><tr><td>getDeclaredFields()</td><td>获取所有的public private的方法</td></tr></tbody></table><p><img src="http://www.memoryoverflow.cn/file/articleContentImg/2019-09-19/1568899199823.png" alt="image.png"></p><h2 id="1-getField-String-name"><a href="#1-getField-String-name" class="headerlink" title="1.getField(String name)"></a>1.getField(String name)</h2><p><img src="http://www.memoryoverflow.cn/file/articleContentImg/2019-09-19/1568899403696.png" alt="image.png"><strong><code>getField(String name)</code></strong>  方法 获取私有属性是抛出 找不到属性异常的。因为当前方法是 获取public 修饰的属性。 name 属性是private修饰的。 </p><h2 id="2-getDeclaredField-String-name-n"><a href="#2-getDeclaredField-String-name-n" class="headerlink" title="2.getDeclaredField(String name)\n"></a>2.getDeclaredField(String name)\n<img src="http://www.memoryoverflow.cn/file/articleContentImg/2019-09-19/1568899620184.png" alt="image.png"></h2><p><code>getDeclaredField(String name)</code> 能获取所有属性输出正确结果。</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>getAnnotation(Class<A> annotationClass)</td><td>返回该类中与参数类型匹配的公有注解对象</td></tr><tr><td>getAnnotations()</td><td>返回该类所有的公有注解对象</td></tr><tr><td>getDeclaredAnnotation(Class<A> annotationClass)</td><td>返回该类中与参数类型匹配的所有注解对象</td></tr><tr><td>getDeclaredAnnotations()</td><td>返回该类所有的注解对象</td></tr></tbody></table><h1 id="反射之获取类中相关注解"><a href="#反射之获取类中相关注解" class="headerlink" title="反射之获取类中相关注解"></a>反射之获取类中相关注解</h1><h2 id="1-类注解-ClassAnotation-java"><a href="#1-类注解-ClassAnotation-java" class="headerlink" title="1.类注解 ClassAnotation.java"></a>1.类注解 ClassAnotation.java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *  一个类注解</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 永健</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2019-09-19 21:30</span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span>\n<span class="meta">@Target(&#123;ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ClassAnotation</span><br><span class="line">&#123;</span><br><span class="line">   <span class="function">String <span class="title">desrc</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-getAnnotation-Class-annotationClass"><a href="#1-getAnnotation-Class-annotationClass" class="headerlink" title="1.getAnnotation(Class annotationClass)"></a>1.getAnnotation(Class<A> annotationClass)</h3><p><strong>我们定义一个类注解，这个注解用来说明这个类是干什么的，把它放在类上面去</strong><br><img src="http://www.memoryoverflow.cn/file/articleContentImg/2019-09-19/1568900093273.png" alt="image.png"></p><p><strong>然后我们 通过反射获取这个注解相关信息</strong></p><p><img src="http://www.memoryoverflow.cn/file/articleContentImg/2019-09-19/1568900207255.png" alt="image.png"></p><h3 id="2-FileAnnotation-java"><a href="#2-FileAnnotation-java" class="headerlink" title="2.FileAnnotation.java"></a>2.FileAnnotation.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span>\n<span class="meta">@Target(&#123;ElementType.FIELD&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> FileAnnotation</span><br><span class="line">&#123;</span><br><span class="line">   <span class="function">String <span class="title">desrc</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://www.memoryoverflow.cn/file/articleContentImg/2019-09-19/1568900395313.png" alt="image.png"></p><p><strong>模拟模拟修改加了注解的属性值</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IllegalAccessException</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 假如 我在做 user 插入操作的时候，id 这个主键的 生成策略 是我们自定义的id</span></span><br><span class="line"><span class="comment">     * 比如 uuid 之类的 。  我们这个时候 在需要的类 需要的字段上 加上我们的自定义注解</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 做不同的操作；</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 这个我这个user id 不是自增的 是我自定义的主键</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 我在 插入的时候  就不需要自己 setId(12328428342);了 通过反射 统一处理</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 或者 创建时间 更新时间这种操作，每次更新都需要手动操作 烦死人了。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 这个时候我们用反射来处理 在mybatis 中 就可以使用拦截器 来修改参数值 。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *    此处模拟一下 id 的处理</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    User user = <span class="keyword">new</span> User(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">    Class&lt;? extends User&gt; aClass = user.getClass();</span><br><span class="line">    <span class="comment">// 获取所有的属性</span></span><br><span class="line">    Field[] fields = aClass.getDeclaredFields();</span><br><span class="line">    System.out.println(<span class="string">&quot;给 id set 值前：&quot;</span>+user);</span><br><span class="line">    <span class="comment">// 看看哪个属性 加了 我的注解</span></span><br><span class="line">    <span class="keyword">for</span> (Field field : fields)</span><br><span class="line">    &#123;</span><br><span class="line">        FileAnnotation annotation = field.getAnnotation(FileAnnotation.class);</span><br><span class="line">        <span class="keyword">if</span> (annotation != <span class="keyword">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 这是id 属性 我需要set 值</span></span><br><span class="line">            String desrc = annotation.desrc();</span><br><span class="line">            String fieldName = field.getName();</span><br><span class="line">            System.out.println(<span class="string">&quot;属性：&quot;</span> + fieldName + <span class="string">&quot; 加了 FileAnnotation&quot;</span>);</span><br><span class="line">            System.out.println(desrc);</span><br><span class="line">            field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            field.set(user,<span class="number">100000</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;给 id set 值后：&quot;</span>+ user);</span><br><span class="line">            <span class="comment">// 继续插入操作</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>输出结果：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">给 id set 值前：User&#123;id=<span class="keyword">null</span>, name=<span class="string">&#x27;张三&#x27;</span>&#125;</span><br><span class="line">属性：id 加了 FileAnnotation这是一个主键给 id set 值后：User&#123;id=<span class="number">100000</span>, name=<span class="string">&#x27;张三&#x27;</span>&#125;</span><br></pre></td></tr></table></figure><p><strong>其实 Spring 框架的 @Autowired @Bean 等注解 都是基于反射机制的；依赖注入也是这个原理，不信我就简单给你试试看；  @Autowired 注解怎么注入一个对像的。</strong></p><h3 id="3-反射实现-Autowired-依赖注入"><a href="#3-反射实现-Autowired-依赖注入" class="headerlink" title="3.反射实现 @Autowired 依赖注入"></a>3.反射实现 @Autowired 依赖注入</h3><p>1.<strong>建一个service<code>AppleService.java</code> 和 <code>@Autowired</code> 这个注解不是Spring中的那个 是我们自己的哦</strong></p><p><img src="http://www.memoryoverflow.cn/file/articleContentImg/2019-09-19/1568901534036.png" alt="image.png"> </p><p><strong><code>2.@Autowired</code></strong></p><p><img src="http://www.memoryoverflow.cn/file/articleContentImg/2019-09-19/1568901616028.png" alt="image.png"></p><p><strong>3.加入到 User 属性中</strong></p><p><img src="http://www.memoryoverflow.cn/file/articleContentImg/2019-09-19/1568901710453.png" alt="image.png"></p><p><strong>4.main 方法模拟 Spring 启动 将 AppleService 实例注入到User中的 appleService 中，再调用 eat() 的方法</strong></p><p><img src="1" alt="image.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IllegalAccessException, NoSuchMethodException, InvocationTargetException, InstantiationException</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">    Class&lt;? extends User&gt; aClass = user.getClass();</span><br><span class="line">    <span class="comment">// 获取所有的属性</span></span><br><span class="line">    Field[] fields = aClass.getDeclaredFields();</span><br><span class="line">    <span class="comment">// 看看哪个属性 加了 我的注解</span></span><br><span class="line">    <span class="keyword">for</span> (Field field : fields)</span><br><span class="line">    &#123;</span><br><span class="line">        Autowired annotation = field.getAnnotation(Autowired.class);</span><br><span class="line">        <span class="keyword">if</span> (annotation != <span class="keyword">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 获得这个属性了吧</span></span><br><span class="line">            Class&lt;? extends Field&gt; appClass = field.getClass();</span><br><span class="line">            <span class="comment">// 获取属性的类型</span></span><br><span class="line">            Class&lt;?&gt; type = field.getType();</span><br><span class="line">            <span class="comment">// 构造</span></span><br><span class="line">            Constructor&lt;?&gt; constructor = type.getConstructor();</span><br><span class="line">            <span class="comment">// new 一个实例</span></span><br><span class="line">            Object appleService = constructor.newInstance();</span><br><span class="line">           <span class="comment">// 赋值 依赖注入</span></span><br><span class="line">            field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            field.set(user,appleService);</span><br><span class="line">            <span class="comment">// 然后我们调用 getAppleService() 来调用它的 eat()方法</span></span><br><span class="line">            user.getAppleService().eat();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>输出结果：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">吃苹果</span><br></pre></td></tr></table></figure><p>**看吧 我们的依赖注入就完成了吧，其实Spring的依赖注入就是用的反射，前面说了，优秀的框架 离不开反射机制。重点学习 反射哦，比如有比如 mybatis 的 结果集映射处理…; 没有反射就没有这么优秀的框架。关于Spring 依赖注入 我就不多说了，往后我也会根据自己的见解，写博客 mybatis 的远离分析 源码也看过了，可以看我的博客</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;::: hljs-center&lt;/p&gt;
&lt;h1 id=&quot;反射的使用&quot;&gt;&lt;a href=&quot;#反射的使用&quot; class=&quot;headerlink&quot; title=&quot;反射的使用&quot;&gt;&lt;/a&gt;反射的使用&lt;/h1&gt;&lt;p&gt;:::&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;java 开发中 任何的一个框架 都离不开发射机制，比如我们最熟悉的 框架&lt;code&gt;Mybatis&lt;/code&gt;、&lt;code&gt;Spring&lt;/code&gt;…&lt;/strong&gt; 几乎所有封装的  框架中都离不开它，想要做架构，做工具、写一个 starter 都离不开反射机制。 所以说在开发中，反射机制运用得当可以省下很多代码。&lt;br&gt;&lt;strong&gt;接下来个人学习的见解&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;获取当前类的相关信息&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&quot;反射机制&quot;&gt;&lt;a href=&quot;#反射机制&quot; class=&quot;headerlink&quot; title=&quot;反射机制&quot;&gt;&lt;/a&gt;反射机制&lt;/h1&gt;&lt;p&gt; &amp;emsp; 反射应该是 JVM读取相应类的 字节码文件；在类的运行状态中，通过字节码文件也就是.class文件，获取当前类的所有信息，包括 成员变量，私有、共有的方法、构造函数、以及相关的注解等。&lt;/p&gt;
&lt;h1 id=&quot;反射的三种方式&quot;&gt;&lt;a href=&quot;#反射的三种方式&quot; class=&quot;headerlink&quot; title=&quot;反射的三种方式&quot;&gt;&lt;/a&gt;反射的三种方式&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;对于任意一个类，都能够知道这个类的所有属性和方法 &lt;code&gt;User.class&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;对于任意一个类的全路径名，都能够知道这个类的所有属性和方法 &lt;code&gt;class.forName(&amp;quot;com.baidu.User&amp;quot;)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;对于任意一个实例对象，都能够调用它的任意一个方法和属性 &lt;code&gt;(new User()).getClass()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;h1 id=&quot;反射之构造方法&quot;&gt;&lt;a href=&quot;#反射之构造方法&quot; class=&quot;headerlink&quot; title=&quot;反射之构造方法&quot;&gt;&lt;/a&gt;反射之构造方法&lt;/h1&gt;&lt;h2 id=&quot;1-getConstructor-Class-lt-gt-…-parameterTypes&quot;&gt;&lt;a href=&quot;#1-getConstructor-Class-lt-gt-…-parameterTypes&quot; class=&quot;headerlink&quot; title=&quot;1.getConstructor(Class&amp;lt;?&amp;gt;… parameterTypes)&quot;&gt;&lt;/a&gt;1.getConstructor(Class&amp;lt;?&amp;gt;… parameterTypes)&lt;/h2&gt;&amp;emsp; 反射有三种方式，我们就采用其中一种  &lt;code&gt;(new User()).getClass()&lt;/code&gt;&lt;br&gt;通过 反射 拿到User的构造器 实例化 一个user,&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://lyj08.gitee.io/categories/java/"/>
    
    
      <category term="反射" scheme="http://lyj08.gitee.io/tags/%E5%8F%8D%E5%B0%84/"/>
    
  </entry>
  
  <entry>
    <title>docker部署SprignBoot项目,注意事项</title>
    <link href="http://lyj08.gitee.io/posts/b742af1/"/>
    <id>http://lyj08.gitee.io/posts/b742af1/</id>
    <published>2019-12-19T07:39:40.000Z</published>
    <updated>2020-12-30T09:26:35.079Z</updated>
    
    <content type="html"><![CDATA[<p>Docker 笔记</p><h3 id="Linux-CentOs-下安装-Docker"><a href="#Linux-CentOs-下安装-Docker" class="headerlink" title="Linux CentOs 下安装 Docker"></a>Linux CentOs 下安装 Docker</h3><h3 id="1、安装与启动"><a href="#1、安装与启动" class="headerlink" title="1、安装与启动"></a>1、安装与启动</h3><p>参考地址（<a href="http://docs.docker.com/install/linux/docker-ce/centos/">官网</a>）；依照着网址即可安装。</p><a id="more"></a><h3 id="2、Docker-常用命令"><a href="#2、Docker-常用命令" class="headerlink" title="2、Docker 常用命令"></a>2、Docker 常用命令</h3><blockquote><h4 id="2-1-拉取镜像"><a href="#2-1-拉取镜像" class="headerlink" title="2.1 拉取镜像"></a>2.1 拉取镜像</h4><p>镜像地址：<a href="http://hub.docker.com/">http://hub.docker.com/</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;docker pull 镜像地址</span><br></pre></td></tr></table></figure><h4 id="2-2-查看运行容器"><a href="#2-2-查看运行容器" class="headerlink" title="2.2 查看运行容器"></a>2.2 查看运行容器</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;docker ps</span><br><span class="line"></span><br><span class="line">&gt;docker ps -a # 查看所有容器包括不运行的</span><br></pre></td></tr></table></figure><h4 id="2-3-进入容器"><a href="#2-3-进入容器" class="headerlink" title="2.3 进入容器"></a>2.3 进入容器</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;docker exec -it  容齐id  bash</span><br></pre></td></tr></table></figure><h4 id="2-4-删除容器"><a href="#2-4-删除容器" class="headerlink" title="2.4 删除容器"></a>2.4 删除容器</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;docker rm 容器id</span><br><span class="line">&gt;docker rm $(docker ps -aq) # 删除所有容器</span><br><span class="line">&gt;docker stop $(docker ps -q) &amp; docker rm $(docker ps -aq) #停用并删除容器</span><br></pre></td></tr></table></figure><h4 id="2-5-删除镜像"><a href="#2-5-删除镜像" class="headerlink" title="2.5 删除镜像"></a>2.5 删除镜像</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;docker rmi 镜像ID</span><br></pre></td></tr></table></figure><h4 id="2-6-查看所有的镜像"><a href="#2-6-查看所有的镜像" class="headerlink" title="2.6 查看所有的镜像"></a>2.6 查看所有的镜像</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;docker images</span><br></pre></td></tr></table></figure><h4 id="2-7-运行镜像"><a href="#2-7-运行镜像" class="headerlink" title="2.7 运行镜像"></a>2.7 运行镜像</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;docker run 镜像名称 # 最简单的 前台运行</span><br><span class="line">&gt;docker run -d -p 本机端口（访问端口）：容器端口 镜像名称</span><br></pre></td></tr></table></figure><ul><li>-d: 容器后台运行</li><li>-p:指定本机访问内部端口的映射</li></ul></blockquote><h3 id="3、docker-安装tomcat"><a href="#3、docker-安装tomcat" class="headerlink" title="3、docker 安装tomcat"></a>3、docker 安装tomcat</h3><p>进入网址 <a href="http://hub.docker.com/">http://hub.docker.com/</a>  搜索Tomcat</p><p><img src="/!%5Bimage20191210113639818.png%5D(http://www.memoryoverflow.cn/file/articleContentImg/2019-12-23/1577085271709.png" alt="image-20191210113639818"></p><p><img src="http://www.memoryoverflow.cn/file/articleContentImg/2019-12-23/1577085373244.png" alt="image20191210113725961.png"></p><p><img src="http://www.memoryoverflow.cn/file/articleContentImg/2019-12-23/1577085403304.png" alt="image20191210113756463.png"></p><p>复制命令：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull tomcat:jdk8</span><br></pre></td></tr></table></figure><p><img src="http://www.memoryoverflow.cn/file/articleContentImg/2019-12-23/1577085436234.png" alt="image20191210120600033.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><p><img src="http://www.memoryoverflow.cn/file/articleContentImg/2019-12-23/1577085459286.png" alt="image20191210120639682.png"></p><p><strong>启动 Tomcat:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p <span class="number">1010</span>:<span class="number">8080</span> tomcat</span><br></pre></td></tr></table></figure><p><img src="http://www.memoryoverflow.cn/file/articleContentImg/2019-12-23/1577085480792.png" alt="image20191210120917905.png"></p><p>启动成功 访问：<a href="http://www.memoryoverflow.cn:1010/">http://www.memoryoverflow.cn:1010/</a><br><img src="http://www.memoryoverflow.cn/file/articleContentImg/2019-12-23/1577085491936.png" alt="image20191210121044795.png"></p><p>要修改配置信息：进入容器内部</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it 容器ID bash</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it 594014aedf68 bash</span><br></pre></td></tr></table></figure><p><img src="http://www.memoryoverflow.cn/file/articleContentImg/2019-12-23/1577085508954.png" alt="image20191210121327049.png"></p><p>进入 tomcat 内部 可以对 conf/server.xml 文件=进行修改。</p><h3 id="4、docker-构建并且发布自己的SpringBoot项目"><a href="#4、docker-构建并且发布自己的SpringBoot项目" class="headerlink" title="4、docker 构建并且发布自己的SpringBoot项目"></a>4、docker 构建并且发布自己的SpringBoot项目</h3><ol><li></li><li><p>找到一个位置 建立一个文件夹</p><p>此处在</p><p><code>mkdir /usr/local/docker/demo</code></p><p><code>cd /usr/local/docker/demo</code> </p><p>建立一个文件Dockerfile</p><p><code>touch Dockerfile</code>  </p></li><li><p>自己建立一个SpringBoot项目</p><p>写一个Controller 测试</p></li></ol><p><img src="http://www.memoryoverflow.cn/file/articleContentImg/2019-12-23/1577085589014.png" alt="image20191210144400363.png"></p><p>   在 pom.xml 文件中加入 配置</p>   <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;properties&gt;</span><br><span class="line">    &lt;docker.image.prefix&gt;springboot&lt;/docker.image.prefix&gt;</span><br><span class="line">&lt;/properties&gt;</span><br></pre></td></tr></table></figure><p>   在这中间加入：<build> <plugins>……</plugins></build></p>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;plugin&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">&lt;/plugin&gt;</span><br><span class="line">&lt;!-- Docker maven plugin --&gt;</span><br><span class="line">&lt;plugin&gt;</span><br><span class="line">    &lt;groupId&gt;com.spotify&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;docker-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.0.0&lt;/version&gt;</span><br><span class="line">    &lt;configuration&gt;</span><br><span class="line">        &lt;imageName&gt;$&#123;docker.image.prefix&#125;/$&#123;project.artifactId&#125;&lt;/imageName&gt;</span><br><span class="line">        &lt;dockerDirectory&gt;src/main/docker&lt;/dockerDirectory&gt;</span><br><span class="line">        &lt;resources&gt;</span><br><span class="line">            &lt;resource&gt;</span><br><span class="line">                &lt;targetPath&gt;/&lt;/targetPath&gt;</span><br><span class="line">                &lt;directory&gt;$&#123;project.build.directory&#125;&lt;/directory&gt;</span><br><span class="line">                &lt;include&gt;$&#123;project.build.finalName&#125;.jar&lt;/include&gt;</span><br><span class="line">            &lt;/resource&gt;</span><br><span class="line">        &lt;/resources&gt;</span><br><span class="line">    &lt;/configuration&gt;</span><br><span class="line">&lt;/plugin&gt;</span><br><span class="line">&lt;!-- Docker maven plugin --&gt;</span><br></pre></td></tr></table></figure><p>   然后 将项目打包 比我我项目名为：demo.jar </p><p>   接着 <code>vim Dockerfile</code>        </p>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 依赖于jdk 运行环境,如果还没有安装 第一次构建会自动安装</span><br><span class="line">FROM java:<span class="number">8</span></span><br><span class="line"># 作者</span><br><span class="line">MAINTAINER 永健&lt;memoryoverflow@<span class="number">163.</span>com&gt;</span><br><span class="line">#一个特别指定的目录，用于存储数据</span><br><span class="line">VOLUME /tmp</span><br><span class="line"></span><br><span class="line"># 拷贝文件并且重命名为自己要定义的</span><br><span class="line">ADD demo.jar app.jar </span><br><span class="line"></span><br><span class="line"># 容器启动时运行的命令，相当于我们在命令行中输入java -jar xxxx.jar，为了缩短 Tomcat 的启动时间，添加java.security.egd的系统属性指向/dev/urandom作为 ENTRYPOINT</span><br><span class="line">ENTRYPOINT [<span class="string">&quot;java&quot;</span>,<span class="string">&quot;-Djava.security.egd=file:/dev/./urandom&quot;</span>,<span class="string">&quot;-jar&quot;</span>,<span class="string">&quot;/app.jar&quot;</span>]</span><br></pre></td></tr></table></figure><p>   ⚠️ 打好的项目jar 包要和 Dockerfile 文件在一个目录下，不然执行 build 命令的时候，会出现 not fount jar 错误。</p><ol start="4"><li><p>构建镜像</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t demo .</span><br></pre></td></tr></table></figure><p>demo:    就是镜像名 自定义 注意 空格 <code>.</code> </p><p>构建成功</p></li></ol><p><img src="http://www.memoryoverflow.cn/file/articleContentImg/2019-12-23/1577085629382.png" alt="image20191210143619972.png"></p><ol start="5"><li><p>查看镜像</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><p><img src="http://www.memoryoverflow.cn/file/articleContentImg/2019-12-23/1577085640595.png" alt="image20191210143705344.png"></p></li><li><p>运行镜像</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p <span class="number">1595</span>:<span class="number">1595</span> demo</span><br></pre></td></tr></table></figure><ul><li>-d: 后台运行</li><li>-p:  端口映射 将第二个位 jar 运行的端口，映射到第一个，给外部交互访问的端口</li><li>demo:  就是build 的 镜像名字</li></ul><p><img src="http://www.memoryoverflow.cn/file/articleContentImg/2019-12-23/1577085740463.png" alt="image20191210144310783.png"></p><p>运行成功：浏览器访问：<a href="http://www.memoryoverflow.cn:1595/hello">http://www.memoryoverflow.cn:1595/hello</a></p><p><img src="http://www.memoryoverflow.cn/file/articleContentImg/2019-12-23/1577085753760.png" alt="image20191210144441349.png"></p><p>到此 项目部署成功。</p></li><li><p>日志查看：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs -f -t --tail -f 容器Id</span><br></pre></td></tr></table></figure></li></ol><h3 id="5、docker-JAR-项目更新"><a href="#5、docker-JAR-项目更新" class="headerlink" title="5、docker  JAR 项目更新"></a>5、docker  JAR 项目更新</h3><h4 id="5-1-docker-替换-jar-更新。"><a href="#5-1-docker-替换-jar-更新。" class="headerlink" title="5.1 docker 替换 jar 更新。"></a>5.1 docker 替换 jar 更新。</h4><p> 接着上面的demo操作。<code>docker ps</code>  查看容器id ，找我我们部署的项目，Jar 项目。</p><p><img src="http://www.memoryoverflow.cn/file/articleContentImg/2019-12-23/1577085655051.png" alt="image20191210144310783.png"></p><p>执行命令：<code>ps exce -it 容器Id bash</code></p><p><img src="http://www.memoryoverflow.cn/file/articleContentImg/2019-12-23/1577085706610.png" alt="image20191217100359182.png"><br><code>ls -l</code></p><p>查看项目内部结构，容器内部的结构目录，每个容器的结构，都是独立开的，与宿主机的结构目录不关联，在项目内是不能直接访问 宿主机结构目录的。</p><p>有个 App.jar 就是Dockerfile 里面的 add 命名 自定义的 app.jar ; 最后就是运行的这一个 app.jar</p><p>只要替换掉这个app.jar 然后重启 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker restart 容器Id</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>替换命名：将宿主机的 jar 更新替换到 容器中的 jar 文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker cp 新jar的路径 容器ID:容器中的目录app.jar</span><br><span class="line"></span><br><span class="line">例如：</span><br><span class="line">  docker cp /opt/docker/appNew.jar 容器ID:/app.jar </span><br><span class="line">  这样子即可替换更新 jar 文件，然后重启即可。</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>即可更新项目，但是这样子更新，有一个问题，如果项目是在线上的话，更新过程项目会在启动成功前无法访问。这样子会影响用户。</p><h4 id="5-2-docker-部署-nginx-无缝更新"><a href="#5-2-docker-部署-nginx-无缝更新" class="headerlink" title="5.2 docker 部署 + nginx 无缝更新"></a>5.2 docker 部署 + nginx 无缝更新</h4><p>为了能够平滑更新，不让客户所知，可以通过nginx 处理。</p><p>之前已经打好了一个 jar 端口为 1595，现在将更新后的 jar 再继续打一个 镜像，并将该j a r 的端口改为1596，镜像名为 demo_1596。</p><p>然后就有了两个 镜像一个是 demo  一个是demo_1596 其中最新的是后者。</p><p>Nginx  配置端口拦截，之前的项目 demo 项目端口为 1595，现在将其监听的项目 转发到 ip:1596端口上，保存退出。</p><p>重启新的 jar demo_1596。 重启成功后，reload nginx 让其修改的配置信息生效。生效后，就可以 <code>docker stop 老的容器Id了</code></p><h3 id="6、docker-宿主机目录与容器目录，共享。"><a href="#6、docker-宿主机目录与容器目录，共享。" class="headerlink" title="6、docker 宿主机目录与容器目录，共享。"></a>6、docker 宿主机目录与容器目录，共享。</h3><p>-v 宿主机目录:容器中的目录</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p <span class="number">8080</span>:<span class="number">80</span> -v /home/file:/home/file app</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Docker 笔记&lt;/p&gt;
&lt;h3 id=&quot;Linux-CentOs-下安装-Docker&quot;&gt;&lt;a href=&quot;#Linux-CentOs-下安装-Docker&quot; class=&quot;headerlink&quot; title=&quot;Linux CentOs 下安装 Docker&quot;&gt;&lt;/a&gt;Linux CentOs 下安装 Docker&lt;/h3&gt;&lt;h3 id=&quot;1、安装与启动&quot;&gt;&lt;a href=&quot;#1、安装与启动&quot; class=&quot;headerlink&quot; title=&quot;1、安装与启动&quot;&gt;&lt;/a&gt;1、安装与启动&lt;/h3&gt;&lt;p&gt;参考地址（&lt;a href=&quot;http://docs.docker.com/install/linux/docker-ce/centos/&quot;&gt;官网&lt;/a&gt;）；依照着网址即可安装。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Docker" scheme="http://lyj08.gitee.io/categories/Docker/"/>
    
    
      <category term="SpringBoot" scheme="http://lyj08.gitee.io/tags/SpringBoot/"/>
    
      <category term="linux" scheme="http://lyj08.gitee.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>mybatis使用存储过程</title>
    <link href="http://lyj08.gitee.io/posts/baa6fbb5/"/>
    <id>http://lyj08.gitee.io/posts/baa6fbb5/</id>
    <published>2019-12-07T09:53:39.000Z</published>
    <updated>2020-12-30T09:27:05.973Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、存储过程创建"><a href="#1、存储过程创建" class="headerlink" title="1、存储过程创建"></a>1、存储过程创建</h3><p>&emsp; 创建存储过程使用 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">CREATE PROCEDURE <span class="title">name</span><span class="params">([IN 参数<span class="number">1</span> INT,OUT 参数<span class="number">2</span>,OUT])</span></span></span><br><span class="line"><span class="function">BEGIN</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"> -- 业务逻辑 </span></span><br><span class="line"><span class="function">END</span>;</span><br></pre></td></tr></table></figure><a id="more"></a><ol><li>CREATE PROCEDURE: 创建存储过程的sql语法</li><li>name: 存储过程的名字 自定义</li><li>(): 括号就是参数，参数格式<br>1、IN 代表入参  OUT 代表 输出参数，INTOUT：输入也输出<br>2、参数1 参数name<br>3、INT 第三个参数代表 入参 或者 出参的类型，写的是数据库的类型。<br>4、bengin — end;  中间就是 要封装的业务逻辑。</li></ol><p>&emsp; <strong>例子：</strong></p><p>&emsp; 使用 navicat 软件操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">CREATE PROCEDURE <span class="title">pp</span><span class="params">(OUT roleId INT,OUT cityId INT,IN ciName VARCHAR(<span class="number">64</span>)</span>)</span></span><br><span class="line"><span class="function">BEGIN</span></span><br><span class="line"><span class="function">  -- 插入 一条数据</span></span><br><span class="line"><span class="function">  INSERT INTO <span class="title">tb_city</span> <span class="params">(cityName)</span> <span class="title">VALUES</span><span class="params">(ciName)</span></span>; </span><br><span class="line">  </span><br><span class="line">  -- 获取最新Id</span><br><span class="line">  <span class="function">SELECT <span class="title">max</span><span class="params">(tb_city.id)</span> INTO cityId FROM tb_city</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">INSERT INTO <span class="title">tb_role</span> <span class="params">(name,city_id)</span> <span class="title">VALUES</span><span class="params">(<span class="string">&quot;superman&quot;</span>,cityId)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">SELECT <span class="title">max</span><span class="params">(tb_role.id)</span> INTO roleId FROM tb_role</span>;</span><br><span class="line"></span><br><span class="line">  SELECT roleId;</span><br><span class="line"></span><br><span class="line">  SELECT cityId;</span><br><span class="line">END;</span><br></pre></td></tr></table></figure><h3 id="2、存储过程的调用"><a href="#2、存储过程的调用" class="headerlink" title="2、存储过程的调用"></a>2、存储过程的调用</h3><p>&emsp; <code>call 存储过程的名字(参数)</code></p><p>以上面为例子</p><p><code>call pp(@roleId,@cityId,&quot;广州&quot;);</code></p><p>结果： 两个结果 是输出的<br><img src="http://www.memoryoverflow.cn/file/articleContentImg/2019-12-07/1575706239100.png" alt="image.png"></p><h3 id="3、删除存储过程"><a href="#3、删除存储过程" class="headerlink" title="3、删除存储过程"></a>3、删除存储过程</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DROP PROCEDURE  存储过程名字;</span><br><span class="line">DROP PROCEDURE IF EXISTS 过程;</span><br></pre></td></tr></table></figure><h3 id="4、查看存储过程状态"><a href="#4、查看存储过程状态" class="headerlink" title="4、查看存储过程状态"></a>4、查看存储过程状态</h3><p><strong>查看状态</strong><br><code>SHOW PROCEDURE STATUS LIKE  &#39;pp&#39;</code></p><p><img src="http://www.memoryoverflow.cn/file/articleContentImg/2019-12-07/1575706699047.png" alt="image.png"></p><p><strong>查看定义</strong><br><code>SHOW CREATE PROCEDURE pp</code></p><p><img src="http://www.memoryoverflow.cn/file/articleContentImg/2019-12-07/1575706807277.png" alt="image.png"></p><h3 id="6、事务使用"><a href="#6、事务使用" class="headerlink" title="6、事务使用"></a>6、事务使用</h3><p>&emsp; 使用存储过程是为了 封装住 业务逻辑到一套sql中，减少网络的开销，提执行速度。但是一系列的表操作，必定要保证原子性，要么全部成功要么全部失败。</p><p><strong>Mysql事务操作语句：</strong></p><ol><li>START TRANSACTION: 开始事务，autocommit设为0，如果已经有一个事务在运行，则会触发一个隐藏的COMMIT  </li><li>COMMIT：提交事务，保存更改。</li><li>ROLLBACK：回滚本事务对数据库的所有更改，然后结束事务。</li><li>SAVEPOINT savepoint_name：创建一个savepoint识别符来ROLLBACK TO SAVEPOINT。</li><li>ROLLBACK TO SAVEPOINT savepoint_name：回滚到从savepoint_name开始对数据库的所有更改，这样就允许回滚事务中的一部分，保证更改的一个子集被提交 。</li><li>SET TRANSACTION：允许设置事务的隔离级别。</li><li>LOCK TABLES：允许显式的锁住一个或多个table，会隐式的关闭当前打开的事务，建议在执行LOCK TABLES语句之前显式的commit或rollback。我们一般所以一般在事务代码里不会使用LOCK TABLES</li></ol><p><strong>例子1:</strong><br>&emsp; 使用 <code>set autocommit=0;</code> 设置 事务不自动提交；<br>还用上面的例子，加上事务测试：</p><p>创建：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">CREATE PROCEDURE <span class="title">pp</span><span class="params">(OUT roleId INT,OUT cityId INT,IN ciName VARCHAR(<span class="number">64</span>)</span>) </span></span><br><span class="line"><span class="function">BEGIN</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">  set autocommit</span>=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">INSERT INTO <span class="title">tb_city</span> <span class="params">(cityName)</span> <span class="title">VALUES</span><span class="params">(<span class="string">&quot;广州&quot;</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">SELECT <span class="title">max</span><span class="params">(tb_city.id)</span> INTO cityId FROM tb_city</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">INSERT INTO <span class="title">tb_role</span> <span class="params">(name,city_id)</span> <span class="title">VALUES</span><span class="params">(<span class="string">&quot;superman&quot;</span>,cityId)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">SELECT <span class="title">max</span><span class="params">(tb_role.id)</span> INTO roleId FROM tb_role</span>;</span><br><span class="line"></span><br><span class="line">  SELECT roleId;</span><br><span class="line"></span><br><span class="line">  SELECT cityId;</span><br><span class="line"></span><br><span class="line">  -- 这条语句会报错</span><br><span class="line">  <span class="function">INSERT INTO <span class="title">tb_city</span> <span class="params">(cityName)</span> <span class="title">VALUES</span><span class="params">(ciName)</span></span>;</span><br><span class="line"></span><br><span class="line">  COMMIT;</span><br><span class="line">END;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>对两张表进行操作，当前两张表都是空表。<br><img src="http://www.memoryoverflow.cn/file/articleContentImg/2019-12-07/1575707743604.png" alt="image.png">)<img src="http://www.memoryoverflow.cn/file/articleContentImg/2019-12-07/1575707820829.png" alt="image.png">)<img src="http://www.memoryoverflow.cn/file/articleContentImg/2019-12-07/1575707832131.png" alt="image.png"></p><p>其中city表的cityName 字段长度设为 2；<br><img src="http://www.memoryoverflow.cn/file/articleContentImg/2019-12-07/1575707806589.png" alt="image.png"></p><p>调用：<code>call pp(@roleId,@cityId,&quot;深圳市&quot;);</code> 看结果：</p><p><img src="http://www.memoryoverflow.cn/file/articleContentImg/2019-12-07/1575707980276.png" alt="image.png"></p><p><strong>深圳市：</strong> 字段超出长度； 看看前面两张表有没有插入数据。 肯定是没有的，事务没有提交。</p><p><strong>事务第二种方式</strong></p><p><strong>START TRANSACTION;</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">CREATE PROCEDURE <span class="title">pp</span><span class="params">(OUT roleId INT,OUT cityId INT,IN ciName VARCHAR(<span class="number">64</span>)</span>) </span></span><br><span class="line"><span class="function">BEGIN</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">  START TRANSACTION</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">INSERT INTO <span class="title">tb_city</span> <span class="params">(cityName)</span> <span class="title">VALUES</span><span class="params">(<span class="string">&quot;广州&quot;</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">SELECT <span class="title">max</span><span class="params">(tb_city.id)</span> INTO cityId FROM tb_city</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">INSERT INTO <span class="title">tb_role</span> <span class="params">(name,city_id)</span> <span class="title">VALUES</span><span class="params">(<span class="string">&quot;superman&quot;</span>,cityId)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">SELECT <span class="title">max</span><span class="params">(tb_role.id)</span> INTO roleId FROM tb_role</span>;</span><br><span class="line"></span><br><span class="line">  SELECT roleId;</span><br><span class="line"></span><br><span class="line">  SELECT cityId;</span><br><span class="line"></span><br><span class="line">  -- 这条语句会报错</span><br><span class="line">  <span class="function">INSERT INTO <span class="title">tb_city</span> <span class="params">(cityName)</span> <span class="title">VALUES</span><span class="params">(ciName)</span></span>;</span><br><span class="line"></span><br><span class="line">  COMMIT;</span><br><span class="line">END;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>事务第三种：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">CREATE PROCEDURE <span class="title">pp</span><span class="params">()</span></span></span><br><span class="line"><span class="function">BEGIN</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">  declare t_error <span class="keyword">int</span> <span class="keyword">default</span> 0</span>;  -- 标志执行出错</span><br><span class="line">declare <span class="keyword">continue</span> handler <span class="keyword">for</span> sqlexception set t_error=<span class="number">1</span>; -- 出错继续执行 并且设错误标志为<span class="number">1</span></span><br><span class="line"></span><br><span class="line">START TRANSACTION; -- 开启事物</span><br><span class="line"><span class="function">INSERT INTO <span class="title">tb_city</span> <span class="params">(cityName)</span> <span class="title">VALUES</span><span class="params">(<span class="string">&quot;珠海&quot;</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">INSERT INTO <span class="title">tb_role</span> <span class="params">(name)</span> <span class="title">VALUES</span><span class="params">(<span class="string">&quot;superman&quot;</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">INSERT INTO <span class="title">tb_city</span> <span class="params">(cityName)</span> <span class="title">VALUES</span><span class="params">(<span class="string">&quot;湛江23&quot;</span>)</span></span>;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">if</span> t_error=<span class="number">1</span> THEN</span><br><span class="line">ROLLBACK; -- 事物回滚</span><br><span class="line">ELSE</span><br><span class="line">COMMIT;</span><br><span class="line">END IF;</span><br><span class="line"></span><br><span class="line">END;</span><br></pre></td></tr></table></figure><h3 id="7、变量的使用"><a href="#7、变量的使用" class="headerlink" title="7、变量的使用"></a>7、变量的使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">CREATE PROCEDURE <span class="title">bianliang</span><span class="params">()</span></span></span><br><span class="line"><span class="function">BEGIN</span></span><br><span class="line"><span class="function">        declare count <span class="keyword">int</span></span>; -- 定义变量</span><br><span class="line"></span><br><span class="line">select count; -- 查询 结果 <span class="keyword">null</span></span><br><span class="line"></span><br><span class="line">set count  = <span class="number">10</span>;  -- 赋值</span><br><span class="line"></span><br><span class="line">select count; -- 结果 <span class="number">10</span></span><br><span class="line">END;</span><br></pre></td></tr></table></figure><p><code>call bianliang();</code></p><h3 id="8、if-else-if"><a href="#8、if-else-if" class="headerlink" title="8、if-else-if"></a>8、if-else-if</h3><p>根据插入id 来判断是否插入成功</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"> CREATE PROCEDURE bianliang()</span><br><span class="line">BEGIN</span><br><span class="line">        declare count int; -- 定义变量</span><br><span class="line"></span><br><span class="line">declare lastId int;</span><br><span class="line"></span><br><span class="line">SELECT MAX(tb_city.id) INTO count from tb_city;</span><br><span class="line"></span><br><span class="line">INSERT INTO tb_city (cityName) VALUES(&quot;佛山&quot;);</span><br><span class="line"></span><br><span class="line">SELECT MAX(tb_city.id) INTO lastId from tb_city;</span><br><span class="line"></span><br><span class="line">if (lastId&gt;count) THEN</span><br><span class="line">SELECT &#39;添加成功&#39;;</span><br><span class="line">ELSE</span><br><span class="line">                SELECT &#39;操作失败&#39;;</span><br><span class="line">END IF;</span><br><span class="line"></span><br><span class="line">END;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>结果</strong><br><img src="http://www.memoryoverflow.cn/file/articleContentImg/2019-12-07/1575709036986.png" alt="image.png"></p><h3 id="9、-while-····-end-while"><a href="#9、-while-····-end-while" class="headerlink" title="9、 while ···· end while"></a>9、 while ···· end while</h3><p><strong>批量插入数据</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">CREATE PROCEDURE <span class="title">whiles</span><span class="params">()</span></span></span><br><span class="line"><span class="function">BEGIN</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">declare <span class="keyword">var</span> <span class="keyword">int</span></span>;</span><br><span class="line">set <span class="keyword">var</span> =<span class="number">0</span>;</span><br><span class="line">WHILE <span class="keyword">var</span>&lt;<span class="number">5</span> DO</span><br><span class="line">  <span class="function">INSERT INTO <span class="title">tb_city</span> <span class="params">(cityName)</span> <span class="title">VALUES</span><span class="params">(<span class="string">&quot;湛江&quot;</span>)</span></span>;</span><br><span class="line">set <span class="keyword">var</span>=<span class="keyword">var</span>+<span class="number">1</span>;</span><br><span class="line">        END WHILE;</span><br><span class="line">END;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>结果：</strong><br><img src="http://www.memoryoverflow.cn/file/articleContentImg/2019-12-07/1575709661211.png" alt="image.png"></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1、存储过程创建&quot;&gt;&lt;a href=&quot;#1、存储过程创建&quot; class=&quot;headerlink&quot; title=&quot;1、存储过程创建&quot;&gt;&lt;/a&gt;1、存储过程创建&lt;/h3&gt;&lt;p&gt;&amp;emsp; 创建存储过程使用 &lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;CREATE PROCEDURE &lt;span class=&quot;title&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;([IN 参数&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; INT,OUT 参数&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,OUT])&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;BEGIN&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt; -- 业务逻辑 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;END&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="数据库" scheme="http://lyj08.gitee.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="mybatis" scheme="http://lyj08.gitee.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/mybatis/"/>
    
      <category term="存储过程" scheme="http://lyj08.gitee.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/mybatis/%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B/"/>
    
    
      <category term="mybatis" scheme="http://lyj08.gitee.io/tags/mybatis/"/>
    
      <category term="存储过程" scheme="http://lyj08.gitee.io/tags/%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B/"/>
    
  </entry>
  
</feed>
